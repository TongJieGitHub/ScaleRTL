FIRRTL version 1.1.0
circuit top :
  module XBar :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip data : { valid : UInt<1>, bits : { bits : UInt<16>}}[16], flip dest : { valid : UInt<1>, bits : UInt<4>}[16], out : { valid : UInt<1>, bits : { bits : UInt<16>}}[16]}

    when io.dest[0].valid : @[SIGMA.scala 16:23]
      io.out[0] <= io.data[io.dest[0].bits] @[SIGMA.scala 17:13]
    else :
      io.out[0].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[0].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[1].valid : @[SIGMA.scala 16:23]
      io.out[1] <= io.data[io.dest[1].bits] @[SIGMA.scala 17:13]
    else :
      io.out[1].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[1].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[2].valid : @[SIGMA.scala 16:23]
      io.out[2] <= io.data[io.dest[2].bits] @[SIGMA.scala 17:13]
    else :
      io.out[2].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[2].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[3].valid : @[SIGMA.scala 16:23]
      io.out[3] <= io.data[io.dest[3].bits] @[SIGMA.scala 17:13]
    else :
      io.out[3].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[3].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[4].valid : @[SIGMA.scala 16:23]
      io.out[4] <= io.data[io.dest[4].bits] @[SIGMA.scala 17:13]
    else :
      io.out[4].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[4].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[5].valid : @[SIGMA.scala 16:23]
      io.out[5] <= io.data[io.dest[5].bits] @[SIGMA.scala 17:13]
    else :
      io.out[5].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[5].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[6].valid : @[SIGMA.scala 16:23]
      io.out[6] <= io.data[io.dest[6].bits] @[SIGMA.scala 17:13]
    else :
      io.out[6].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[6].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[7].valid : @[SIGMA.scala 16:23]
      io.out[7] <= io.data[io.dest[7].bits] @[SIGMA.scala 17:13]
    else :
      io.out[7].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[7].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[8].valid : @[SIGMA.scala 16:23]
      io.out[8] <= io.data[io.dest[8].bits] @[SIGMA.scala 17:13]
    else :
      io.out[8].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[8].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[9].valid : @[SIGMA.scala 16:23]
      io.out[9] <= io.data[io.dest[9].bits] @[SIGMA.scala 17:13]
    else :
      io.out[9].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[9].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[10].valid : @[SIGMA.scala 16:23]
      io.out[10] <= io.data[io.dest[10].bits] @[SIGMA.scala 17:13]
    else :
      io.out[10].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[10].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[11].valid : @[SIGMA.scala 16:23]
      io.out[11] <= io.data[io.dest[11].bits] @[SIGMA.scala 17:13]
    else :
      io.out[11].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[11].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[12].valid : @[SIGMA.scala 16:23]
      io.out[12] <= io.data[io.dest[12].bits] @[SIGMA.scala 17:13]
    else :
      io.out[12].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[12].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[13].valid : @[SIGMA.scala 16:23]
      io.out[13] <= io.data[io.dest[13].bits] @[SIGMA.scala 17:13]
    else :
      io.out[13].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[13].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[14].valid : @[SIGMA.scala 16:23]
      io.out[14] <= io.data[io.dest[14].bits] @[SIGMA.scala 17:13]
    else :
      io.out[14].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[14].bits.bits is invalid @[SIGMA.scala 20:18]
    when io.dest[15].valid : @[SIGMA.scala 16:23]
      io.out[15] <= io.data[io.dest[15].bits] @[SIGMA.scala 17:13]
    else :
      io.out[15].valid <= UInt<1>("h0") @[SIGMA.scala 19:19]
      io.out[15].bits.bits is invalid @[SIGMA.scala 20:18]


  module RecFNToRecFN :
    output io : { flip in : UInt<17>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}

    io is invalid
    node rawIn_exp = bits(io.in, 15, 7) @[rawFloatFromRecFN.scala 50:21]
    node _rawIn_isZero_T = bits(rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawIn_isZero = eq(_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawIn_isSpecial_T = bits(rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawIn_isSpecial = eq(_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromRecFN.scala 54:23]
    rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawIn_out_isNaN_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawIn_out_isNaN_T_1 = and(rawIn_isSpecial, _rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawIn.isNaN <= _rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawIn_out_isInf_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawIn_out_isInf_T_1 = eq(_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawIn_out_isInf_T_2 = and(rawIn_isSpecial, _rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isInf <= _rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawIn.isZero <= rawIn_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawIn_out_sign_T = bits(io.in, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    rawIn.sign <= _rawIn_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawIn_out_sExp_T = cvt(rawIn_exp) @[rawFloatFromRecFN.scala 59:27]
    rawIn.sExp <= _rawIn_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawIn_out_sig_T = eq(rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawIn_out_sig_T_1 = bits(io.in, 6, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawIn_out_sig_hi = cat(UInt<1>("h0"), _rawIn_out_sig_T) @[Cat.scala 33:92]
    node _rawIn_out_sig_T_2 = cat(rawIn_out_sig_hi, _rawIn_out_sig_T_1) @[Cat.scala 33:92]
    rawIn.sig <= _rawIn_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node _io_out_T = shl(io.in, 0) @[RecFNToRecFN.scala 64:35]
    io.out <= _io_out_T @[RecFNToRecFN.scala 64:27]
    node _io_exceptionFlags_T = bits(rawIn.sig, 6, 6) @[common.scala 82:56]
    node _io_exceptionFlags_T_1 = eq(_io_exceptionFlags_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_exceptionFlags_T_2 = and(rawIn.isNaN, _io_exceptionFlags_T_1) @[common.scala 82:46]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, UInt<4>("h0")) @[Cat.scala 33:92]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RecFNToRecFN.scala 65:27]

  module RoundAnyRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}

    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node _adjustedSig_T = bits(io.in.sig, 16, 7) @[RoundAnyRawFNToRecFN.scala 114:26]
    node _adjustedSig_T_1 = bits(io.in.sig, 6, 0) @[RoundAnyRawFNToRecFN.scala 115:26]
    node _adjustedSig_T_2 = orr(_adjustedSig_T_1) @[RoundAnyRawFNToRecFN.scala 115:60]
    node adjustedSig = cat(_adjustedSig_T, _adjustedSig_T_2) @[Cat.scala 33:92]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<7> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 51:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 57:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 58:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 57:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 58:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 57:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 58:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 77:58]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 58) @[primitives.scala 79:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = bits(_roundMask_T_3, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_5 = bits(_roundMask_T_4, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_6 = bits(_roundMask_T_4, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_7 = cat(_roundMask_T_5, _roundMask_T_6) @[Cat.scala 33:92]
    node _roundMask_T_8 = bits(_roundMask_T_3, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_9 = bits(_roundMask_T_8, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_10 = bits(_roundMask_T_8, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_11 = cat(_roundMask_T_9, _roundMask_T_10) @[Cat.scala 33:92]
    node _roundMask_T_12 = cat(_roundMask_T_7, _roundMask_T_11) @[Cat.scala 33:92]
    node _roundMask_T_13 = bits(_roundMask_T_2, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_14 = bits(_roundMask_T_13, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_15 = bits(_roundMask_T_13, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_16 = cat(_roundMask_T_14, _roundMask_T_15) @[Cat.scala 33:92]
    node _roundMask_T_17 = cat(_roundMask_T_12, _roundMask_T_16) @[Cat.scala 33:92]
    node _roundMask_T_18 = not(_roundMask_T_17) @[primitives.scala 74:36]
    node _roundMask_T_19 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_18) @[primitives.scala 74:21]
    node _roundMask_T_20 = not(_roundMask_T_19) @[primitives.scala 74:17]
    node _roundMask_T_21 = cat(_roundMask_T_20, UInt<3>("h7")) @[Cat.scala 33:92]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 57:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 58:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 77:58]
    node _roundMask_T_22 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 79:22]
    node _roundMask_T_23 = bits(_roundMask_T_22, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_24 = bits(_roundMask_T_23, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_25 = bits(_roundMask_T_23, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_26 = cat(_roundMask_T_24, _roundMask_T_25) @[Cat.scala 33:92]
    node _roundMask_T_27 = bits(_roundMask_T_22, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_28 = cat(_roundMask_T_26, _roundMask_T_27) @[Cat.scala 33:92]
    node _roundMask_T_29 = mux(roundMask_msb_3, _roundMask_T_28, UInt<1>("h0")) @[primitives.scala 61:24]
    node _roundMask_T_30 = mux(roundMask_msb_1, _roundMask_T_21, _roundMask_T_29) @[primitives.scala 66:24]
    node _roundMask_T_31 = mux(roundMask_msb, _roundMask_T_30, UInt<1>("h0")) @[primitives.scala 61:24]
    node _roundMask_T_32 = or(_roundMask_T_31, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 157:23]
    node roundMask = cat(_roundMask_T_32, UInt<2>("h3")) @[Cat.scala 33:92]
    node _shiftedRoundMask_T = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node shiftedRoundMask = cat(UInt<1>("h0"), _shiftedRoundMask_T) @[Cat.scala 33:92]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 161:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 162:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 163:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 169:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<10>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 178:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _sRoundedExp_T = shr(roundedSig, 8) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 183:69]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 185:23]
    node _common_fractOut_T = bits(roundedSig, 7, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _common_fractOut_T_1 = bits(roundedSig, 6, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _common_fractOut_T_2 = mux(UInt<1>("h0"), _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h7b"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 195:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node unboundedRange_roundPosBit = mux(UInt<1>("h0"), _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _unboundedRange_anyRound_T_1 = and(UInt<1>("h0"), _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 203:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 207:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _roundCarry_T = bits(roundedSig, 9, 9) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _roundCarry_T_1 = bits(roundedSig, 8, 8) @[RoundAnyRawFNToRecFN.scala 211:27]
    node roundCarry = mux(UInt<1>("h0"), _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _common_underflow_T_5 = mux(UInt<1>("h0"), _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _common_underflow_T_10 = mux(UInt<1>("h0"), _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _expOut_T_4 = not(UInt<9>("h7b")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h7b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<7>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<7>("h7f"), UInt<7>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 281:11]
    node io_out_hi = cat(signOut, expOut) @[Cat.scala 33:92]
    node _io_out_T = cat(io_out_hi, fractOut) @[Cat.scala 33:92]
    io.out <= _io_out_T @[RoundAnyRawFNToRecFN.scala 284:12]
    node io_exceptionFlags_lo = cat(underflow, inexact) @[Cat.scala 33:92]
    node io_exceptionFlags_hi_hi = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 33:92]
    node io_exceptionFlags_hi = cat(io_exceptionFlags_hi_hi, overflow) @[Cat.scala 33:92]
    node _io_exceptionFlags_T = cat(io_exceptionFlags_hi, io_exceptionFlags_lo) @[Cat.scala 33:92]
    io.exceptionFlags <= _io_exceptionFlags_T @[RoundAnyRawFNToRecFN.scala 285:23]

  module RecFNToRecFN_1 :
    output io : { flip in : UInt<25>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}

    io is invalid
    node rawIn_exp = bits(io.in, 23, 15) @[rawFloatFromRecFN.scala 50:21]
    node _rawIn_isZero_T = bits(rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawIn_isZero = eq(_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawIn_isSpecial_T = bits(rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawIn_isSpecial = eq(_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromRecFN.scala 54:23]
    rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawIn_out_isNaN_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawIn_out_isNaN_T_1 = and(rawIn_isSpecial, _rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawIn.isNaN <= _rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawIn_out_isInf_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawIn_out_isInf_T_1 = eq(_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawIn_out_isInf_T_2 = and(rawIn_isSpecial, _rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isInf <= _rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawIn.isZero <= rawIn_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawIn_out_sign_T = bits(io.in, 24, 24) @[rawFloatFromRecFN.scala 58:25]
    rawIn.sign <= _rawIn_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawIn_out_sExp_T = cvt(rawIn_exp) @[rawFloatFromRecFN.scala 59:27]
    rawIn.sExp <= _rawIn_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawIn_out_sig_T = eq(rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawIn_out_sig_T_1 = bits(io.in, 14, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawIn_out_sig_hi = cat(UInt<1>("h0"), _rawIn_out_sig_T) @[Cat.scala 33:92]
    node _rawIn_out_sig_T_2 = cat(rawIn_out_sig_hi, _rawIn_out_sig_T_1) @[Cat.scala 33:92]
    rawIn.sig <= _rawIn_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN @[RecFNToRecFN.scala 72:19]
    roundAnyRawFNToRecFN.io is invalid
    node _roundAnyRawFNToRecFN_io_invalidExc_T = bits(rawIn.sig, 14, 14) @[common.scala 82:56]
    node _roundAnyRawFNToRecFN_io_invalidExc_T_1 = eq(_roundAnyRawFNToRecFN_io_invalidExc_T, UInt<1>("h0")) @[common.scala 82:49]
    node _roundAnyRawFNToRecFN_io_invalidExc_T_2 = and(rawIn.isNaN, _roundAnyRawFNToRecFN_io_invalidExc_T_1) @[common.scala 82:46]
    roundAnyRawFNToRecFN.io.invalidExc <= _roundAnyRawFNToRecFN_io_invalidExc_T_2 @[RecFNToRecFN.scala 80:48]
    roundAnyRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[RecFNToRecFN.scala 81:48]
    roundAnyRawFNToRecFN.io.in <- rawIn @[RecFNToRecFN.scala 82:48]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 83:48]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RecFNToRecFN.scala 84:48]
    io.out <= roundAnyRawFNToRecFN.io.out @[RecFNToRecFN.scala 85:27]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RecFNToRecFN.scala 86:27]

  module MulAddRecFNToRaw_preMul :
    output io : { flip op : UInt<2>, flip a : UInt<17>, flip b : UInt<17>, flip c : UInt<17>, mulAddA : UInt<8>, mulAddB : UInt<8>, mulAddC : UInt<16>, toPostMul : { isSigNaNAny : UInt<1>, isNaNAOrB : UInt<1>, isInfA : UInt<1>, isZeroA : UInt<1>, isInfB : UInt<1>, isZeroB : UInt<1>, signProd : UInt<1>, isNaNC : UInt<1>, isInfC : UInt<1>, isZeroC : UInt<1>, sExpSum : SInt<10>, doSubMags : UInt<1>, CIsDominant : UInt<1>, CDom_CAlignDist : UInt<4>, highAlignedSigC : UInt<10>, bit0AlignedSigC : UInt<1>}}

    io is invalid
    node rawA_exp = bits(io.a, 15, 7) @[rawFloatFromRecFN.scala 50:21]
    node _rawA_isZero_T = bits(rawA_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawA_isZero = eq(_rawA_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawA_isSpecial_T = bits(rawA_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawA_isSpecial = eq(_rawA_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawA : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromRecFN.scala 54:23]
    rawA is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawA_out_isNaN_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawA_out_isNaN_T_1 = and(rawA_isSpecial, _rawA_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawA.isNaN <= _rawA_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawA_out_isInf_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawA_out_isInf_T_1 = eq(_rawA_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawA_out_isInf_T_2 = and(rawA_isSpecial, _rawA_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawA.isInf <= _rawA_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawA.isZero <= rawA_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawA_out_sign_T = bits(io.a, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    rawA.sign <= _rawA_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawA_out_sExp_T = cvt(rawA_exp) @[rawFloatFromRecFN.scala 59:27]
    rawA.sExp <= _rawA_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawA_out_sig_T = eq(rawA_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawA_out_sig_T_1 = bits(io.a, 6, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawA_out_sig_hi = cat(UInt<1>("h0"), _rawA_out_sig_T) @[Cat.scala 33:92]
    node _rawA_out_sig_T_2 = cat(rawA_out_sig_hi, _rawA_out_sig_T_1) @[Cat.scala 33:92]
    rawA.sig <= _rawA_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node rawB_exp = bits(io.b, 15, 7) @[rawFloatFromRecFN.scala 50:21]
    node _rawB_isZero_T = bits(rawB_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawB_isZero = eq(_rawB_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawB_isSpecial_T = bits(rawB_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawB_isSpecial = eq(_rawB_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawB : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromRecFN.scala 54:23]
    rawB is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawB_out_isNaN_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawB_out_isNaN_T_1 = and(rawB_isSpecial, _rawB_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawB.isNaN <= _rawB_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawB_out_isInf_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawB_out_isInf_T_1 = eq(_rawB_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawB_out_isInf_T_2 = and(rawB_isSpecial, _rawB_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawB.isInf <= _rawB_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawB.isZero <= rawB_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawB_out_sign_T = bits(io.b, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    rawB.sign <= _rawB_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawB_out_sExp_T = cvt(rawB_exp) @[rawFloatFromRecFN.scala 59:27]
    rawB.sExp <= _rawB_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawB_out_sig_T = eq(rawB_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawB_out_sig_T_1 = bits(io.b, 6, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawB_out_sig_hi = cat(UInt<1>("h0"), _rawB_out_sig_T) @[Cat.scala 33:92]
    node _rawB_out_sig_T_2 = cat(rawB_out_sig_hi, _rawB_out_sig_T_1) @[Cat.scala 33:92]
    rawB.sig <= _rawB_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node rawC_exp = bits(io.c, 15, 7) @[rawFloatFromRecFN.scala 50:21]
    node _rawC_isZero_T = bits(rawC_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawC_isZero = eq(_rawC_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawC_isSpecial_T = bits(rawC_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawC_isSpecial = eq(_rawC_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawC : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromRecFN.scala 54:23]
    rawC is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawC_out_isNaN_T = bits(rawC_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawC_out_isNaN_T_1 = and(rawC_isSpecial, _rawC_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawC.isNaN <= _rawC_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawC_out_isInf_T = bits(rawC_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawC_out_isInf_T_1 = eq(_rawC_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawC_out_isInf_T_2 = and(rawC_isSpecial, _rawC_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawC.isInf <= _rawC_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawC.isZero <= rawC_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawC_out_sign_T = bits(io.c, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    rawC.sign <= _rawC_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawC_out_sExp_T = cvt(rawC_exp) @[rawFloatFromRecFN.scala 59:27]
    rawC.sExp <= _rawC_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawC_out_sig_T = eq(rawC_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawC_out_sig_T_1 = bits(io.c, 6, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawC_out_sig_hi = cat(UInt<1>("h0"), _rawC_out_sig_T) @[Cat.scala 33:92]
    node _rawC_out_sig_T_2 = cat(rawC_out_sig_hi, _rawC_out_sig_T_1) @[Cat.scala 33:92]
    rawC.sig <= _rawC_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node _signProd_T = xor(rawA.sign, rawB.sign) @[MulAddRecFN.scala 95:30]
    node _signProd_T_1 = bits(io.op, 1, 1) @[MulAddRecFN.scala 95:49]
    node signProd = xor(_signProd_T, _signProd_T_1) @[MulAddRecFN.scala 95:42]
    node _sExpAlignedProd_T = add(rawA.sExp, rawB.sExp) @[MulAddRecFN.scala 98:19]
    node _sExpAlignedProd_T_1 = add(_sExpAlignedProd_T, asSInt(UInt<9>("h10b"))) @[MulAddRecFN.scala 98:32]
    node _sExpAlignedProd_T_2 = tail(_sExpAlignedProd_T_1, 1) @[MulAddRecFN.scala 98:32]
    node sExpAlignedProd = asSInt(_sExpAlignedProd_T_2) @[MulAddRecFN.scala 98:32]
    node _doSubMags_T = xor(signProd, rawC.sign) @[MulAddRecFN.scala 100:30]
    node _doSubMags_T_1 = bits(io.op, 0, 0) @[MulAddRecFN.scala 100:49]
    node doSubMags = xor(_doSubMags_T, _doSubMags_T_1) @[MulAddRecFN.scala 100:42]
    node _sNatCAlignDist_T = sub(sExpAlignedProd, rawC.sExp) @[MulAddRecFN.scala 104:42]
    node _sNatCAlignDist_T_1 = tail(_sNatCAlignDist_T, 1) @[MulAddRecFN.scala 104:42]
    node sNatCAlignDist = asSInt(_sNatCAlignDist_T_1) @[MulAddRecFN.scala 104:42]
    node posNatCAlignDist = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 105:42]
    node _isMinCAlign_T = or(rawA.isZero, rawB.isZero) @[MulAddRecFN.scala 106:35]
    node _isMinCAlign_T_1 = lt(sNatCAlignDist, asSInt(UInt<1>("h0"))) @[MulAddRecFN.scala 106:69]
    node isMinCAlign = or(_isMinCAlign_T, _isMinCAlign_T_1) @[MulAddRecFN.scala 106:50]
    node _CIsDominant_T = eq(rawC.isZero, UInt<1>("h0")) @[MulAddRecFN.scala 108:9]
    node _CIsDominant_T_1 = leq(posNatCAlignDist, UInt<4>("h8")) @[MulAddRecFN.scala 108:60]
    node _CIsDominant_T_2 = or(isMinCAlign, _CIsDominant_T_1) @[MulAddRecFN.scala 108:39]
    node CIsDominant = and(_CIsDominant_T, _CIsDominant_T_2) @[MulAddRecFN.scala 108:23]
    node _CAlignDist_T = lt(posNatCAlignDist, UInt<5>("h1a")) @[MulAddRecFN.scala 112:34]
    node _CAlignDist_T_1 = bits(posNatCAlignDist, 4, 0) @[MulAddRecFN.scala 113:33]
    node _CAlignDist_T_2 = mux(_CAlignDist_T, _CAlignDist_T_1, UInt<5>("h1a")) @[MulAddRecFN.scala 112:16]
    node CAlignDist = mux(isMinCAlign, UInt<1>("h0"), _CAlignDist_T_2) @[MulAddRecFN.scala 110:12]
    node _mainAlignedSigC_T = not(rawC.sig) @[MulAddRecFN.scala 118:28]
    node _mainAlignedSigC_T_1 = mux(doSubMags, _mainAlignedSigC_T, rawC.sig) @[MulAddRecFN.scala 118:16]
    node _mainAlignedSigC_T_2 = bits(doSubMags, 0, 0) @[Bitwise.scala 77:15]
    node _mainAlignedSigC_T_3 = mux(_mainAlignedSigC_T_2, UInt<21>("h1fffff"), UInt<21>("h0")) @[Bitwise.scala 77:12]
    node _mainAlignedSigC_T_4 = cat(_mainAlignedSigC_T_1, _mainAlignedSigC_T_3) @[Cat.scala 33:92]
    node _mainAlignedSigC_T_5 = asSInt(_mainAlignedSigC_T_4) @[MulAddRecFN.scala 120:11]
    node mainAlignedSigC = dshr(_mainAlignedSigC_T_5, CAlignDist) @[MulAddRecFN.scala 120:17]
    node _reduced4CExtra_T = shl(rawC.sig, 2) @[MulAddRecFN.scala 122:30]
    wire reduced4CExtra_reducedVec : UInt<1>[3] @[primitives.scala 119:30]
    reduced4CExtra_reducedVec is invalid @[primitives.scala 119:30]
    node _reduced4CExtra_reducedVec_0_T = bits(_reduced4CExtra_T, 3, 0) @[primitives.scala 121:33]
    node _reduced4CExtra_reducedVec_0_T_1 = orr(_reduced4CExtra_reducedVec_0_T) @[primitives.scala 121:54]
    reduced4CExtra_reducedVec[0] <= _reduced4CExtra_reducedVec_0_T_1 @[primitives.scala 121:28]
    node _reduced4CExtra_reducedVec_1_T = bits(_reduced4CExtra_T, 7, 4) @[primitives.scala 121:33]
    node _reduced4CExtra_reducedVec_1_T_1 = orr(_reduced4CExtra_reducedVec_1_T) @[primitives.scala 121:54]
    reduced4CExtra_reducedVec[1] <= _reduced4CExtra_reducedVec_1_T_1 @[primitives.scala 121:28]
    node _reduced4CExtra_reducedVec_2_T = bits(_reduced4CExtra_T, 10, 8) @[primitives.scala 124:15]
    node _reduced4CExtra_reducedVec_2_T_1 = orr(_reduced4CExtra_reducedVec_2_T) @[primitives.scala 124:57]
    reduced4CExtra_reducedVec[2] <= _reduced4CExtra_reducedVec_2_T_1 @[primitives.scala 123:38]
    node reduced4CExtra_hi = cat(reduced4CExtra_reducedVec[2], reduced4CExtra_reducedVec[1]) @[primitives.scala 125:20]
    node _reduced4CExtra_T_1 = cat(reduced4CExtra_hi, reduced4CExtra_reducedVec[0]) @[primitives.scala 125:20]
    node _reduced4CExtra_T_2 = shr(CAlignDist, 2) @[MulAddRecFN.scala 124:28]
    node reduced4CExtra_shift = dshr(asSInt(UInt<9>("h100")), _reduced4CExtra_T_2) @[primitives.scala 77:58]
    node _reduced4CExtra_T_3 = bits(reduced4CExtra_shift, 3, 2) @[primitives.scala 79:22]
    node _reduced4CExtra_T_4 = bits(_reduced4CExtra_T_3, 0, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_5 = bits(_reduced4CExtra_T_3, 1, 1) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_6 = cat(_reduced4CExtra_T_4, _reduced4CExtra_T_5) @[Cat.scala 33:92]
    node _reduced4CExtra_T_7 = and(_reduced4CExtra_T_1, _reduced4CExtra_T_6) @[MulAddRecFN.scala 122:68]
    node reduced4CExtra = orr(_reduced4CExtra_T_7) @[MulAddRecFN.scala 130:11]
    node _alignedSigC_T = shr(mainAlignedSigC, 3) @[MulAddRecFN.scala 132:28]
    node _alignedSigC_T_1 = bits(mainAlignedSigC, 2, 0) @[MulAddRecFN.scala 134:32]
    node _alignedSigC_T_2 = andr(_alignedSigC_T_1) @[MulAddRecFN.scala 134:39]
    node _alignedSigC_T_3 = eq(reduced4CExtra, UInt<1>("h0")) @[MulAddRecFN.scala 134:47]
    node _alignedSigC_T_4 = and(_alignedSigC_T_2, _alignedSigC_T_3) @[MulAddRecFN.scala 134:44]
    node _alignedSigC_T_5 = bits(mainAlignedSigC, 2, 0) @[MulAddRecFN.scala 135:32]
    node _alignedSigC_T_6 = orr(_alignedSigC_T_5) @[MulAddRecFN.scala 135:39]
    node _alignedSigC_T_7 = or(_alignedSigC_T_6, reduced4CExtra) @[MulAddRecFN.scala 135:44]
    node _alignedSigC_T_8 = mux(doSubMags, _alignedSigC_T_4, _alignedSigC_T_7) @[MulAddRecFN.scala 133:16]
    node alignedSigC_hi = asUInt(_alignedSigC_T) @[Cat.scala 33:92]
    node alignedSigC = cat(alignedSigC_hi, _alignedSigC_T_8) @[Cat.scala 33:92]
    io.mulAddA <= rawA.sig @[MulAddRecFN.scala 141:16]
    io.mulAddB <= rawB.sig @[MulAddRecFN.scala 142:16]
    node _io_mulAddC_T = bits(alignedSigC, 16, 1) @[MulAddRecFN.scala 143:30]
    io.mulAddC <= _io_mulAddC_T @[MulAddRecFN.scala 143:16]
    node _io_toPostMul_isSigNaNAny_T = bits(rawA.sig, 6, 6) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_1 = eq(_io_toPostMul_isSigNaNAny_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_2 = and(rawA.isNaN, _io_toPostMul_isSigNaNAny_T_1) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_3 = bits(rawB.sig, 6, 6) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_4 = eq(_io_toPostMul_isSigNaNAny_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_5 = and(rawB.isNaN, _io_toPostMul_isSigNaNAny_T_4) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_6 = or(_io_toPostMul_isSigNaNAny_T_2, _io_toPostMul_isSigNaNAny_T_5) @[MulAddRecFN.scala 146:32]
    node _io_toPostMul_isSigNaNAny_T_7 = bits(rawC.sig, 6, 6) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_8 = eq(_io_toPostMul_isSigNaNAny_T_7, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_9 = and(rawC.isNaN, _io_toPostMul_isSigNaNAny_T_8) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_10 = or(_io_toPostMul_isSigNaNAny_T_6, _io_toPostMul_isSigNaNAny_T_9) @[MulAddRecFN.scala 146:58]
    io.toPostMul.isSigNaNAny <= _io_toPostMul_isSigNaNAny_T_10 @[MulAddRecFN.scala 145:30]
    node _io_toPostMul_isNaNAOrB_T = or(rawA.isNaN, rawB.isNaN) @[MulAddRecFN.scala 148:42]
    io.toPostMul.isNaNAOrB <= _io_toPostMul_isNaNAOrB_T @[MulAddRecFN.scala 148:28]
    io.toPostMul.isInfA <= rawA.isInf @[MulAddRecFN.scala 149:28]
    io.toPostMul.isZeroA <= rawA.isZero @[MulAddRecFN.scala 150:28]
    io.toPostMul.isInfB <= rawB.isInf @[MulAddRecFN.scala 151:28]
    io.toPostMul.isZeroB <= rawB.isZero @[MulAddRecFN.scala 152:28]
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 153:28]
    io.toPostMul.isNaNC <= rawC.isNaN @[MulAddRecFN.scala 154:28]
    io.toPostMul.isInfC <= rawC.isInf @[MulAddRecFN.scala 155:28]
    io.toPostMul.isZeroC <= rawC.isZero @[MulAddRecFN.scala 156:28]
    node _io_toPostMul_sExpSum_T = sub(sExpAlignedProd, asSInt(UInt<5>("h8"))) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_1 = tail(_io_toPostMul_sExpSum_T, 1) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_2 = asSInt(_io_toPostMul_sExpSum_T_1) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_3 = mux(CIsDominant, rawC.sExp, _io_toPostMul_sExpSum_T_2) @[MulAddRecFN.scala 158:12]
    io.toPostMul.sExpSum <= _io_toPostMul_sExpSum_T_3 @[MulAddRecFN.scala 157:28]
    io.toPostMul.doSubMags <= doSubMags @[MulAddRecFN.scala 159:28]
    io.toPostMul.CIsDominant <= CIsDominant @[MulAddRecFN.scala 160:30]
    node _io_toPostMul_CDom_CAlignDist_T = bits(CAlignDist, 3, 0) @[MulAddRecFN.scala 161:47]
    io.toPostMul.CDom_CAlignDist <= _io_toPostMul_CDom_CAlignDist_T @[MulAddRecFN.scala 161:34]
    node _io_toPostMul_highAlignedSigC_T = bits(alignedSigC, 26, 17) @[MulAddRecFN.scala 163:20]
    io.toPostMul.highAlignedSigC <= _io_toPostMul_highAlignedSigC_T @[MulAddRecFN.scala 162:34]
    node _io_toPostMul_bit0AlignedSigC_T = bits(alignedSigC, 0, 0) @[MulAddRecFN.scala 164:48]
    io.toPostMul.bit0AlignedSigC <= _io_toPostMul_bit0AlignedSigC_T @[MulAddRecFN.scala 164:34]

  module MulAddRecFNToRaw_postMul :
    output io : { flip fromPreMul : { isSigNaNAny : UInt<1>, isNaNAOrB : UInt<1>, isInfA : UInt<1>, isZeroA : UInt<1>, isInfB : UInt<1>, isZeroB : UInt<1>, signProd : UInt<1>, isNaNC : UInt<1>, isInfC : UInt<1>, isZeroC : UInt<1>, sExpSum : SInt<10>, doSubMags : UInt<1>, CIsDominant : UInt<1>, CDom_CAlignDist : UInt<4>, highAlignedSigC : UInt<10>, bit0AlignedSigC : UInt<1>}, flip mulAddResult : UInt<17>, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<11>}}

    io is invalid
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[MulAddRecFN.scala 185:45]
    node CDom_sign = xor(io.fromPreMul.signProd, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 189:42]
    node _sigSum_T = bits(io.mulAddResult, 16, 16) @[MulAddRecFN.scala 191:32]
    node _sigSum_T_1 = add(io.fromPreMul.highAlignedSigC, UInt<1>("h1")) @[MulAddRecFN.scala 192:47]
    node _sigSum_T_2 = tail(_sigSum_T_1, 1) @[MulAddRecFN.scala 192:47]
    node _sigSum_T_3 = mux(_sigSum_T, _sigSum_T_2, io.fromPreMul.highAlignedSigC) @[MulAddRecFN.scala 191:16]
    node _sigSum_T_4 = bits(io.mulAddResult, 15, 0) @[MulAddRecFN.scala 195:28]
    node sigSum_hi = cat(_sigSum_T_3, _sigSum_T_4) @[Cat.scala 33:92]
    node sigSum = cat(sigSum_hi, io.fromPreMul.bit0AlignedSigC) @[Cat.scala 33:92]
    node _CDom_sExp_T = cvt(io.fromPreMul.doSubMags) @[MulAddRecFN.scala 202:69]
    node _CDom_sExp_T_1 = sub(io.fromPreMul.sExpSum, _CDom_sExp_T) @[MulAddRecFN.scala 202:43]
    node _CDom_sExp_T_2 = tail(_CDom_sExp_T_1, 1) @[MulAddRecFN.scala 202:43]
    node CDom_sExp = asSInt(_CDom_sExp_T_2) @[MulAddRecFN.scala 202:43]
    node _CDom_absSigSum_T = bits(sigSum, 26, 9) @[MulAddRecFN.scala 205:20]
    node _CDom_absSigSum_T_1 = not(_CDom_absSigSum_T) @[MulAddRecFN.scala 205:13]
    node _CDom_absSigSum_T_2 = bits(io.fromPreMul.highAlignedSigC, 9, 8) @[MulAddRecFN.scala 208:46]
    node _CDom_absSigSum_T_3 = bits(sigSum, 24, 10) @[MulAddRecFN.scala 209:23]
    node CDom_absSigSum_hi = cat(UInt<1>("h0"), _CDom_absSigSum_T_2) @[Cat.scala 33:92]
    node _CDom_absSigSum_T_4 = cat(CDom_absSigSum_hi, _CDom_absSigSum_T_3) @[Cat.scala 33:92]
    node CDom_absSigSum = mux(io.fromPreMul.doSubMags, _CDom_absSigSum_T_1, _CDom_absSigSum_T_4) @[MulAddRecFN.scala 204:12]
    node _CDom_absSigSumExtra_T = bits(sigSum, 8, 1) @[MulAddRecFN.scala 214:21]
    node _CDom_absSigSumExtra_T_1 = not(_CDom_absSigSumExtra_T) @[MulAddRecFN.scala 214:14]
    node _CDom_absSigSumExtra_T_2 = orr(_CDom_absSigSumExtra_T_1) @[MulAddRecFN.scala 214:36]
    node _CDom_absSigSumExtra_T_3 = bits(sigSum, 9, 1) @[MulAddRecFN.scala 215:19]
    node _CDom_absSigSumExtra_T_4 = orr(_CDom_absSigSumExtra_T_3) @[MulAddRecFN.scala 215:37]
    node CDom_absSigSumExtra = mux(io.fromPreMul.doSubMags, _CDom_absSigSumExtra_T_2, _CDom_absSigSumExtra_T_4) @[MulAddRecFN.scala 213:12]
    node _CDom_mainSig_T = dshl(CDom_absSigSum, io.fromPreMul.CDom_CAlignDist) @[MulAddRecFN.scala 218:24]
    node CDom_mainSig = bits(_CDom_mainSig_T, 17, 5) @[MulAddRecFN.scala 218:56]
    node _CDom_reduced4SigExtra_T = bits(CDom_absSigSum, 7, 0) @[MulAddRecFN.scala 221:36]
    node _CDom_reduced4SigExtra_T_1 = shl(_CDom_reduced4SigExtra_T, 3) @[MulAddRecFN.scala 221:53]
    wire CDom_reduced4SigExtra_reducedVec : UInt<1>[3] @[primitives.scala 119:30]
    CDom_reduced4SigExtra_reducedVec is invalid @[primitives.scala 119:30]
    node _CDom_reduced4SigExtra_reducedVec_0_T = bits(_CDom_reduced4SigExtra_T_1, 3, 0) @[primitives.scala 121:33]
    node _CDom_reduced4SigExtra_reducedVec_0_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_0_T) @[primitives.scala 121:54]
    CDom_reduced4SigExtra_reducedVec[0] <= _CDom_reduced4SigExtra_reducedVec_0_T_1 @[primitives.scala 121:28]
    node _CDom_reduced4SigExtra_reducedVec_1_T = bits(_CDom_reduced4SigExtra_T_1, 7, 4) @[primitives.scala 121:33]
    node _CDom_reduced4SigExtra_reducedVec_1_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_1_T) @[primitives.scala 121:54]
    CDom_reduced4SigExtra_reducedVec[1] <= _CDom_reduced4SigExtra_reducedVec_1_T_1 @[primitives.scala 121:28]
    node _CDom_reduced4SigExtra_reducedVec_2_T = bits(_CDom_reduced4SigExtra_T_1, 10, 8) @[primitives.scala 124:15]
    node _CDom_reduced4SigExtra_reducedVec_2_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_2_T) @[primitives.scala 124:57]
    CDom_reduced4SigExtra_reducedVec[2] <= _CDom_reduced4SigExtra_reducedVec_2_T_1 @[primitives.scala 123:38]
    node CDom_reduced4SigExtra_hi = cat(CDom_reduced4SigExtra_reducedVec[2], CDom_reduced4SigExtra_reducedVec[1]) @[primitives.scala 125:20]
    node _CDom_reduced4SigExtra_T_2 = cat(CDom_reduced4SigExtra_hi, CDom_reduced4SigExtra_reducedVec[0]) @[primitives.scala 125:20]
    node _CDom_reduced4SigExtra_T_3 = shr(io.fromPreMul.CDom_CAlignDist, 2) @[MulAddRecFN.scala 222:51]
    node _CDom_reduced4SigExtra_T_4 = not(_CDom_reduced4SigExtra_T_3) @[primitives.scala 51:21]
    node CDom_reduced4SigExtra_shift = dshr(asSInt(UInt<5>("h10")), _CDom_reduced4SigExtra_T_4) @[primitives.scala 77:58]
    node _CDom_reduced4SigExtra_T_5 = bits(CDom_reduced4SigExtra_shift, 2, 1) @[primitives.scala 79:22]
    node _CDom_reduced4SigExtra_T_6 = bits(_CDom_reduced4SigExtra_T_5, 0, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_7 = bits(_CDom_reduced4SigExtra_T_5, 1, 1) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_8 = cat(_CDom_reduced4SigExtra_T_6, _CDom_reduced4SigExtra_T_7) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_9 = and(_CDom_reduced4SigExtra_T_2, _CDom_reduced4SigExtra_T_8) @[MulAddRecFN.scala 221:72]
    node CDom_reduced4SigExtra = orr(_CDom_reduced4SigExtra_T_9) @[MulAddRecFN.scala 222:73]
    node _CDom_sig_T = shr(CDom_mainSig, 3) @[MulAddRecFN.scala 224:25]
    node _CDom_sig_T_1 = bits(CDom_mainSig, 2, 0) @[MulAddRecFN.scala 225:25]
    node _CDom_sig_T_2 = orr(_CDom_sig_T_1) @[MulAddRecFN.scala 225:32]
    node _CDom_sig_T_3 = or(_CDom_sig_T_2, CDom_reduced4SigExtra) @[MulAddRecFN.scala 225:36]
    node _CDom_sig_T_4 = or(_CDom_sig_T_3, CDom_absSigSumExtra) @[MulAddRecFN.scala 225:61]
    node CDom_sig = cat(_CDom_sig_T, _CDom_sig_T_4) @[Cat.scala 33:92]
    node notCDom_signSigSum = bits(sigSum, 19, 19) @[MulAddRecFN.scala 231:36]
    node _notCDom_absSigSum_T = bits(sigSum, 18, 0) @[MulAddRecFN.scala 234:20]
    node _notCDom_absSigSum_T_1 = not(_notCDom_absSigSum_T) @[MulAddRecFN.scala 234:13]
    node _notCDom_absSigSum_T_2 = bits(sigSum, 18, 0) @[MulAddRecFN.scala 235:19]
    node _notCDom_absSigSum_T_3 = add(_notCDom_absSigSum_T_2, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 235:41]
    node _notCDom_absSigSum_T_4 = tail(_notCDom_absSigSum_T_3, 1) @[MulAddRecFN.scala 235:41]
    node notCDom_absSigSum = mux(notCDom_signSigSum, _notCDom_absSigSum_T_1, _notCDom_absSigSum_T_4) @[MulAddRecFN.scala 233:12]
    wire notCDom_reduced2AbsSigSum_reducedVec : UInt<1>[10] @[primitives.scala 102:30]
    notCDom_reduced2AbsSigSum_reducedVec is invalid @[primitives.scala 102:30]
    node _notCDom_reduced2AbsSigSum_reducedVec_0_T = bits(notCDom_absSigSum, 1, 0) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_0_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_0_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[0] <= _notCDom_reduced2AbsSigSum_reducedVec_0_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_1_T = bits(notCDom_absSigSum, 3, 2) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_1_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_1_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[1] <= _notCDom_reduced2AbsSigSum_reducedVec_1_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_2_T = bits(notCDom_absSigSum, 5, 4) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_2_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_2_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[2] <= _notCDom_reduced2AbsSigSum_reducedVec_2_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_3_T = bits(notCDom_absSigSum, 7, 6) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_3_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_3_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[3] <= _notCDom_reduced2AbsSigSum_reducedVec_3_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_4_T = bits(notCDom_absSigSum, 9, 8) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_4_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_4_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[4] <= _notCDom_reduced2AbsSigSum_reducedVec_4_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_5_T = bits(notCDom_absSigSum, 11, 10) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_5_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_5_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[5] <= _notCDom_reduced2AbsSigSum_reducedVec_5_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_6_T = bits(notCDom_absSigSum, 13, 12) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_6_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_6_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[6] <= _notCDom_reduced2AbsSigSum_reducedVec_6_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_7_T = bits(notCDom_absSigSum, 15, 14) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_7_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_7_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[7] <= _notCDom_reduced2AbsSigSum_reducedVec_7_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_8_T = bits(notCDom_absSigSum, 17, 16) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_8_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_8_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[8] <= _notCDom_reduced2AbsSigSum_reducedVec_8_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_9_T = bits(notCDom_absSigSum, 18, 18) @[primitives.scala 107:15]
    node _notCDom_reduced2AbsSigSum_reducedVec_9_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_9_T) @[primitives.scala 107:57]
    notCDom_reduced2AbsSigSum_reducedVec[9] <= _notCDom_reduced2AbsSigSum_reducedVec_9_T_1 @[primitives.scala 106:38]
    node notCDom_reduced2AbsSigSum_lo_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[1], notCDom_reduced2AbsSigSum_reducedVec[0]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[4], notCDom_reduced2AbsSigSum_reducedVec[3]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_hi = cat(notCDom_reduced2AbsSigSum_lo_hi_hi, notCDom_reduced2AbsSigSum_reducedVec[2]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo = cat(notCDom_reduced2AbsSigSum_lo_hi, notCDom_reduced2AbsSigSum_lo_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[6], notCDom_reduced2AbsSigSum_reducedVec[5]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[9], notCDom_reduced2AbsSigSum_reducedVec[8]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_hi = cat(notCDom_reduced2AbsSigSum_hi_hi_hi, notCDom_reduced2AbsSigSum_reducedVec[7]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi = cat(notCDom_reduced2AbsSigSum_hi_hi, notCDom_reduced2AbsSigSum_hi_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum = cat(notCDom_reduced2AbsSigSum_hi, notCDom_reduced2AbsSigSum_lo) @[primitives.scala 108:20]
    node _notCDom_normDistReduced2_T = bits(notCDom_reduced2AbsSigSum, 0, 0) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_1 = bits(notCDom_reduced2AbsSigSum, 1, 1) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_2 = bits(notCDom_reduced2AbsSigSum, 2, 2) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_3 = bits(notCDom_reduced2AbsSigSum, 3, 3) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_4 = bits(notCDom_reduced2AbsSigSum, 4, 4) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_5 = bits(notCDom_reduced2AbsSigSum, 5, 5) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_6 = bits(notCDom_reduced2AbsSigSum, 6, 6) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_7 = bits(notCDom_reduced2AbsSigSum, 7, 7) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_8 = bits(notCDom_reduced2AbsSigSum, 8, 8) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_9 = bits(notCDom_reduced2AbsSigSum, 9, 9) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_10 = mux(_notCDom_normDistReduced2_T_1, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_11 = mux(_notCDom_normDistReduced2_T_2, UInt<3>("h7"), _notCDom_normDistReduced2_T_10) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_12 = mux(_notCDom_normDistReduced2_T_3, UInt<3>("h6"), _notCDom_normDistReduced2_T_11) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_13 = mux(_notCDom_normDistReduced2_T_4, UInt<3>("h5"), _notCDom_normDistReduced2_T_12) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_14 = mux(_notCDom_normDistReduced2_T_5, UInt<3>("h4"), _notCDom_normDistReduced2_T_13) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_15 = mux(_notCDom_normDistReduced2_T_6, UInt<2>("h3"), _notCDom_normDistReduced2_T_14) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_16 = mux(_notCDom_normDistReduced2_T_7, UInt<2>("h2"), _notCDom_normDistReduced2_T_15) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_17 = mux(_notCDom_normDistReduced2_T_8, UInt<1>("h1"), _notCDom_normDistReduced2_T_16) @[Mux.scala 47:70]
    node notCDom_normDistReduced2 = mux(_notCDom_normDistReduced2_T_9, UInt<1>("h0"), _notCDom_normDistReduced2_T_17) @[Mux.scala 47:70]
    node notCDom_nearNormDist = shl(notCDom_normDistReduced2, 1) @[MulAddRecFN.scala 239:56]
    node _notCDom_sExp_T = cvt(notCDom_nearNormDist) @[MulAddRecFN.scala 240:69]
    node _notCDom_sExp_T_1 = sub(io.fromPreMul.sExpSum, _notCDom_sExp_T) @[MulAddRecFN.scala 240:46]
    node _notCDom_sExp_T_2 = tail(_notCDom_sExp_T_1, 1) @[MulAddRecFN.scala 240:46]
    node notCDom_sExp = asSInt(_notCDom_sExp_T_2) @[MulAddRecFN.scala 240:46]
    node _notCDom_mainSig_T = dshl(notCDom_absSigSum, notCDom_nearNormDist) @[MulAddRecFN.scala 242:27]
    node notCDom_mainSig = bits(_notCDom_mainSig_T, 19, 7) @[MulAddRecFN.scala 242:50]
    node _notCDom_reduced4SigExtra_T = bits(notCDom_reduced2AbsSigSum, 4, 0) @[MulAddRecFN.scala 246:39]
    node _notCDom_reduced4SigExtra_T_1 = shl(_notCDom_reduced4SigExtra_T, 0) @[MulAddRecFN.scala 246:55]
    wire notCDom_reduced4SigExtra_reducedVec : UInt<1>[3] @[primitives.scala 102:30]
    notCDom_reduced4SigExtra_reducedVec is invalid @[primitives.scala 102:30]
    node _notCDom_reduced4SigExtra_reducedVec_0_T = bits(_notCDom_reduced4SigExtra_T_1, 1, 0) @[primitives.scala 104:33]
    node _notCDom_reduced4SigExtra_reducedVec_0_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_0_T) @[primitives.scala 104:54]
    notCDom_reduced4SigExtra_reducedVec[0] <= _notCDom_reduced4SigExtra_reducedVec_0_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced4SigExtra_reducedVec_1_T = bits(_notCDom_reduced4SigExtra_T_1, 3, 2) @[primitives.scala 104:33]
    node _notCDom_reduced4SigExtra_reducedVec_1_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_1_T) @[primitives.scala 104:54]
    notCDom_reduced4SigExtra_reducedVec[1] <= _notCDom_reduced4SigExtra_reducedVec_1_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced4SigExtra_reducedVec_2_T = bits(_notCDom_reduced4SigExtra_T_1, 4, 4) @[primitives.scala 107:15]
    node _notCDom_reduced4SigExtra_reducedVec_2_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_2_T) @[primitives.scala 107:57]
    notCDom_reduced4SigExtra_reducedVec[2] <= _notCDom_reduced4SigExtra_reducedVec_2_T_1 @[primitives.scala 106:38]
    node notCDom_reduced4SigExtra_hi = cat(notCDom_reduced4SigExtra_reducedVec[2], notCDom_reduced4SigExtra_reducedVec[1]) @[primitives.scala 108:20]
    node _notCDom_reduced4SigExtra_T_2 = cat(notCDom_reduced4SigExtra_hi, notCDom_reduced4SigExtra_reducedVec[0]) @[primitives.scala 108:20]
    node _notCDom_reduced4SigExtra_T_3 = shr(notCDom_normDistReduced2, 1) @[MulAddRecFN.scala 247:46]
    node _notCDom_reduced4SigExtra_T_4 = not(_notCDom_reduced4SigExtra_T_3) @[primitives.scala 51:21]
    node notCDom_reduced4SigExtra_shift = dshr(asSInt(UInt<9>("h100")), _notCDom_reduced4SigExtra_T_4) @[primitives.scala 77:58]
    node _notCDom_reduced4SigExtra_T_5 = bits(notCDom_reduced4SigExtra_shift, 2, 1) @[primitives.scala 79:22]
    node _notCDom_reduced4SigExtra_T_6 = bits(_notCDom_reduced4SigExtra_T_5, 0, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_7 = bits(_notCDom_reduced4SigExtra_T_5, 1, 1) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_8 = cat(_notCDom_reduced4SigExtra_T_6, _notCDom_reduced4SigExtra_T_7) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_9 = and(_notCDom_reduced4SigExtra_T_2, _notCDom_reduced4SigExtra_T_8) @[MulAddRecFN.scala 246:78]
    node notCDom_reduced4SigExtra = orr(_notCDom_reduced4SigExtra_T_9) @[MulAddRecFN.scala 248:11]
    node _notCDom_sig_T = shr(notCDom_mainSig, 3) @[MulAddRecFN.scala 250:28]
    node _notCDom_sig_T_1 = bits(notCDom_mainSig, 2, 0) @[MulAddRecFN.scala 251:28]
    node _notCDom_sig_T_2 = orr(_notCDom_sig_T_1) @[MulAddRecFN.scala 251:35]
    node _notCDom_sig_T_3 = or(_notCDom_sig_T_2, notCDom_reduced4SigExtra) @[MulAddRecFN.scala 251:39]
    node notCDom_sig = cat(_notCDom_sig_T, _notCDom_sig_T_3) @[Cat.scala 33:92]
    node _notCDom_completeCancellation_T = bits(notCDom_sig, 10, 9) @[MulAddRecFN.scala 254:21]
    node notCDom_completeCancellation = eq(_notCDom_completeCancellation_T, UInt<1>("h0")) @[MulAddRecFN.scala 254:50]
    node _notCDom_sign_T = xor(io.fromPreMul.signProd, notCDom_signSigSum) @[MulAddRecFN.scala 258:36]
    node notCDom_sign = mux(notCDom_completeCancellation, roundingMode_min, _notCDom_sign_T) @[MulAddRecFN.scala 256:12]
    node notNaN_isInfProd = or(io.fromPreMul.isInfA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 263:49]
    node notNaN_isInfOut = or(notNaN_isInfProd, io.fromPreMul.isInfC) @[MulAddRecFN.scala 264:44]
    node _notNaN_addZeros_T = or(io.fromPreMul.isZeroA, io.fromPreMul.isZeroB) @[MulAddRecFN.scala 266:32]
    node notNaN_addZeros = and(_notNaN_addZeros_T, io.fromPreMul.isZeroC) @[MulAddRecFN.scala 266:58]
    node _io_invalidExc_T = and(io.fromPreMul.isInfA, io.fromPreMul.isZeroB) @[MulAddRecFN.scala 271:31]
    node _io_invalidExc_T_1 = or(io.fromPreMul.isSigNaNAny, _io_invalidExc_T) @[MulAddRecFN.scala 270:35]
    node _io_invalidExc_T_2 = and(io.fromPreMul.isZeroA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 272:32]
    node _io_invalidExc_T_3 = or(_io_invalidExc_T_1, _io_invalidExc_T_2) @[MulAddRecFN.scala 271:57]
    node _io_invalidExc_T_4 = eq(io.fromPreMul.isNaNAOrB, UInt<1>("h0")) @[MulAddRecFN.scala 273:10]
    node _io_invalidExc_T_5 = or(io.fromPreMul.isInfA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 274:36]
    node _io_invalidExc_T_6 = and(_io_invalidExc_T_4, _io_invalidExc_T_5) @[MulAddRecFN.scala 273:36]
    node _io_invalidExc_T_7 = and(_io_invalidExc_T_6, io.fromPreMul.isInfC) @[MulAddRecFN.scala 274:61]
    node _io_invalidExc_T_8 = and(_io_invalidExc_T_7, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 275:35]
    node _io_invalidExc_T_9 = or(_io_invalidExc_T_3, _io_invalidExc_T_8) @[MulAddRecFN.scala 272:57]
    io.invalidExc <= _io_invalidExc_T_9 @[MulAddRecFN.scala 269:19]
    node _io_rawOut_isNaN_T = or(io.fromPreMul.isNaNAOrB, io.fromPreMul.isNaNC) @[MulAddRecFN.scala 277:48]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulAddRecFN.scala 277:21]
    io.rawOut.isInf <= notNaN_isInfOut @[MulAddRecFN.scala 278:21]
    node _io_rawOut_isZero_T = eq(io.fromPreMul.CIsDominant, UInt<1>("h0")) @[MulAddRecFN.scala 282:14]
    node _io_rawOut_isZero_T_1 = and(_io_rawOut_isZero_T, notCDom_completeCancellation) @[MulAddRecFN.scala 282:42]
    node _io_rawOut_isZero_T_2 = or(notNaN_addZeros, _io_rawOut_isZero_T_1) @[MulAddRecFN.scala 281:25]
    io.rawOut.isZero <= _io_rawOut_isZero_T_2 @[MulAddRecFN.scala 280:22]
    node _io_rawOut_sign_T = and(notNaN_isInfProd, io.fromPreMul.signProd) @[MulAddRecFN.scala 284:27]
    node _io_rawOut_sign_T_1 = and(io.fromPreMul.isInfC, CDom_sign) @[MulAddRecFN.scala 285:31]
    node _io_rawOut_sign_T_2 = or(_io_rawOut_sign_T, _io_rawOut_sign_T_1) @[MulAddRecFN.scala 284:54]
    node _io_rawOut_sign_T_3 = eq(roundingMode_min, UInt<1>("h0")) @[MulAddRecFN.scala 286:29]
    node _io_rawOut_sign_T_4 = and(notNaN_addZeros, _io_rawOut_sign_T_3) @[MulAddRecFN.scala 286:26]
    node _io_rawOut_sign_T_5 = and(_io_rawOut_sign_T_4, io.fromPreMul.signProd) @[MulAddRecFN.scala 286:48]
    node _io_rawOut_sign_T_6 = and(_io_rawOut_sign_T_5, CDom_sign) @[MulAddRecFN.scala 287:36]
    node _io_rawOut_sign_T_7 = or(_io_rawOut_sign_T_2, _io_rawOut_sign_T_6) @[MulAddRecFN.scala 285:43]
    node _io_rawOut_sign_T_8 = and(notNaN_addZeros, roundingMode_min) @[MulAddRecFN.scala 288:26]
    node _io_rawOut_sign_T_9 = or(io.fromPreMul.signProd, CDom_sign) @[MulAddRecFN.scala 289:37]
    node _io_rawOut_sign_T_10 = and(_io_rawOut_sign_T_8, _io_rawOut_sign_T_9) @[MulAddRecFN.scala 288:46]
    node _io_rawOut_sign_T_11 = or(_io_rawOut_sign_T_7, _io_rawOut_sign_T_10) @[MulAddRecFN.scala 287:48]
    node _io_rawOut_sign_T_12 = eq(notNaN_isInfOut, UInt<1>("h0")) @[MulAddRecFN.scala 290:10]
    node _io_rawOut_sign_T_13 = eq(notNaN_addZeros, UInt<1>("h0")) @[MulAddRecFN.scala 290:31]
    node _io_rawOut_sign_T_14 = and(_io_rawOut_sign_T_12, _io_rawOut_sign_T_13) @[MulAddRecFN.scala 290:28]
    node _io_rawOut_sign_T_15 = mux(io.fromPreMul.CIsDominant, CDom_sign, notCDom_sign) @[MulAddRecFN.scala 291:17]
    node _io_rawOut_sign_T_16 = and(_io_rawOut_sign_T_14, _io_rawOut_sign_T_15) @[MulAddRecFN.scala 290:49]
    node _io_rawOut_sign_T_17 = or(_io_rawOut_sign_T_11, _io_rawOut_sign_T_16) @[MulAddRecFN.scala 289:50]
    io.rawOut.sign <= _io_rawOut_sign_T_17 @[MulAddRecFN.scala 283:20]
    node _io_rawOut_sExp_T = mux(io.fromPreMul.CIsDominant, CDom_sExp, notCDom_sExp) @[MulAddRecFN.scala 292:26]
    io.rawOut.sExp <= _io_rawOut_sExp_T @[MulAddRecFN.scala 292:20]
    node _io_rawOut_sig_T = mux(io.fromPreMul.CIsDominant, CDom_sig, notCDom_sig) @[MulAddRecFN.scala 293:25]
    io.rawOut.sig <= _io_rawOut_sig_T @[MulAddRecFN.scala 293:19]

  module RoundAnyRawFNToRecFN_1 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<11>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}

    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 112:22]
    node doShiftSigDown1 = bits(adjustedSig, 10, 10) @[RoundAnyRawFNToRecFN.scala 118:61]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<7> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 51:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 57:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 58:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 57:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 58:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 57:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 58:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 77:58]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 58) @[primitives.scala 79:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = bits(_roundMask_T_3, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_5 = bits(_roundMask_T_4, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_6 = bits(_roundMask_T_4, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_7 = cat(_roundMask_T_5, _roundMask_T_6) @[Cat.scala 33:92]
    node _roundMask_T_8 = bits(_roundMask_T_3, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_9 = bits(_roundMask_T_8, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_10 = bits(_roundMask_T_8, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_11 = cat(_roundMask_T_9, _roundMask_T_10) @[Cat.scala 33:92]
    node _roundMask_T_12 = cat(_roundMask_T_7, _roundMask_T_11) @[Cat.scala 33:92]
    node _roundMask_T_13 = bits(_roundMask_T_2, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_14 = bits(_roundMask_T_13, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_15 = bits(_roundMask_T_13, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_16 = cat(_roundMask_T_14, _roundMask_T_15) @[Cat.scala 33:92]
    node _roundMask_T_17 = cat(_roundMask_T_12, _roundMask_T_16) @[Cat.scala 33:92]
    node _roundMask_T_18 = not(_roundMask_T_17) @[primitives.scala 74:36]
    node _roundMask_T_19 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_18) @[primitives.scala 74:21]
    node _roundMask_T_20 = not(_roundMask_T_19) @[primitives.scala 74:17]
    node _roundMask_T_21 = cat(_roundMask_T_20, UInt<3>("h7")) @[Cat.scala 33:92]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 57:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 58:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 77:58]
    node _roundMask_T_22 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 79:22]
    node _roundMask_T_23 = bits(_roundMask_T_22, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_24 = bits(_roundMask_T_23, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_25 = bits(_roundMask_T_23, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_26 = cat(_roundMask_T_24, _roundMask_T_25) @[Cat.scala 33:92]
    node _roundMask_T_27 = bits(_roundMask_T_22, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_28 = cat(_roundMask_T_26, _roundMask_T_27) @[Cat.scala 33:92]
    node _roundMask_T_29 = mux(roundMask_msb_3, _roundMask_T_28, UInt<1>("h0")) @[primitives.scala 61:24]
    node _roundMask_T_30 = mux(roundMask_msb_1, _roundMask_T_21, _roundMask_T_29) @[primitives.scala 66:24]
    node _roundMask_T_31 = mux(roundMask_msb, _roundMask_T_30, UInt<1>("h0")) @[primitives.scala 61:24]
    node _roundMask_T_32 = or(_roundMask_T_31, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 157:23]
    node roundMask = cat(_roundMask_T_32, UInt<2>("h3")) @[Cat.scala 33:92]
    node _shiftedRoundMask_T = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node shiftedRoundMask = cat(UInt<1>("h0"), _shiftedRoundMask_T) @[Cat.scala 33:92]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 161:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 162:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 163:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 169:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<10>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 178:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _sRoundedExp_T = shr(roundedSig, 8) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 183:69]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 185:23]
    node _common_fractOut_T = bits(roundedSig, 7, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _common_fractOut_T_1 = bits(roundedSig, 6, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h7b"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 195:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 203:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 207:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _roundCarry_T = bits(roundedSig, 9, 9) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _roundCarry_T_1 = bits(roundedSig, 8, 8) @[RoundAnyRawFNToRecFN.scala 211:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _expOut_T_4 = not(UInt<9>("h7b")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h7b"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<7>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<7>("h7f"), UInt<7>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 281:11]
    node io_out_hi = cat(signOut, expOut) @[Cat.scala 33:92]
    node _io_out_T = cat(io_out_hi, fractOut) @[Cat.scala 33:92]
    io.out <= _io_out_T @[RoundAnyRawFNToRecFN.scala 284:12]
    node io_exceptionFlags_lo = cat(underflow, inexact) @[Cat.scala 33:92]
    node io_exceptionFlags_hi_hi = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 33:92]
    node io_exceptionFlags_hi = cat(io_exceptionFlags_hi_hi, overflow) @[Cat.scala 33:92]
    node _io_exceptionFlags_T = cat(io_exceptionFlags_hi, io_exceptionFlags_lo) @[Cat.scala 33:92]
    io.exceptionFlags <= _io_exceptionFlags_T @[RoundAnyRawFNToRecFN.scala 285:23]

  module RoundRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<11>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}

    io is invalid
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_1 @[RoundAnyRawFNToRecFN.scala 307:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 310:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 311:44]
    roundAnyRawFNToRecFN.io.in <- io.in @[RoundAnyRawFNToRecFN.scala 312:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 314:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 315:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 316:23]

  module MulAddRecFN :
    output io : { flip op : UInt<2>, flip a : UInt<17>, flip b : UInt<17>, flip c : UInt<17>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}

    io is invalid
    inst mulAddRecFNToRaw_preMul of MulAddRecFNToRaw_preMul @[MulAddRecFN.scala 315:15]
    mulAddRecFNToRaw_preMul.io is invalid
    inst mulAddRecFNToRaw_postMul of MulAddRecFNToRaw_postMul @[MulAddRecFN.scala 317:15]
    mulAddRecFNToRaw_postMul.io is invalid
    mulAddRecFNToRaw_preMul.io.op <= io.op @[MulAddRecFN.scala 319:35]
    mulAddRecFNToRaw_preMul.io.a <= io.a @[MulAddRecFN.scala 320:35]
    mulAddRecFNToRaw_preMul.io.b <= io.b @[MulAddRecFN.scala 321:35]
    mulAddRecFNToRaw_preMul.io.c <= io.c @[MulAddRecFN.scala 322:35]
    node _mulAddResult_T = mul(mulAddRecFNToRaw_preMul.io.mulAddA, mulAddRecFNToRaw_preMul.io.mulAddB) @[MulAddRecFN.scala 325:45]
    node mulAddResult = add(_mulAddResult_T, mulAddRecFNToRaw_preMul.io.mulAddC) @[MulAddRecFN.scala 326:50]
    mulAddRecFNToRaw_postMul.io.fromPreMul <- mulAddRecFNToRaw_preMul.io.toPostMul @[MulAddRecFN.scala 329:44]
    mulAddRecFNToRaw_postMul.io.mulAddResult <= mulAddResult @[MulAddRecFN.scala 331:46]
    mulAddRecFNToRaw_postMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 332:46]
    inst roundRawFNToRecFN of RoundRawFNToRecFN @[MulAddRecFN.scala 337:15]
    roundRawFNToRecFN.io is invalid
    roundRawFNToRecFN.io.invalidExc <= mulAddRecFNToRaw_postMul.io.invalidExc @[MulAddRecFN.scala 338:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulAddRecFN.scala 339:39]
    roundRawFNToRecFN.io.in <- mulAddRecFNToRaw_postMul.io.rawOut @[MulAddRecFN.scala 340:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 341:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulAddRecFN.scala 342:41]
    io.out <= roundRawFNToRecFN.io.out @[MulAddRecFN.scala 343:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulAddRecFN.scala 344:23]

  module PE :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_data : { valid : UInt<1>, bits : { bits : UInt<16>}}, flip in_stationary : UInt<1>, out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}}

    reg buf : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), buf) @[SIGMA.scala 35:24]
    reg buf_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SIGMA.scala 36:34]
    node _T = and(io.in_stationary, io.in_data.valid) @[SIGMA.scala 38:25]
    when _T : @[SIGMA.scala 38:46]
      buf <= io.in_data.bits @[SIGMA.scala 39:9]
      buf_valid <= UInt<1>("h1") @[SIGMA.scala 40:15]
    wire out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 43:25]
    node mul_valid = and(buf_valid, io.in_data.valid) @[SIGMA.scala 44:37]
    wire _mul_a_WIRE : { bits : UInt<16>} @[Arithmetic.scala 363:46]
    _mul_a_WIRE.bits <= UInt<16>("h0") @[Arithmetic.scala 363:46]
    node mul_a = mux(mul_valid, io.in_data.bits, _mul_a_WIRE) @[SIGMA.scala 45:26]
    wire _mul_b_WIRE : { bits : UInt<16>} @[Arithmetic.scala 363:46]
    _mul_b_WIRE.bits <= UInt<16>("h0") @[Arithmetic.scala 363:46]
    node mul_b = mux(mul_valid, buf, _mul_b_WIRE) @[SIGMA.scala 46:26]
    wire _mul_WIRE : { bits : UInt<24>} @[Arithmetic.scala 363:46]
    _mul_WIRE.bits <= UInt<24>("h0") @[Arithmetic.scala 363:46]
    node mul_m1_rec_rawIn_sign = bits(mul_b.bits, 15, 15) @[rawFloatFromFN.scala 46:22]
    node mul_m1_rec_rawIn_expIn = bits(mul_b.bits, 14, 7) @[rawFloatFromFN.scala 47:23]
    node mul_m1_rec_rawIn_fractIn = bits(mul_b.bits, 6, 0) @[rawFloatFromFN.scala 48:25]
    node mul_m1_rec_rawIn_isZeroExpIn = eq(mul_m1_rec_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node mul_m1_rec_rawIn_isZeroFractIn = eq(mul_m1_rec_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _mul_m1_rec_rawIn_normDist_T = bits(mul_m1_rec_rawIn_fractIn, 0, 0) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_1 = bits(mul_m1_rec_rawIn_fractIn, 1, 1) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_2 = bits(mul_m1_rec_rawIn_fractIn, 2, 2) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_3 = bits(mul_m1_rec_rawIn_fractIn, 3, 3) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_4 = bits(mul_m1_rec_rawIn_fractIn, 4, 4) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_5 = bits(mul_m1_rec_rawIn_fractIn, 5, 5) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_6 = bits(mul_m1_rec_rawIn_fractIn, 6, 6) @[primitives.scala 92:52]
    node _mul_m1_rec_rawIn_normDist_T_7 = mux(_mul_m1_rec_rawIn_normDist_T_1, UInt<3>("h5"), UInt<3>("h6")) @[Mux.scala 47:70]
    node _mul_m1_rec_rawIn_normDist_T_8 = mux(_mul_m1_rec_rawIn_normDist_T_2, UInt<3>("h4"), _mul_m1_rec_rawIn_normDist_T_7) @[Mux.scala 47:70]
    node _mul_m1_rec_rawIn_normDist_T_9 = mux(_mul_m1_rec_rawIn_normDist_T_3, UInt<2>("h3"), _mul_m1_rec_rawIn_normDist_T_8) @[Mux.scala 47:70]
    node _mul_m1_rec_rawIn_normDist_T_10 = mux(_mul_m1_rec_rawIn_normDist_T_4, UInt<2>("h2"), _mul_m1_rec_rawIn_normDist_T_9) @[Mux.scala 47:70]
    node _mul_m1_rec_rawIn_normDist_T_11 = mux(_mul_m1_rec_rawIn_normDist_T_5, UInt<1>("h1"), _mul_m1_rec_rawIn_normDist_T_10) @[Mux.scala 47:70]
    node mul_m1_rec_rawIn_normDist = mux(_mul_m1_rec_rawIn_normDist_T_6, UInt<1>("h0"), _mul_m1_rec_rawIn_normDist_T_11) @[Mux.scala 47:70]
    node _mul_m1_rec_rawIn_subnormFract_T = dshl(mul_m1_rec_rawIn_fractIn, mul_m1_rec_rawIn_normDist) @[rawFloatFromFN.scala 54:36]
    node _mul_m1_rec_rawIn_subnormFract_T_1 = bits(_mul_m1_rec_rawIn_subnormFract_T, 5, 0) @[rawFloatFromFN.scala 54:47]
    node mul_m1_rec_rawIn_subnormFract = shl(_mul_m1_rec_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 54:64]
    node _mul_m1_rec_rawIn_adjustedExp_T = xor(mul_m1_rec_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _mul_m1_rec_rawIn_adjustedExp_T_1 = mux(mul_m1_rec_rawIn_isZeroExpIn, _mul_m1_rec_rawIn_adjustedExp_T, mul_m1_rec_rawIn_expIn) @[rawFloatFromFN.scala 56:16]
    node _mul_m1_rec_rawIn_adjustedExp_T_2 = mux(mul_m1_rec_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _mul_m1_rec_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _mul_m1_rec_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 60:22]
    node _mul_m1_rec_rawIn_adjustedExp_T_4 = add(_mul_m1_rec_rawIn_adjustedExp_T_1, _mul_m1_rec_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 59:15]
    node mul_m1_rec_rawIn_adjustedExp = tail(_mul_m1_rec_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 59:15]
    node mul_m1_rec_rawIn_isZero = and(mul_m1_rec_rawIn_isZeroExpIn, mul_m1_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 62:34]
    node _mul_m1_rec_rawIn_isSpecial_T = bits(mul_m1_rec_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 63:37]
    node mul_m1_rec_rawIn_isSpecial = eq(_mul_m1_rec_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire mul_m1_rec_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromFN.scala 65:23]
    mul_m1_rec_rawIn is invalid @[rawFloatFromFN.scala 65:23]
    node _mul_m1_rec_rawIn_out_isNaN_T = eq(mul_m1_rec_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _mul_m1_rec_rawIn_out_isNaN_T_1 = and(mul_m1_rec_rawIn_isSpecial, _mul_m1_rec_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 66:33]
    mul_m1_rec_rawIn.isNaN <= _mul_m1_rec_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 66:20]
    node _mul_m1_rec_rawIn_out_isInf_T = and(mul_m1_rec_rawIn_isSpecial, mul_m1_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 67:33]
    mul_m1_rec_rawIn.isInf <= _mul_m1_rec_rawIn_out_isInf_T @[rawFloatFromFN.scala 67:20]
    mul_m1_rec_rawIn.isZero <= mul_m1_rec_rawIn_isZero @[rawFloatFromFN.scala 68:20]
    mul_m1_rec_rawIn.sign <= mul_m1_rec_rawIn_sign @[rawFloatFromFN.scala 69:20]
    node _mul_m1_rec_rawIn_out_sExp_T = bits(mul_m1_rec_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _mul_m1_rec_rawIn_out_sExp_T_1 = cvt(_mul_m1_rec_rawIn_out_sExp_T) @[rawFloatFromFN.scala 70:48]
    mul_m1_rec_rawIn.sExp <= _mul_m1_rec_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 70:20]
    node _mul_m1_rec_rawIn_out_sig_T = eq(mul_m1_rec_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _mul_m1_rec_rawIn_out_sig_T_1 = mux(mul_m1_rec_rawIn_isZeroExpIn, mul_m1_rec_rawIn_subnormFract, mul_m1_rec_rawIn_fractIn) @[rawFloatFromFN.scala 72:42]
    node mul_m1_rec_rawIn_out_sig_hi = cat(UInt<1>("h0"), _mul_m1_rec_rawIn_out_sig_T) @[Cat.scala 33:92]
    node _mul_m1_rec_rawIn_out_sig_T_2 = cat(mul_m1_rec_rawIn_out_sig_hi, _mul_m1_rec_rawIn_out_sig_T_1) @[Cat.scala 33:92]
    mul_m1_rec_rawIn.sig <= _mul_m1_rec_rawIn_out_sig_T_2 @[rawFloatFromFN.scala 71:17]
    node _mul_m1_rec_T = bits(mul_m1_rec_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _mul_m1_rec_T_1 = mux(mul_m1_rec_rawIn.isZero, UInt<3>("h0"), _mul_m1_rec_T) @[recFNFromFN.scala 48:16]
    node _mul_m1_rec_T_2 = mux(mul_m1_rec_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _mul_m1_rec_T_3 = or(_mul_m1_rec_T_1, _mul_m1_rec_T_2) @[recFNFromFN.scala 48:79]
    node _mul_m1_rec_T_4 = bits(mul_m1_rec_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _mul_m1_rec_T_5 = bits(mul_m1_rec_rawIn.sig, 6, 0) @[recFNFromFN.scala 51:22]
    node mul_m1_rec_lo = cat(_mul_m1_rec_T_4, _mul_m1_rec_T_5) @[Cat.scala 33:92]
    node mul_m1_rec_hi = cat(mul_m1_rec_rawIn.sign, _mul_m1_rec_T_3) @[Cat.scala 33:92]
    node mul_m1_rec = cat(mul_m1_rec_hi, mul_m1_rec_lo) @[Cat.scala 33:92]
    node mul_m2_rec_rawIn_sign = bits(_mul_WIRE.bits, 23, 23) @[rawFloatFromFN.scala 46:22]
    node mul_m2_rec_rawIn_expIn = bits(_mul_WIRE.bits, 22, 15) @[rawFloatFromFN.scala 47:23]
    node mul_m2_rec_rawIn_fractIn = bits(_mul_WIRE.bits, 14, 0) @[rawFloatFromFN.scala 48:25]
    node mul_m2_rec_rawIn_isZeroExpIn = eq(mul_m2_rec_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node mul_m2_rec_rawIn_isZeroFractIn = eq(mul_m2_rec_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _mul_m2_rec_rawIn_normDist_T = bits(mul_m2_rec_rawIn_fractIn, 0, 0) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_1 = bits(mul_m2_rec_rawIn_fractIn, 1, 1) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_2 = bits(mul_m2_rec_rawIn_fractIn, 2, 2) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_3 = bits(mul_m2_rec_rawIn_fractIn, 3, 3) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_4 = bits(mul_m2_rec_rawIn_fractIn, 4, 4) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_5 = bits(mul_m2_rec_rawIn_fractIn, 5, 5) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_6 = bits(mul_m2_rec_rawIn_fractIn, 6, 6) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_7 = bits(mul_m2_rec_rawIn_fractIn, 7, 7) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_8 = bits(mul_m2_rec_rawIn_fractIn, 8, 8) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_9 = bits(mul_m2_rec_rawIn_fractIn, 9, 9) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_10 = bits(mul_m2_rec_rawIn_fractIn, 10, 10) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_11 = bits(mul_m2_rec_rawIn_fractIn, 11, 11) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_12 = bits(mul_m2_rec_rawIn_fractIn, 12, 12) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_13 = bits(mul_m2_rec_rawIn_fractIn, 13, 13) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_14 = bits(mul_m2_rec_rawIn_fractIn, 14, 14) @[primitives.scala 92:52]
    node _mul_m2_rec_rawIn_normDist_T_15 = mux(_mul_m2_rec_rawIn_normDist_T_1, UInt<4>("hd"), UInt<4>("he")) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_16 = mux(_mul_m2_rec_rawIn_normDist_T_2, UInt<4>("hc"), _mul_m2_rec_rawIn_normDist_T_15) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_17 = mux(_mul_m2_rec_rawIn_normDist_T_3, UInt<4>("hb"), _mul_m2_rec_rawIn_normDist_T_16) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_18 = mux(_mul_m2_rec_rawIn_normDist_T_4, UInt<4>("ha"), _mul_m2_rec_rawIn_normDist_T_17) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_19 = mux(_mul_m2_rec_rawIn_normDist_T_5, UInt<4>("h9"), _mul_m2_rec_rawIn_normDist_T_18) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_20 = mux(_mul_m2_rec_rawIn_normDist_T_6, UInt<4>("h8"), _mul_m2_rec_rawIn_normDist_T_19) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_21 = mux(_mul_m2_rec_rawIn_normDist_T_7, UInt<3>("h7"), _mul_m2_rec_rawIn_normDist_T_20) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_22 = mux(_mul_m2_rec_rawIn_normDist_T_8, UInt<3>("h6"), _mul_m2_rec_rawIn_normDist_T_21) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_23 = mux(_mul_m2_rec_rawIn_normDist_T_9, UInt<3>("h5"), _mul_m2_rec_rawIn_normDist_T_22) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_24 = mux(_mul_m2_rec_rawIn_normDist_T_10, UInt<3>("h4"), _mul_m2_rec_rawIn_normDist_T_23) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_25 = mux(_mul_m2_rec_rawIn_normDist_T_11, UInt<2>("h3"), _mul_m2_rec_rawIn_normDist_T_24) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_26 = mux(_mul_m2_rec_rawIn_normDist_T_12, UInt<2>("h2"), _mul_m2_rec_rawIn_normDist_T_25) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_normDist_T_27 = mux(_mul_m2_rec_rawIn_normDist_T_13, UInt<1>("h1"), _mul_m2_rec_rawIn_normDist_T_26) @[Mux.scala 47:70]
    node mul_m2_rec_rawIn_normDist = mux(_mul_m2_rec_rawIn_normDist_T_14, UInt<1>("h0"), _mul_m2_rec_rawIn_normDist_T_27) @[Mux.scala 47:70]
    node _mul_m2_rec_rawIn_subnormFract_T = dshl(mul_m2_rec_rawIn_fractIn, mul_m2_rec_rawIn_normDist) @[rawFloatFromFN.scala 54:36]
    node _mul_m2_rec_rawIn_subnormFract_T_1 = bits(_mul_m2_rec_rawIn_subnormFract_T, 13, 0) @[rawFloatFromFN.scala 54:47]
    node mul_m2_rec_rawIn_subnormFract = shl(_mul_m2_rec_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 54:64]
    node _mul_m2_rec_rawIn_adjustedExp_T = xor(mul_m2_rec_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _mul_m2_rec_rawIn_adjustedExp_T_1 = mux(mul_m2_rec_rawIn_isZeroExpIn, _mul_m2_rec_rawIn_adjustedExp_T, mul_m2_rec_rawIn_expIn) @[rawFloatFromFN.scala 56:16]
    node _mul_m2_rec_rawIn_adjustedExp_T_2 = mux(mul_m2_rec_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _mul_m2_rec_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _mul_m2_rec_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 60:22]
    node _mul_m2_rec_rawIn_adjustedExp_T_4 = add(_mul_m2_rec_rawIn_adjustedExp_T_1, _mul_m2_rec_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 59:15]
    node mul_m2_rec_rawIn_adjustedExp = tail(_mul_m2_rec_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 59:15]
    node mul_m2_rec_rawIn_isZero = and(mul_m2_rec_rawIn_isZeroExpIn, mul_m2_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 62:34]
    node _mul_m2_rec_rawIn_isSpecial_T = bits(mul_m2_rec_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 63:37]
    node mul_m2_rec_rawIn_isSpecial = eq(_mul_m2_rec_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire mul_m2_rec_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromFN.scala 65:23]
    mul_m2_rec_rawIn is invalid @[rawFloatFromFN.scala 65:23]
    node _mul_m2_rec_rawIn_out_isNaN_T = eq(mul_m2_rec_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _mul_m2_rec_rawIn_out_isNaN_T_1 = and(mul_m2_rec_rawIn_isSpecial, _mul_m2_rec_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 66:33]
    mul_m2_rec_rawIn.isNaN <= _mul_m2_rec_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 66:20]
    node _mul_m2_rec_rawIn_out_isInf_T = and(mul_m2_rec_rawIn_isSpecial, mul_m2_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 67:33]
    mul_m2_rec_rawIn.isInf <= _mul_m2_rec_rawIn_out_isInf_T @[rawFloatFromFN.scala 67:20]
    mul_m2_rec_rawIn.isZero <= mul_m2_rec_rawIn_isZero @[rawFloatFromFN.scala 68:20]
    mul_m2_rec_rawIn.sign <= mul_m2_rec_rawIn_sign @[rawFloatFromFN.scala 69:20]
    node _mul_m2_rec_rawIn_out_sExp_T = bits(mul_m2_rec_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _mul_m2_rec_rawIn_out_sExp_T_1 = cvt(_mul_m2_rec_rawIn_out_sExp_T) @[rawFloatFromFN.scala 70:48]
    mul_m2_rec_rawIn.sExp <= _mul_m2_rec_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 70:20]
    node _mul_m2_rec_rawIn_out_sig_T = eq(mul_m2_rec_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _mul_m2_rec_rawIn_out_sig_T_1 = mux(mul_m2_rec_rawIn_isZeroExpIn, mul_m2_rec_rawIn_subnormFract, mul_m2_rec_rawIn_fractIn) @[rawFloatFromFN.scala 72:42]
    node mul_m2_rec_rawIn_out_sig_hi = cat(UInt<1>("h0"), _mul_m2_rec_rawIn_out_sig_T) @[Cat.scala 33:92]
    node _mul_m2_rec_rawIn_out_sig_T_2 = cat(mul_m2_rec_rawIn_out_sig_hi, _mul_m2_rec_rawIn_out_sig_T_1) @[Cat.scala 33:92]
    mul_m2_rec_rawIn.sig <= _mul_m2_rec_rawIn_out_sig_T_2 @[rawFloatFromFN.scala 71:17]
    node _mul_m2_rec_T = bits(mul_m2_rec_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _mul_m2_rec_T_1 = mux(mul_m2_rec_rawIn.isZero, UInt<3>("h0"), _mul_m2_rec_T) @[recFNFromFN.scala 48:16]
    node _mul_m2_rec_T_2 = mux(mul_m2_rec_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _mul_m2_rec_T_3 = or(_mul_m2_rec_T_1, _mul_m2_rec_T_2) @[recFNFromFN.scala 48:79]
    node _mul_m2_rec_T_4 = bits(mul_m2_rec_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _mul_m2_rec_T_5 = bits(mul_m2_rec_rawIn.sig, 14, 0) @[recFNFromFN.scala 51:22]
    node mul_m2_rec_lo = cat(_mul_m2_rec_T_4, _mul_m2_rec_T_5) @[Cat.scala 33:92]
    node mul_m2_rec_hi = cat(mul_m2_rec_rawIn.sign, _mul_m2_rec_T_3) @[Cat.scala 33:92]
    node mul_m2_rec = cat(mul_m2_rec_hi, mul_m2_rec_lo) @[Cat.scala 33:92]
    node mul_self_rec_rawIn_sign = bits(mul_a.bits, 15, 15) @[rawFloatFromFN.scala 46:22]
    node mul_self_rec_rawIn_expIn = bits(mul_a.bits, 14, 7) @[rawFloatFromFN.scala 47:23]
    node mul_self_rec_rawIn_fractIn = bits(mul_a.bits, 6, 0) @[rawFloatFromFN.scala 48:25]
    node mul_self_rec_rawIn_isZeroExpIn = eq(mul_self_rec_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node mul_self_rec_rawIn_isZeroFractIn = eq(mul_self_rec_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _mul_self_rec_rawIn_normDist_T = bits(mul_self_rec_rawIn_fractIn, 0, 0) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_1 = bits(mul_self_rec_rawIn_fractIn, 1, 1) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_2 = bits(mul_self_rec_rawIn_fractIn, 2, 2) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_3 = bits(mul_self_rec_rawIn_fractIn, 3, 3) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_4 = bits(mul_self_rec_rawIn_fractIn, 4, 4) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_5 = bits(mul_self_rec_rawIn_fractIn, 5, 5) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_6 = bits(mul_self_rec_rawIn_fractIn, 6, 6) @[primitives.scala 92:52]
    node _mul_self_rec_rawIn_normDist_T_7 = mux(_mul_self_rec_rawIn_normDist_T_1, UInt<3>("h5"), UInt<3>("h6")) @[Mux.scala 47:70]
    node _mul_self_rec_rawIn_normDist_T_8 = mux(_mul_self_rec_rawIn_normDist_T_2, UInt<3>("h4"), _mul_self_rec_rawIn_normDist_T_7) @[Mux.scala 47:70]
    node _mul_self_rec_rawIn_normDist_T_9 = mux(_mul_self_rec_rawIn_normDist_T_3, UInt<2>("h3"), _mul_self_rec_rawIn_normDist_T_8) @[Mux.scala 47:70]
    node _mul_self_rec_rawIn_normDist_T_10 = mux(_mul_self_rec_rawIn_normDist_T_4, UInt<2>("h2"), _mul_self_rec_rawIn_normDist_T_9) @[Mux.scala 47:70]
    node _mul_self_rec_rawIn_normDist_T_11 = mux(_mul_self_rec_rawIn_normDist_T_5, UInt<1>("h1"), _mul_self_rec_rawIn_normDist_T_10) @[Mux.scala 47:70]
    node mul_self_rec_rawIn_normDist = mux(_mul_self_rec_rawIn_normDist_T_6, UInt<1>("h0"), _mul_self_rec_rawIn_normDist_T_11) @[Mux.scala 47:70]
    node _mul_self_rec_rawIn_subnormFract_T = dshl(mul_self_rec_rawIn_fractIn, mul_self_rec_rawIn_normDist) @[rawFloatFromFN.scala 54:36]
    node _mul_self_rec_rawIn_subnormFract_T_1 = bits(_mul_self_rec_rawIn_subnormFract_T, 5, 0) @[rawFloatFromFN.scala 54:47]
    node mul_self_rec_rawIn_subnormFract = shl(_mul_self_rec_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 54:64]
    node _mul_self_rec_rawIn_adjustedExp_T = xor(mul_self_rec_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _mul_self_rec_rawIn_adjustedExp_T_1 = mux(mul_self_rec_rawIn_isZeroExpIn, _mul_self_rec_rawIn_adjustedExp_T, mul_self_rec_rawIn_expIn) @[rawFloatFromFN.scala 56:16]
    node _mul_self_rec_rawIn_adjustedExp_T_2 = mux(mul_self_rec_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _mul_self_rec_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _mul_self_rec_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 60:22]
    node _mul_self_rec_rawIn_adjustedExp_T_4 = add(_mul_self_rec_rawIn_adjustedExp_T_1, _mul_self_rec_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 59:15]
    node mul_self_rec_rawIn_adjustedExp = tail(_mul_self_rec_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 59:15]
    node mul_self_rec_rawIn_isZero = and(mul_self_rec_rawIn_isZeroExpIn, mul_self_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 62:34]
    node _mul_self_rec_rawIn_isSpecial_T = bits(mul_self_rec_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 63:37]
    node mul_self_rec_rawIn_isSpecial = eq(_mul_self_rec_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire mul_self_rec_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromFN.scala 65:23]
    mul_self_rec_rawIn is invalid @[rawFloatFromFN.scala 65:23]
    node _mul_self_rec_rawIn_out_isNaN_T = eq(mul_self_rec_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _mul_self_rec_rawIn_out_isNaN_T_1 = and(mul_self_rec_rawIn_isSpecial, _mul_self_rec_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 66:33]
    mul_self_rec_rawIn.isNaN <= _mul_self_rec_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 66:20]
    node _mul_self_rec_rawIn_out_isInf_T = and(mul_self_rec_rawIn_isSpecial, mul_self_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 67:33]
    mul_self_rec_rawIn.isInf <= _mul_self_rec_rawIn_out_isInf_T @[rawFloatFromFN.scala 67:20]
    mul_self_rec_rawIn.isZero <= mul_self_rec_rawIn_isZero @[rawFloatFromFN.scala 68:20]
    mul_self_rec_rawIn.sign <= mul_self_rec_rawIn_sign @[rawFloatFromFN.scala 69:20]
    node _mul_self_rec_rawIn_out_sExp_T = bits(mul_self_rec_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _mul_self_rec_rawIn_out_sExp_T_1 = cvt(_mul_self_rec_rawIn_out_sExp_T) @[rawFloatFromFN.scala 70:48]
    mul_self_rec_rawIn.sExp <= _mul_self_rec_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 70:20]
    node _mul_self_rec_rawIn_out_sig_T = eq(mul_self_rec_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _mul_self_rec_rawIn_out_sig_T_1 = mux(mul_self_rec_rawIn_isZeroExpIn, mul_self_rec_rawIn_subnormFract, mul_self_rec_rawIn_fractIn) @[rawFloatFromFN.scala 72:42]
    node mul_self_rec_rawIn_out_sig_hi = cat(UInt<1>("h0"), _mul_self_rec_rawIn_out_sig_T) @[Cat.scala 33:92]
    node _mul_self_rec_rawIn_out_sig_T_2 = cat(mul_self_rec_rawIn_out_sig_hi, _mul_self_rec_rawIn_out_sig_T_1) @[Cat.scala 33:92]
    mul_self_rec_rawIn.sig <= _mul_self_rec_rawIn_out_sig_T_2 @[rawFloatFromFN.scala 71:17]
    node _mul_self_rec_T = bits(mul_self_rec_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _mul_self_rec_T_1 = mux(mul_self_rec_rawIn.isZero, UInt<3>("h0"), _mul_self_rec_T) @[recFNFromFN.scala 48:16]
    node _mul_self_rec_T_2 = mux(mul_self_rec_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _mul_self_rec_T_3 = or(_mul_self_rec_T_1, _mul_self_rec_T_2) @[recFNFromFN.scala 48:79]
    node _mul_self_rec_T_4 = bits(mul_self_rec_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _mul_self_rec_T_5 = bits(mul_self_rec_rawIn.sig, 6, 0) @[recFNFromFN.scala 51:22]
    node mul_self_rec_lo = cat(_mul_self_rec_T_4, _mul_self_rec_T_5) @[Cat.scala 33:92]
    node mul_self_rec_hi = cat(mul_self_rec_rawIn.sign, _mul_self_rec_T_3) @[Cat.scala 33:92]
    node mul_self_rec = cat(mul_self_rec_hi, mul_self_rec_lo) @[Cat.scala 33:92]
    inst mul_m1_resizer of RecFNToRecFN @[Arithmetic.scala 164:32]
    mul_m1_resizer.io.in <= mul_m1_rec @[Arithmetic.scala 165:26]
    mul_m1_resizer.io.roundingMode <= UInt<3>("h0") @[Arithmetic.scala 166:36]
    mul_m1_resizer.io.detectTininess <= UInt<1>("h1") @[Arithmetic.scala 167:38]
    inst mul_m2_resizer of RecFNToRecFN_1 @[Arithmetic.scala 171:32]
    mul_m2_resizer.io.in <= mul_m2_rec @[Arithmetic.scala 172:26]
    mul_m2_resizer.io.roundingMode <= UInt<3>("h0") @[Arithmetic.scala 173:36]
    mul_m2_resizer.io.detectTininess <= UInt<1>("h1") @[Arithmetic.scala 174:38]
    inst mul_muladder of MulAddRecFN @[Arithmetic.scala 178:30]
    mul_muladder.io.op <= UInt<1>("h0") @[Arithmetic.scala 180:24]
    mul_muladder.io.roundingMode <= UInt<3>("h0") @[Arithmetic.scala 181:34]
    mul_muladder.io.detectTininess <= UInt<1>("h1") @[Arithmetic.scala 182:36]
    mul_muladder.io.a <= mul_m1_resizer.io.out @[Arithmetic.scala 184:23]
    mul_muladder.io.b <= mul_m2_resizer.io.out @[Arithmetic.scala 185:23]
    mul_muladder.io.c <= mul_self_rec @[Arithmetic.scala 186:23]
    wire mul : { bits : UInt<16>} @[Arithmetic.scala 189:23]
    node mul_out_bits_rawIn_exp = bits(mul_muladder.io.out, 15, 7) @[rawFloatFromRecFN.scala 50:21]
    node _mul_out_bits_rawIn_isZero_T = bits(mul_out_bits_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node mul_out_bits_rawIn_isZero = eq(_mul_out_bits_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _mul_out_bits_rawIn_isSpecial_T = bits(mul_out_bits_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node mul_out_bits_rawIn_isSpecial = eq(_mul_out_bits_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire mul_out_bits_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<9>} @[rawFloatFromRecFN.scala 54:23]
    mul_out_bits_rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _mul_out_bits_rawIn_out_isNaN_T = bits(mul_out_bits_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _mul_out_bits_rawIn_out_isNaN_T_1 = and(mul_out_bits_rawIn_isSpecial, _mul_out_bits_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    mul_out_bits_rawIn.isNaN <= _mul_out_bits_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _mul_out_bits_rawIn_out_isInf_T = bits(mul_out_bits_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _mul_out_bits_rawIn_out_isInf_T_1 = eq(_mul_out_bits_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _mul_out_bits_rawIn_out_isInf_T_2 = and(mul_out_bits_rawIn_isSpecial, _mul_out_bits_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    mul_out_bits_rawIn.isInf <= _mul_out_bits_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    mul_out_bits_rawIn.isZero <= mul_out_bits_rawIn_isZero @[rawFloatFromRecFN.scala 57:20]
    node _mul_out_bits_rawIn_out_sign_T = bits(mul_muladder.io.out, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    mul_out_bits_rawIn.sign <= _mul_out_bits_rawIn_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _mul_out_bits_rawIn_out_sExp_T = cvt(mul_out_bits_rawIn_exp) @[rawFloatFromRecFN.scala 59:27]
    mul_out_bits_rawIn.sExp <= _mul_out_bits_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _mul_out_bits_rawIn_out_sig_T = eq(mul_out_bits_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _mul_out_bits_rawIn_out_sig_T_1 = bits(mul_muladder.io.out, 6, 0) @[rawFloatFromRecFN.scala 60:51]
    node mul_out_bits_rawIn_out_sig_hi = cat(UInt<1>("h0"), _mul_out_bits_rawIn_out_sig_T) @[Cat.scala 33:92]
    node _mul_out_bits_rawIn_out_sig_T_2 = cat(mul_out_bits_rawIn_out_sig_hi, _mul_out_bits_rawIn_out_sig_T_1) @[Cat.scala 33:92]
    mul_out_bits_rawIn.sig <= _mul_out_bits_rawIn_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node mul_out_bits_isSubnormal = lt(mul_out_bits_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 50:39]
    node _mul_out_bits_denormShiftDist_T = bits(mul_out_bits_rawIn.sExp, 2, 0) @[fNFromRecFN.scala 51:51]
    node _mul_out_bits_denormShiftDist_T_1 = sub(UInt<1>("h1"), _mul_out_bits_denormShiftDist_T) @[fNFromRecFN.scala 51:39]
    node mul_out_bits_denormShiftDist = tail(_mul_out_bits_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 51:39]
    node _mul_out_bits_denormFract_T = shr(mul_out_bits_rawIn.sig, 1) @[fNFromRecFN.scala 52:38]
    node _mul_out_bits_denormFract_T_1 = dshr(_mul_out_bits_denormFract_T, mul_out_bits_denormShiftDist) @[fNFromRecFN.scala 52:42]
    node mul_out_bits_denormFract = bits(_mul_out_bits_denormFract_T_1, 6, 0) @[fNFromRecFN.scala 52:60]
    node _mul_out_bits_expOut_T = bits(mul_out_bits_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 57:27]
    node _mul_out_bits_expOut_T_1 = sub(_mul_out_bits_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 57:45]
    node _mul_out_bits_expOut_T_2 = tail(_mul_out_bits_expOut_T_1, 1) @[fNFromRecFN.scala 57:45]
    node _mul_out_bits_expOut_T_3 = mux(mul_out_bits_isSubnormal, UInt<1>("h0"), _mul_out_bits_expOut_T_2) @[fNFromRecFN.scala 55:16]
    node _mul_out_bits_expOut_T_4 = or(mul_out_bits_rawIn.isNaN, mul_out_bits_rawIn.isInf) @[fNFromRecFN.scala 59:44]
    node _mul_out_bits_expOut_T_5 = bits(_mul_out_bits_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
    node _mul_out_bits_expOut_T_6 = mux(_mul_out_bits_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node mul_out_bits_expOut = or(_mul_out_bits_expOut_T_3, _mul_out_bits_expOut_T_6) @[fNFromRecFN.scala 59:15]
    node _mul_out_bits_fractOut_T = bits(mul_out_bits_rawIn.sig, 6, 0) @[fNFromRecFN.scala 63:52]
    node _mul_out_bits_fractOut_T_1 = mux(mul_out_bits_rawIn.isInf, UInt<1>("h0"), _mul_out_bits_fractOut_T) @[fNFromRecFN.scala 63:20]
    node mul_out_bits_fractOut = mux(mul_out_bits_isSubnormal, mul_out_bits_denormFract, _mul_out_bits_fractOut_T_1) @[fNFromRecFN.scala 61:16]
    node mul_out_bits_hi = cat(mul_out_bits_rawIn.sign, mul_out_bits_expOut) @[Cat.scala 33:92]
    node _mul_out_bits_T = cat(mul_out_bits_hi, mul_out_bits_fractOut) @[Cat.scala 33:92]
    mul.bits <= _mul_out_bits_T @[Arithmetic.scala 190:18]
    out.valid <= mul_valid @[SIGMA.scala 48:13]
    out.bits <= mul @[SIGMA.scala 49:13]
    io.out_data <= out @[SIGMA.scala 50:15]

  module RoundAnyRawFNToRecFN_32 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<4>, sig : UInt<2>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<25>, exceptionFlags : UInt<5>}

    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node _sAdjustedExp_T = add(io.in.sExp, asSInt(UInt<9>("hfc"))) @[RoundAnyRawFNToRecFN.scala 102:25]
    node _sAdjustedExp_T_1 = bits(_sAdjustedExp_T, 8, 0) @[RoundAnyRawFNToRecFN.scala 104:14]
    node sAdjustedExp = cvt(_sAdjustedExp_T_1) @[RoundAnyRawFNToRecFN.scala 104:31]
    node adjustedSig = shl(io.in.sig, 17) @[RoundAnyRawFNToRecFN.scala 112:22]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<15> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _common_expOut_T = bits(sAdjustedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 134:38]
    node _common_expOut_T_1 = add(_common_expOut_T, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 134:55]
    node _common_expOut_T_2 = tail(_common_expOut_T_1, 1) @[RoundAnyRawFNToRecFN.scala 134:55]
    common_expOut <= _common_expOut_T_2 @[RoundAnyRawFNToRecFN.scala 134:23]
    node _common_fractOut_T = bits(adjustedSig, 17, 3) @[RoundAnyRawFNToRecFN.scala 137:28]
    node _common_fractOut_T_1 = bits(adjustedSig, 16, 2) @[RoundAnyRawFNToRecFN.scala 138:28]
    node _common_fractOut_T_2 = mux(UInt<1>("h0"), _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 136:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 135:25]
    common_overflow <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 140:31]
    common_totalUnderflow <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 141:31]
    common_underflow <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 142:31]
    common_inexact <= UInt<1>("h0") @[RoundAnyRawFNToRecFN.scala 143:31]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _expOut_T_4 = not(UInt<9>("h73")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h73"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<15>("h4000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 281:11]
    node io_out_hi = cat(signOut, expOut) @[Cat.scala 33:92]
    node _io_out_T = cat(io_out_hi, fractOut) @[Cat.scala 33:92]
    io.out <= _io_out_T @[RoundAnyRawFNToRecFN.scala 284:12]
    node io_exceptionFlags_lo = cat(underflow, inexact) @[Cat.scala 33:92]
    node io_exceptionFlags_hi_hi = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 33:92]
    node io_exceptionFlags_hi = cat(io_exceptionFlags_hi_hi, overflow) @[Cat.scala 33:92]
    node _io_exceptionFlags_T = cat(io_exceptionFlags_hi, io_exceptionFlags_lo) @[Cat.scala 33:92]
    io.exceptionFlags <= _io_exceptionFlags_T @[RoundAnyRawFNToRecFN.scala 285:23]

  module INToRecFN :
    output io : { flip signedIn : UInt<1>, flip in : UInt<1>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<25>, exceptionFlags : UInt<5>}

    io is invalid
    node _intAsRawFloat_sign_T = bits(io.in, 0, 0) @[rawFloatFromIN.scala 50:34]
    node intAsRawFloat_sign = and(io.signedIn, _intAsRawFloat_sign_T) @[rawFloatFromIN.scala 50:29]
    node _intAsRawFloat_absIn_T = sub(UInt<1>("h0"), io.in) @[rawFloatFromIN.scala 51:31]
    node _intAsRawFloat_absIn_T_1 = tail(_intAsRawFloat_absIn_T, 1) @[rawFloatFromIN.scala 51:31]
    node intAsRawFloat_absIn = mux(intAsRawFloat_sign, _intAsRawFloat_absIn_T_1, io.in) @[rawFloatFromIN.scala 51:24]
    node _intAsRawFloat_extAbsIn_T = cat(UInt<2>("h0"), intAsRawFloat_absIn) @[Cat.scala 33:92]
    node intAsRawFloat_extAbsIn = bits(_intAsRawFloat_extAbsIn_T, 1, 0) @[rawFloatFromIN.scala 52:56]
    node _intAsRawFloat_adjustedNormDist_T = bits(intAsRawFloat_extAbsIn, 0, 0) @[primitives.scala 92:52]
    node _intAsRawFloat_adjustedNormDist_T_1 = bits(intAsRawFloat_extAbsIn, 1, 1) @[primitives.scala 92:52]
    node intAsRawFloat_adjustedNormDist = mux(_intAsRawFloat_adjustedNormDist_T_1, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 47:70]
    node _intAsRawFloat_sig_T = dshl(intAsRawFloat_extAbsIn, intAsRawFloat_adjustedNormDist) @[rawFloatFromIN.scala 55:22]
    node intAsRawFloat_sig = bits(_intAsRawFloat_sig_T, 1, 1) @[rawFloatFromIN.scala 55:41]
    wire intAsRawFloat : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<4>, sig : UInt<2>} @[rawFloatFromIN.scala 58:23]
    intAsRawFloat is invalid @[rawFloatFromIN.scala 58:23]
    intAsRawFloat.isNaN <= UInt<1>("h0") @[rawFloatFromIN.scala 59:20]
    intAsRawFloat.isInf <= UInt<1>("h0") @[rawFloatFromIN.scala 60:20]
    node _intAsRawFloat_out_isZero_T = bits(intAsRawFloat_sig, 0, 0) @[rawFloatFromIN.scala 61:28]
    node _intAsRawFloat_out_isZero_T_1 = eq(_intAsRawFloat_out_isZero_T, UInt<1>("h0")) @[rawFloatFromIN.scala 61:23]
    intAsRawFloat.isZero <= _intAsRawFloat_out_isZero_T_1 @[rawFloatFromIN.scala 61:20]
    intAsRawFloat.sign <= intAsRawFloat_sign @[rawFloatFromIN.scala 62:20]
    node _intAsRawFloat_out_sExp_T = bits(intAsRawFloat_adjustedNormDist, 0, 0) @[rawFloatFromIN.scala 63:56]
    node _intAsRawFloat_out_sExp_T_1 = not(_intAsRawFloat_out_sExp_T) @[rawFloatFromIN.scala 63:39]
    node _intAsRawFloat_out_sExp_T_2 = cat(UInt<2>("h2"), _intAsRawFloat_out_sExp_T_1) @[Cat.scala 33:92]
    node _intAsRawFloat_out_sExp_T_3 = cvt(_intAsRawFloat_out_sExp_T_2) @[rawFloatFromIN.scala 63:75]
    intAsRawFloat.sExp <= _intAsRawFloat_out_sExp_T_3 @[rawFloatFromIN.scala 63:20]
    intAsRawFloat.sig <= intAsRawFloat_sig @[rawFloatFromIN.scala 64:20]
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_32 @[INToRecFN.scala 59:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.io.invalidExc <= UInt<1>("h0") @[INToRecFN.scala 67:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[INToRecFN.scala 68:44]
    roundAnyRawFNToRecFN.io.in <- intAsRawFloat @[INToRecFN.scala 69:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[INToRecFN.scala 70:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[INToRecFN.scala 71:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[INToRecFN.scala 72:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[INToRecFN.scala 73:23]

  module RecFNToRecFN_32 :
    output io : { flip in : UInt<25>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<25>, exceptionFlags : UInt<5>}

    io is invalid
    node rawIn_exp = bits(io.in, 23, 15) @[rawFloatFromRecFN.scala 50:21]
    node _rawIn_isZero_T = bits(rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawIn_isZero = eq(_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawIn_isSpecial_T = bits(rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawIn_isSpecial = eq(_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromRecFN.scala 54:23]
    rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawIn_out_isNaN_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawIn_out_isNaN_T_1 = and(rawIn_isSpecial, _rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawIn.isNaN <= _rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawIn_out_isInf_T = bits(rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawIn_out_isInf_T_1 = eq(_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawIn_out_isInf_T_2 = and(rawIn_isSpecial, _rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isInf <= _rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawIn.isZero <= rawIn_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawIn_out_sign_T = bits(io.in, 24, 24) @[rawFloatFromRecFN.scala 58:25]
    rawIn.sign <= _rawIn_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawIn_out_sExp_T = cvt(rawIn_exp) @[rawFloatFromRecFN.scala 59:27]
    rawIn.sExp <= _rawIn_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawIn_out_sig_T = eq(rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawIn_out_sig_T_1 = bits(io.in, 14, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawIn_out_sig_hi = cat(UInt<1>("h0"), _rawIn_out_sig_T) @[Cat.scala 33:92]
    node _rawIn_out_sig_T_2 = cat(rawIn_out_sig_hi, _rawIn_out_sig_T_1) @[Cat.scala 33:92]
    rawIn.sig <= _rawIn_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node _io_out_T = shl(io.in, 0) @[RecFNToRecFN.scala 64:35]
    io.out <= _io_out_T @[RecFNToRecFN.scala 64:27]
    node _io_exceptionFlags_T = bits(rawIn.sig, 14, 14) @[common.scala 82:56]
    node _io_exceptionFlags_T_1 = eq(_io_exceptionFlags_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_exceptionFlags_T_2 = and(rawIn.isNaN, _io_exceptionFlags_T_1) @[common.scala 82:46]
    node _io_exceptionFlags_T_3 = cat(_io_exceptionFlags_T_2, UInt<4>("h0")) @[Cat.scala 33:92]
    io.exceptionFlags <= _io_exceptionFlags_T_3 @[RecFNToRecFN.scala 65:27]

  module MulAddRecFNToRaw_preMul_16 :
    output io : { flip op : UInt<2>, flip a : UInt<25>, flip b : UInt<25>, flip c : UInt<25>, mulAddA : UInt<16>, mulAddB : UInt<16>, mulAddC : UInt<32>, toPostMul : { isSigNaNAny : UInt<1>, isNaNAOrB : UInt<1>, isInfA : UInt<1>, isZeroA : UInt<1>, isInfB : UInt<1>, isZeroB : UInt<1>, signProd : UInt<1>, isNaNC : UInt<1>, isInfC : UInt<1>, isZeroC : UInt<1>, sExpSum : SInt<10>, doSubMags : UInt<1>, CIsDominant : UInt<1>, CDom_CAlignDist : UInt<5>, highAlignedSigC : UInt<18>, bit0AlignedSigC : UInt<1>}}

    io is invalid
    node rawA_exp = bits(io.a, 23, 15) @[rawFloatFromRecFN.scala 50:21]
    node _rawA_isZero_T = bits(rawA_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawA_isZero = eq(_rawA_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawA_isSpecial_T = bits(rawA_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawA_isSpecial = eq(_rawA_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawA : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromRecFN.scala 54:23]
    rawA is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawA_out_isNaN_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawA_out_isNaN_T_1 = and(rawA_isSpecial, _rawA_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawA.isNaN <= _rawA_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawA_out_isInf_T = bits(rawA_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawA_out_isInf_T_1 = eq(_rawA_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawA_out_isInf_T_2 = and(rawA_isSpecial, _rawA_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawA.isInf <= _rawA_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawA.isZero <= rawA_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawA_out_sign_T = bits(io.a, 24, 24) @[rawFloatFromRecFN.scala 58:25]
    rawA.sign <= _rawA_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawA_out_sExp_T = cvt(rawA_exp) @[rawFloatFromRecFN.scala 59:27]
    rawA.sExp <= _rawA_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawA_out_sig_T = eq(rawA_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawA_out_sig_T_1 = bits(io.a, 14, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawA_out_sig_hi = cat(UInt<1>("h0"), _rawA_out_sig_T) @[Cat.scala 33:92]
    node _rawA_out_sig_T_2 = cat(rawA_out_sig_hi, _rawA_out_sig_T_1) @[Cat.scala 33:92]
    rawA.sig <= _rawA_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node rawB_exp = bits(io.b, 23, 15) @[rawFloatFromRecFN.scala 50:21]
    node _rawB_isZero_T = bits(rawB_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawB_isZero = eq(_rawB_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawB_isSpecial_T = bits(rawB_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawB_isSpecial = eq(_rawB_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawB : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromRecFN.scala 54:23]
    rawB is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawB_out_isNaN_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawB_out_isNaN_T_1 = and(rawB_isSpecial, _rawB_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawB.isNaN <= _rawB_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawB_out_isInf_T = bits(rawB_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawB_out_isInf_T_1 = eq(_rawB_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawB_out_isInf_T_2 = and(rawB_isSpecial, _rawB_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawB.isInf <= _rawB_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawB.isZero <= rawB_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawB_out_sign_T = bits(io.b, 24, 24) @[rawFloatFromRecFN.scala 58:25]
    rawB.sign <= _rawB_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawB_out_sExp_T = cvt(rawB_exp) @[rawFloatFromRecFN.scala 59:27]
    rawB.sExp <= _rawB_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawB_out_sig_T = eq(rawB_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawB_out_sig_T_1 = bits(io.b, 14, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawB_out_sig_hi = cat(UInt<1>("h0"), _rawB_out_sig_T) @[Cat.scala 33:92]
    node _rawB_out_sig_T_2 = cat(rawB_out_sig_hi, _rawB_out_sig_T_1) @[Cat.scala 33:92]
    rawB.sig <= _rawB_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node rawC_exp = bits(io.c, 23, 15) @[rawFloatFromRecFN.scala 50:21]
    node _rawC_isZero_T = bits(rawC_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node rawC_isZero = eq(_rawC_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _rawC_isSpecial_T = bits(rawC_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node rawC_isSpecial = eq(_rawC_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawC : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromRecFN.scala 54:23]
    rawC is invalid @[rawFloatFromRecFN.scala 54:23]
    node _rawC_out_isNaN_T = bits(rawC_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _rawC_out_isNaN_T_1 = and(rawC_isSpecial, _rawC_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
    rawC.isNaN <= _rawC_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
    node _rawC_out_isInf_T = bits(rawC_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _rawC_out_isInf_T_1 = eq(_rawC_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _rawC_out_isInf_T_2 = and(rawC_isSpecial, _rawC_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
    rawC.isInf <= _rawC_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
    rawC.isZero <= rawC_isZero @[rawFloatFromRecFN.scala 57:20]
    node _rawC_out_sign_T = bits(io.c, 24, 24) @[rawFloatFromRecFN.scala 58:25]
    rawC.sign <= _rawC_out_sign_T @[rawFloatFromRecFN.scala 58:20]
    node _rawC_out_sExp_T = cvt(rawC_exp) @[rawFloatFromRecFN.scala 59:27]
    rawC.sExp <= _rawC_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
    node _rawC_out_sig_T = eq(rawC_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _rawC_out_sig_T_1 = bits(io.c, 14, 0) @[rawFloatFromRecFN.scala 60:51]
    node rawC_out_sig_hi = cat(UInt<1>("h0"), _rawC_out_sig_T) @[Cat.scala 33:92]
    node _rawC_out_sig_T_2 = cat(rawC_out_sig_hi, _rawC_out_sig_T_1) @[Cat.scala 33:92]
    rawC.sig <= _rawC_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
    node _signProd_T = xor(rawA.sign, rawB.sign) @[MulAddRecFN.scala 95:30]
    node _signProd_T_1 = bits(io.op, 1, 1) @[MulAddRecFN.scala 95:49]
    node signProd = xor(_signProd_T, _signProd_T_1) @[MulAddRecFN.scala 95:42]
    node _sExpAlignedProd_T = add(rawA.sExp, rawB.sExp) @[MulAddRecFN.scala 98:19]
    node _sExpAlignedProd_T_1 = add(_sExpAlignedProd_T, asSInt(UInt<9>("h113"))) @[MulAddRecFN.scala 98:32]
    node _sExpAlignedProd_T_2 = tail(_sExpAlignedProd_T_1, 1) @[MulAddRecFN.scala 98:32]
    node sExpAlignedProd = asSInt(_sExpAlignedProd_T_2) @[MulAddRecFN.scala 98:32]
    node _doSubMags_T = xor(signProd, rawC.sign) @[MulAddRecFN.scala 100:30]
    node _doSubMags_T_1 = bits(io.op, 0, 0) @[MulAddRecFN.scala 100:49]
    node doSubMags = xor(_doSubMags_T, _doSubMags_T_1) @[MulAddRecFN.scala 100:42]
    node _sNatCAlignDist_T = sub(sExpAlignedProd, rawC.sExp) @[MulAddRecFN.scala 104:42]
    node _sNatCAlignDist_T_1 = tail(_sNatCAlignDist_T, 1) @[MulAddRecFN.scala 104:42]
    node sNatCAlignDist = asSInt(_sNatCAlignDist_T_1) @[MulAddRecFN.scala 104:42]
    node posNatCAlignDist = bits(sNatCAlignDist, 9, 0) @[MulAddRecFN.scala 105:42]
    node _isMinCAlign_T = or(rawA.isZero, rawB.isZero) @[MulAddRecFN.scala 106:35]
    node _isMinCAlign_T_1 = lt(sNatCAlignDist, asSInt(UInt<1>("h0"))) @[MulAddRecFN.scala 106:69]
    node isMinCAlign = or(_isMinCAlign_T, _isMinCAlign_T_1) @[MulAddRecFN.scala 106:50]
    node _CIsDominant_T = eq(rawC.isZero, UInt<1>("h0")) @[MulAddRecFN.scala 108:9]
    node _CIsDominant_T_1 = leq(posNatCAlignDist, UInt<5>("h10")) @[MulAddRecFN.scala 108:60]
    node _CIsDominant_T_2 = or(isMinCAlign, _CIsDominant_T_1) @[MulAddRecFN.scala 108:39]
    node CIsDominant = and(_CIsDominant_T, _CIsDominant_T_2) @[MulAddRecFN.scala 108:23]
    node _CAlignDist_T = lt(posNatCAlignDist, UInt<6>("h32")) @[MulAddRecFN.scala 112:34]
    node _CAlignDist_T_1 = bits(posNatCAlignDist, 5, 0) @[MulAddRecFN.scala 113:33]
    node _CAlignDist_T_2 = mux(_CAlignDist_T, _CAlignDist_T_1, UInt<6>("h32")) @[MulAddRecFN.scala 112:16]
    node CAlignDist = mux(isMinCAlign, UInt<1>("h0"), _CAlignDist_T_2) @[MulAddRecFN.scala 110:12]
    node _mainAlignedSigC_T = not(rawC.sig) @[MulAddRecFN.scala 118:28]
    node _mainAlignedSigC_T_1 = mux(doSubMags, _mainAlignedSigC_T, rawC.sig) @[MulAddRecFN.scala 118:16]
    node _mainAlignedSigC_T_2 = bits(doSubMags, 0, 0) @[Bitwise.scala 77:15]
    node _mainAlignedSigC_T_3 = mux(_mainAlignedSigC_T_2, UInt<37>("h1fffffffff"), UInt<37>("h0")) @[Bitwise.scala 77:12]
    node _mainAlignedSigC_T_4 = cat(_mainAlignedSigC_T_1, _mainAlignedSigC_T_3) @[Cat.scala 33:92]
    node _mainAlignedSigC_T_5 = asSInt(_mainAlignedSigC_T_4) @[MulAddRecFN.scala 120:11]
    node mainAlignedSigC = dshr(_mainAlignedSigC_T_5, CAlignDist) @[MulAddRecFN.scala 120:17]
    node _reduced4CExtra_T = shl(rawC.sig, 2) @[MulAddRecFN.scala 122:30]
    wire reduced4CExtra_reducedVec : UInt<1>[5] @[primitives.scala 119:30]
    reduced4CExtra_reducedVec is invalid @[primitives.scala 119:30]
    node _reduced4CExtra_reducedVec_0_T = bits(_reduced4CExtra_T, 3, 0) @[primitives.scala 121:33]
    node _reduced4CExtra_reducedVec_0_T_1 = orr(_reduced4CExtra_reducedVec_0_T) @[primitives.scala 121:54]
    reduced4CExtra_reducedVec[0] <= _reduced4CExtra_reducedVec_0_T_1 @[primitives.scala 121:28]
    node _reduced4CExtra_reducedVec_1_T = bits(_reduced4CExtra_T, 7, 4) @[primitives.scala 121:33]
    node _reduced4CExtra_reducedVec_1_T_1 = orr(_reduced4CExtra_reducedVec_1_T) @[primitives.scala 121:54]
    reduced4CExtra_reducedVec[1] <= _reduced4CExtra_reducedVec_1_T_1 @[primitives.scala 121:28]
    node _reduced4CExtra_reducedVec_2_T = bits(_reduced4CExtra_T, 11, 8) @[primitives.scala 121:33]
    node _reduced4CExtra_reducedVec_2_T_1 = orr(_reduced4CExtra_reducedVec_2_T) @[primitives.scala 121:54]
    reduced4CExtra_reducedVec[2] <= _reduced4CExtra_reducedVec_2_T_1 @[primitives.scala 121:28]
    node _reduced4CExtra_reducedVec_3_T = bits(_reduced4CExtra_T, 15, 12) @[primitives.scala 121:33]
    node _reduced4CExtra_reducedVec_3_T_1 = orr(_reduced4CExtra_reducedVec_3_T) @[primitives.scala 121:54]
    reduced4CExtra_reducedVec[3] <= _reduced4CExtra_reducedVec_3_T_1 @[primitives.scala 121:28]
    node _reduced4CExtra_reducedVec_4_T = bits(_reduced4CExtra_T, 18, 16) @[primitives.scala 124:15]
    node _reduced4CExtra_reducedVec_4_T_1 = orr(_reduced4CExtra_reducedVec_4_T) @[primitives.scala 124:57]
    reduced4CExtra_reducedVec[4] <= _reduced4CExtra_reducedVec_4_T_1 @[primitives.scala 123:38]
    node reduced4CExtra_lo = cat(reduced4CExtra_reducedVec[1], reduced4CExtra_reducedVec[0]) @[primitives.scala 125:20]
    node reduced4CExtra_hi_hi = cat(reduced4CExtra_reducedVec[4], reduced4CExtra_reducedVec[3]) @[primitives.scala 125:20]
    node reduced4CExtra_hi = cat(reduced4CExtra_hi_hi, reduced4CExtra_reducedVec[2]) @[primitives.scala 125:20]
    node _reduced4CExtra_T_1 = cat(reduced4CExtra_hi, reduced4CExtra_lo) @[primitives.scala 125:20]
    node _reduced4CExtra_T_2 = shr(CAlignDist, 2) @[MulAddRecFN.scala 124:28]
    node reduced4CExtra_shift = dshr(asSInt(UInt<17>("h10000")), _reduced4CExtra_T_2) @[primitives.scala 77:58]
    node _reduced4CExtra_T_3 = bits(reduced4CExtra_shift, 7, 4) @[primitives.scala 79:22]
    node _reduced4CExtra_T_4 = bits(_reduced4CExtra_T_3, 1, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_5 = bits(_reduced4CExtra_T_4, 0, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_6 = bits(_reduced4CExtra_T_4, 1, 1) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_7 = cat(_reduced4CExtra_T_5, _reduced4CExtra_T_6) @[Cat.scala 33:92]
    node _reduced4CExtra_T_8 = bits(_reduced4CExtra_T_3, 3, 2) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_9 = bits(_reduced4CExtra_T_8, 0, 0) @[Bitwise.scala 114:18]
    node _reduced4CExtra_T_10 = bits(_reduced4CExtra_T_8, 1, 1) @[Bitwise.scala 114:47]
    node _reduced4CExtra_T_11 = cat(_reduced4CExtra_T_9, _reduced4CExtra_T_10) @[Cat.scala 33:92]
    node _reduced4CExtra_T_12 = cat(_reduced4CExtra_T_7, _reduced4CExtra_T_11) @[Cat.scala 33:92]
    node _reduced4CExtra_T_13 = and(_reduced4CExtra_T_1, _reduced4CExtra_T_12) @[MulAddRecFN.scala 122:68]
    node reduced4CExtra = orr(_reduced4CExtra_T_13) @[MulAddRecFN.scala 130:11]
    node _alignedSigC_T = shr(mainAlignedSigC, 3) @[MulAddRecFN.scala 132:28]
    node _alignedSigC_T_1 = bits(mainAlignedSigC, 2, 0) @[MulAddRecFN.scala 134:32]
    node _alignedSigC_T_2 = andr(_alignedSigC_T_1) @[MulAddRecFN.scala 134:39]
    node _alignedSigC_T_3 = eq(reduced4CExtra, UInt<1>("h0")) @[MulAddRecFN.scala 134:47]
    node _alignedSigC_T_4 = and(_alignedSigC_T_2, _alignedSigC_T_3) @[MulAddRecFN.scala 134:44]
    node _alignedSigC_T_5 = bits(mainAlignedSigC, 2, 0) @[MulAddRecFN.scala 135:32]
    node _alignedSigC_T_6 = orr(_alignedSigC_T_5) @[MulAddRecFN.scala 135:39]
    node _alignedSigC_T_7 = or(_alignedSigC_T_6, reduced4CExtra) @[MulAddRecFN.scala 135:44]
    node _alignedSigC_T_8 = mux(doSubMags, _alignedSigC_T_4, _alignedSigC_T_7) @[MulAddRecFN.scala 133:16]
    node alignedSigC_hi = asUInt(_alignedSigC_T) @[Cat.scala 33:92]
    node alignedSigC = cat(alignedSigC_hi, _alignedSigC_T_8) @[Cat.scala 33:92]
    io.mulAddA <= rawA.sig @[MulAddRecFN.scala 141:16]
    io.mulAddB <= rawB.sig @[MulAddRecFN.scala 142:16]
    node _io_mulAddC_T = bits(alignedSigC, 32, 1) @[MulAddRecFN.scala 143:30]
    io.mulAddC <= _io_mulAddC_T @[MulAddRecFN.scala 143:16]
    node _io_toPostMul_isSigNaNAny_T = bits(rawA.sig, 14, 14) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_1 = eq(_io_toPostMul_isSigNaNAny_T, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_2 = and(rawA.isNaN, _io_toPostMul_isSigNaNAny_T_1) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_3 = bits(rawB.sig, 14, 14) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_4 = eq(_io_toPostMul_isSigNaNAny_T_3, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_5 = and(rawB.isNaN, _io_toPostMul_isSigNaNAny_T_4) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_6 = or(_io_toPostMul_isSigNaNAny_T_2, _io_toPostMul_isSigNaNAny_T_5) @[MulAddRecFN.scala 146:32]
    node _io_toPostMul_isSigNaNAny_T_7 = bits(rawC.sig, 14, 14) @[common.scala 82:56]
    node _io_toPostMul_isSigNaNAny_T_8 = eq(_io_toPostMul_isSigNaNAny_T_7, UInt<1>("h0")) @[common.scala 82:49]
    node _io_toPostMul_isSigNaNAny_T_9 = and(rawC.isNaN, _io_toPostMul_isSigNaNAny_T_8) @[common.scala 82:46]
    node _io_toPostMul_isSigNaNAny_T_10 = or(_io_toPostMul_isSigNaNAny_T_6, _io_toPostMul_isSigNaNAny_T_9) @[MulAddRecFN.scala 146:58]
    io.toPostMul.isSigNaNAny <= _io_toPostMul_isSigNaNAny_T_10 @[MulAddRecFN.scala 145:30]
    node _io_toPostMul_isNaNAOrB_T = or(rawA.isNaN, rawB.isNaN) @[MulAddRecFN.scala 148:42]
    io.toPostMul.isNaNAOrB <= _io_toPostMul_isNaNAOrB_T @[MulAddRecFN.scala 148:28]
    io.toPostMul.isInfA <= rawA.isInf @[MulAddRecFN.scala 149:28]
    io.toPostMul.isZeroA <= rawA.isZero @[MulAddRecFN.scala 150:28]
    io.toPostMul.isInfB <= rawB.isInf @[MulAddRecFN.scala 151:28]
    io.toPostMul.isZeroB <= rawB.isZero @[MulAddRecFN.scala 152:28]
    io.toPostMul.signProd <= signProd @[MulAddRecFN.scala 153:28]
    io.toPostMul.isNaNC <= rawC.isNaN @[MulAddRecFN.scala 154:28]
    io.toPostMul.isInfC <= rawC.isInf @[MulAddRecFN.scala 155:28]
    io.toPostMul.isZeroC <= rawC.isZero @[MulAddRecFN.scala 156:28]
    node _io_toPostMul_sExpSum_T = sub(sExpAlignedProd, asSInt(UInt<6>("h10"))) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_1 = tail(_io_toPostMul_sExpSum_T, 1) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_2 = asSInt(_io_toPostMul_sExpSum_T_1) @[MulAddRecFN.scala 158:53]
    node _io_toPostMul_sExpSum_T_3 = mux(CIsDominant, rawC.sExp, _io_toPostMul_sExpSum_T_2) @[MulAddRecFN.scala 158:12]
    io.toPostMul.sExpSum <= _io_toPostMul_sExpSum_T_3 @[MulAddRecFN.scala 157:28]
    io.toPostMul.doSubMags <= doSubMags @[MulAddRecFN.scala 159:28]
    io.toPostMul.CIsDominant <= CIsDominant @[MulAddRecFN.scala 160:30]
    node _io_toPostMul_CDom_CAlignDist_T = bits(CAlignDist, 4, 0) @[MulAddRecFN.scala 161:47]
    io.toPostMul.CDom_CAlignDist <= _io_toPostMul_CDom_CAlignDist_T @[MulAddRecFN.scala 161:34]
    node _io_toPostMul_highAlignedSigC_T = bits(alignedSigC, 50, 33) @[MulAddRecFN.scala 163:20]
    io.toPostMul.highAlignedSigC <= _io_toPostMul_highAlignedSigC_T @[MulAddRecFN.scala 162:34]
    node _io_toPostMul_bit0AlignedSigC_T = bits(alignedSigC, 0, 0) @[MulAddRecFN.scala 164:48]
    io.toPostMul.bit0AlignedSigC <= _io_toPostMul_bit0AlignedSigC_T @[MulAddRecFN.scala 164:34]

  module MulAddRecFNToRaw_postMul_16 :
    output io : { flip fromPreMul : { isSigNaNAny : UInt<1>, isNaNAOrB : UInt<1>, isInfA : UInt<1>, isZeroA : UInt<1>, isInfB : UInt<1>, isZeroB : UInt<1>, signProd : UInt<1>, isNaNC : UInt<1>, isInfC : UInt<1>, isZeroC : UInt<1>, sExpSum : SInt<10>, doSubMags : UInt<1>, CIsDominant : UInt<1>, CDom_CAlignDist : UInt<5>, highAlignedSigC : UInt<18>, bit0AlignedSigC : UInt<1>}, flip mulAddResult : UInt<33>, flip roundingMode : UInt<3>, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<19>}}

    io is invalid
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[MulAddRecFN.scala 185:45]
    node CDom_sign = xor(io.fromPreMul.signProd, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 189:42]
    node _sigSum_T = bits(io.mulAddResult, 32, 32) @[MulAddRecFN.scala 191:32]
    node _sigSum_T_1 = add(io.fromPreMul.highAlignedSigC, UInt<1>("h1")) @[MulAddRecFN.scala 192:47]
    node _sigSum_T_2 = tail(_sigSum_T_1, 1) @[MulAddRecFN.scala 192:47]
    node _sigSum_T_3 = mux(_sigSum_T, _sigSum_T_2, io.fromPreMul.highAlignedSigC) @[MulAddRecFN.scala 191:16]
    node _sigSum_T_4 = bits(io.mulAddResult, 31, 0) @[MulAddRecFN.scala 195:28]
    node sigSum_hi = cat(_sigSum_T_3, _sigSum_T_4) @[Cat.scala 33:92]
    node sigSum = cat(sigSum_hi, io.fromPreMul.bit0AlignedSigC) @[Cat.scala 33:92]
    node _CDom_sExp_T = cvt(io.fromPreMul.doSubMags) @[MulAddRecFN.scala 202:69]
    node _CDom_sExp_T_1 = sub(io.fromPreMul.sExpSum, _CDom_sExp_T) @[MulAddRecFN.scala 202:43]
    node _CDom_sExp_T_2 = tail(_CDom_sExp_T_1, 1) @[MulAddRecFN.scala 202:43]
    node CDom_sExp = asSInt(_CDom_sExp_T_2) @[MulAddRecFN.scala 202:43]
    node _CDom_absSigSum_T = bits(sigSum, 50, 17) @[MulAddRecFN.scala 205:20]
    node _CDom_absSigSum_T_1 = not(_CDom_absSigSum_T) @[MulAddRecFN.scala 205:13]
    node _CDom_absSigSum_T_2 = bits(io.fromPreMul.highAlignedSigC, 17, 16) @[MulAddRecFN.scala 208:46]
    node _CDom_absSigSum_T_3 = bits(sigSum, 48, 18) @[MulAddRecFN.scala 209:23]
    node CDom_absSigSum_hi = cat(UInt<1>("h0"), _CDom_absSigSum_T_2) @[Cat.scala 33:92]
    node _CDom_absSigSum_T_4 = cat(CDom_absSigSum_hi, _CDom_absSigSum_T_3) @[Cat.scala 33:92]
    node CDom_absSigSum = mux(io.fromPreMul.doSubMags, _CDom_absSigSum_T_1, _CDom_absSigSum_T_4) @[MulAddRecFN.scala 204:12]
    node _CDom_absSigSumExtra_T = bits(sigSum, 16, 1) @[MulAddRecFN.scala 214:21]
    node _CDom_absSigSumExtra_T_1 = not(_CDom_absSigSumExtra_T) @[MulAddRecFN.scala 214:14]
    node _CDom_absSigSumExtra_T_2 = orr(_CDom_absSigSumExtra_T_1) @[MulAddRecFN.scala 214:36]
    node _CDom_absSigSumExtra_T_3 = bits(sigSum, 17, 1) @[MulAddRecFN.scala 215:19]
    node _CDom_absSigSumExtra_T_4 = orr(_CDom_absSigSumExtra_T_3) @[MulAddRecFN.scala 215:37]
    node CDom_absSigSumExtra = mux(io.fromPreMul.doSubMags, _CDom_absSigSumExtra_T_2, _CDom_absSigSumExtra_T_4) @[MulAddRecFN.scala 213:12]
    node _CDom_mainSig_T = dshl(CDom_absSigSum, io.fromPreMul.CDom_CAlignDist) @[MulAddRecFN.scala 218:24]
    node CDom_mainSig = bits(_CDom_mainSig_T, 33, 13) @[MulAddRecFN.scala 218:56]
    node _CDom_reduced4SigExtra_T = bits(CDom_absSigSum, 15, 0) @[MulAddRecFN.scala 221:36]
    node _CDom_reduced4SigExtra_T_1 = shl(_CDom_reduced4SigExtra_T, 3) @[MulAddRecFN.scala 221:53]
    wire CDom_reduced4SigExtra_reducedVec : UInt<1>[5] @[primitives.scala 119:30]
    CDom_reduced4SigExtra_reducedVec is invalid @[primitives.scala 119:30]
    node _CDom_reduced4SigExtra_reducedVec_0_T = bits(_CDom_reduced4SigExtra_T_1, 3, 0) @[primitives.scala 121:33]
    node _CDom_reduced4SigExtra_reducedVec_0_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_0_T) @[primitives.scala 121:54]
    CDom_reduced4SigExtra_reducedVec[0] <= _CDom_reduced4SigExtra_reducedVec_0_T_1 @[primitives.scala 121:28]
    node _CDom_reduced4SigExtra_reducedVec_1_T = bits(_CDom_reduced4SigExtra_T_1, 7, 4) @[primitives.scala 121:33]
    node _CDom_reduced4SigExtra_reducedVec_1_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_1_T) @[primitives.scala 121:54]
    CDom_reduced4SigExtra_reducedVec[1] <= _CDom_reduced4SigExtra_reducedVec_1_T_1 @[primitives.scala 121:28]
    node _CDom_reduced4SigExtra_reducedVec_2_T = bits(_CDom_reduced4SigExtra_T_1, 11, 8) @[primitives.scala 121:33]
    node _CDom_reduced4SigExtra_reducedVec_2_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_2_T) @[primitives.scala 121:54]
    CDom_reduced4SigExtra_reducedVec[2] <= _CDom_reduced4SigExtra_reducedVec_2_T_1 @[primitives.scala 121:28]
    node _CDom_reduced4SigExtra_reducedVec_3_T = bits(_CDom_reduced4SigExtra_T_1, 15, 12) @[primitives.scala 121:33]
    node _CDom_reduced4SigExtra_reducedVec_3_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_3_T) @[primitives.scala 121:54]
    CDom_reduced4SigExtra_reducedVec[3] <= _CDom_reduced4SigExtra_reducedVec_3_T_1 @[primitives.scala 121:28]
    node _CDom_reduced4SigExtra_reducedVec_4_T = bits(_CDom_reduced4SigExtra_T_1, 18, 16) @[primitives.scala 124:15]
    node _CDom_reduced4SigExtra_reducedVec_4_T_1 = orr(_CDom_reduced4SigExtra_reducedVec_4_T) @[primitives.scala 124:57]
    CDom_reduced4SigExtra_reducedVec[4] <= _CDom_reduced4SigExtra_reducedVec_4_T_1 @[primitives.scala 123:38]
    node CDom_reduced4SigExtra_lo = cat(CDom_reduced4SigExtra_reducedVec[1], CDom_reduced4SigExtra_reducedVec[0]) @[primitives.scala 125:20]
    node CDom_reduced4SigExtra_hi_hi = cat(CDom_reduced4SigExtra_reducedVec[4], CDom_reduced4SigExtra_reducedVec[3]) @[primitives.scala 125:20]
    node CDom_reduced4SigExtra_hi = cat(CDom_reduced4SigExtra_hi_hi, CDom_reduced4SigExtra_reducedVec[2]) @[primitives.scala 125:20]
    node _CDom_reduced4SigExtra_T_2 = cat(CDom_reduced4SigExtra_hi, CDom_reduced4SigExtra_lo) @[primitives.scala 125:20]
    node _CDom_reduced4SigExtra_T_3 = shr(io.fromPreMul.CDom_CAlignDist, 2) @[MulAddRecFN.scala 222:51]
    node _CDom_reduced4SigExtra_T_4 = not(_CDom_reduced4SigExtra_T_3) @[primitives.scala 51:21]
    node CDom_reduced4SigExtra_shift = dshr(asSInt(UInt<9>("h100")), _CDom_reduced4SigExtra_T_4) @[primitives.scala 77:58]
    node _CDom_reduced4SigExtra_T_5 = bits(CDom_reduced4SigExtra_shift, 4, 1) @[primitives.scala 79:22]
    node _CDom_reduced4SigExtra_T_6 = bits(_CDom_reduced4SigExtra_T_5, 1, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_7 = bits(_CDom_reduced4SigExtra_T_6, 0, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_8 = bits(_CDom_reduced4SigExtra_T_6, 1, 1) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_9 = cat(_CDom_reduced4SigExtra_T_7, _CDom_reduced4SigExtra_T_8) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_10 = bits(_CDom_reduced4SigExtra_T_5, 3, 2) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_11 = bits(_CDom_reduced4SigExtra_T_10, 0, 0) @[Bitwise.scala 114:18]
    node _CDom_reduced4SigExtra_T_12 = bits(_CDom_reduced4SigExtra_T_10, 1, 1) @[Bitwise.scala 114:47]
    node _CDom_reduced4SigExtra_T_13 = cat(_CDom_reduced4SigExtra_T_11, _CDom_reduced4SigExtra_T_12) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_14 = cat(_CDom_reduced4SigExtra_T_9, _CDom_reduced4SigExtra_T_13) @[Cat.scala 33:92]
    node _CDom_reduced4SigExtra_T_15 = and(_CDom_reduced4SigExtra_T_2, _CDom_reduced4SigExtra_T_14) @[MulAddRecFN.scala 221:72]
    node CDom_reduced4SigExtra = orr(_CDom_reduced4SigExtra_T_15) @[MulAddRecFN.scala 222:73]
    node _CDom_sig_T = shr(CDom_mainSig, 3) @[MulAddRecFN.scala 224:25]
    node _CDom_sig_T_1 = bits(CDom_mainSig, 2, 0) @[MulAddRecFN.scala 225:25]
    node _CDom_sig_T_2 = orr(_CDom_sig_T_1) @[MulAddRecFN.scala 225:32]
    node _CDom_sig_T_3 = or(_CDom_sig_T_2, CDom_reduced4SigExtra) @[MulAddRecFN.scala 225:36]
    node _CDom_sig_T_4 = or(_CDom_sig_T_3, CDom_absSigSumExtra) @[MulAddRecFN.scala 225:61]
    node CDom_sig = cat(_CDom_sig_T, _CDom_sig_T_4) @[Cat.scala 33:92]
    node notCDom_signSigSum = bits(sigSum, 35, 35) @[MulAddRecFN.scala 231:36]
    node _notCDom_absSigSum_T = bits(sigSum, 34, 0) @[MulAddRecFN.scala 234:20]
    node _notCDom_absSigSum_T_1 = not(_notCDom_absSigSum_T) @[MulAddRecFN.scala 234:13]
    node _notCDom_absSigSum_T_2 = bits(sigSum, 34, 0) @[MulAddRecFN.scala 235:19]
    node _notCDom_absSigSum_T_3 = add(_notCDom_absSigSum_T_2, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 235:41]
    node _notCDom_absSigSum_T_4 = tail(_notCDom_absSigSum_T_3, 1) @[MulAddRecFN.scala 235:41]
    node notCDom_absSigSum = mux(notCDom_signSigSum, _notCDom_absSigSum_T_1, _notCDom_absSigSum_T_4) @[MulAddRecFN.scala 233:12]
    wire notCDom_reduced2AbsSigSum_reducedVec : UInt<1>[18] @[primitives.scala 102:30]
    notCDom_reduced2AbsSigSum_reducedVec is invalid @[primitives.scala 102:30]
    node _notCDom_reduced2AbsSigSum_reducedVec_0_T = bits(notCDom_absSigSum, 1, 0) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_0_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_0_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[0] <= _notCDom_reduced2AbsSigSum_reducedVec_0_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_1_T = bits(notCDom_absSigSum, 3, 2) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_1_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_1_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[1] <= _notCDom_reduced2AbsSigSum_reducedVec_1_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_2_T = bits(notCDom_absSigSum, 5, 4) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_2_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_2_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[2] <= _notCDom_reduced2AbsSigSum_reducedVec_2_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_3_T = bits(notCDom_absSigSum, 7, 6) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_3_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_3_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[3] <= _notCDom_reduced2AbsSigSum_reducedVec_3_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_4_T = bits(notCDom_absSigSum, 9, 8) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_4_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_4_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[4] <= _notCDom_reduced2AbsSigSum_reducedVec_4_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_5_T = bits(notCDom_absSigSum, 11, 10) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_5_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_5_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[5] <= _notCDom_reduced2AbsSigSum_reducedVec_5_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_6_T = bits(notCDom_absSigSum, 13, 12) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_6_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_6_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[6] <= _notCDom_reduced2AbsSigSum_reducedVec_6_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_7_T = bits(notCDom_absSigSum, 15, 14) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_7_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_7_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[7] <= _notCDom_reduced2AbsSigSum_reducedVec_7_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_8_T = bits(notCDom_absSigSum, 17, 16) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_8_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_8_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[8] <= _notCDom_reduced2AbsSigSum_reducedVec_8_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_9_T = bits(notCDom_absSigSum, 19, 18) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_9_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_9_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[9] <= _notCDom_reduced2AbsSigSum_reducedVec_9_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_10_T = bits(notCDom_absSigSum, 21, 20) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_10_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_10_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[10] <= _notCDom_reduced2AbsSigSum_reducedVec_10_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_11_T = bits(notCDom_absSigSum, 23, 22) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_11_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_11_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[11] <= _notCDom_reduced2AbsSigSum_reducedVec_11_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_12_T = bits(notCDom_absSigSum, 25, 24) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_12_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_12_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[12] <= _notCDom_reduced2AbsSigSum_reducedVec_12_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_13_T = bits(notCDom_absSigSum, 27, 26) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_13_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_13_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[13] <= _notCDom_reduced2AbsSigSum_reducedVec_13_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_14_T = bits(notCDom_absSigSum, 29, 28) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_14_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_14_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[14] <= _notCDom_reduced2AbsSigSum_reducedVec_14_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_15_T = bits(notCDom_absSigSum, 31, 30) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_15_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_15_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[15] <= _notCDom_reduced2AbsSigSum_reducedVec_15_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_16_T = bits(notCDom_absSigSum, 33, 32) @[primitives.scala 104:33]
    node _notCDom_reduced2AbsSigSum_reducedVec_16_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_16_T) @[primitives.scala 104:54]
    notCDom_reduced2AbsSigSum_reducedVec[16] <= _notCDom_reduced2AbsSigSum_reducedVec_16_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced2AbsSigSum_reducedVec_17_T = bits(notCDom_absSigSum, 34, 34) @[primitives.scala 107:15]
    node _notCDom_reduced2AbsSigSum_reducedVec_17_T_1 = orr(_notCDom_reduced2AbsSigSum_reducedVec_17_T) @[primitives.scala 107:57]
    notCDom_reduced2AbsSigSum_reducedVec[17] <= _notCDom_reduced2AbsSigSum_reducedVec_17_T_1 @[primitives.scala 106:38]
    node notCDom_reduced2AbsSigSum_lo_lo_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[1], notCDom_reduced2AbsSigSum_reducedVec[0]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_lo_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[3], notCDom_reduced2AbsSigSum_reducedVec[2]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_lo = cat(notCDom_reduced2AbsSigSum_lo_lo_hi, notCDom_reduced2AbsSigSum_lo_lo_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_hi_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[5], notCDom_reduced2AbsSigSum_reducedVec[4]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[8], notCDom_reduced2AbsSigSum_reducedVec[7]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_hi_hi = cat(notCDom_reduced2AbsSigSum_lo_hi_hi_hi, notCDom_reduced2AbsSigSum_reducedVec[6]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo_hi = cat(notCDom_reduced2AbsSigSum_lo_hi_hi, notCDom_reduced2AbsSigSum_lo_hi_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_lo = cat(notCDom_reduced2AbsSigSum_lo_hi, notCDom_reduced2AbsSigSum_lo_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_lo_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[10], notCDom_reduced2AbsSigSum_reducedVec[9]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_lo_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[12], notCDom_reduced2AbsSigSum_reducedVec[11]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_lo = cat(notCDom_reduced2AbsSigSum_hi_lo_hi, notCDom_reduced2AbsSigSum_hi_lo_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_hi_lo = cat(notCDom_reduced2AbsSigSum_reducedVec[14], notCDom_reduced2AbsSigSum_reducedVec[13]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_reducedVec[17], notCDom_reduced2AbsSigSum_reducedVec[16]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_hi_hi = cat(notCDom_reduced2AbsSigSum_hi_hi_hi_hi, notCDom_reduced2AbsSigSum_reducedVec[15]) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi_hi = cat(notCDom_reduced2AbsSigSum_hi_hi_hi, notCDom_reduced2AbsSigSum_hi_hi_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum_hi = cat(notCDom_reduced2AbsSigSum_hi_hi, notCDom_reduced2AbsSigSum_hi_lo) @[primitives.scala 108:20]
    node notCDom_reduced2AbsSigSum = cat(notCDom_reduced2AbsSigSum_hi, notCDom_reduced2AbsSigSum_lo) @[primitives.scala 108:20]
    node _notCDom_normDistReduced2_T = bits(notCDom_reduced2AbsSigSum, 0, 0) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_1 = bits(notCDom_reduced2AbsSigSum, 1, 1) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_2 = bits(notCDom_reduced2AbsSigSum, 2, 2) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_3 = bits(notCDom_reduced2AbsSigSum, 3, 3) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_4 = bits(notCDom_reduced2AbsSigSum, 4, 4) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_5 = bits(notCDom_reduced2AbsSigSum, 5, 5) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_6 = bits(notCDom_reduced2AbsSigSum, 6, 6) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_7 = bits(notCDom_reduced2AbsSigSum, 7, 7) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_8 = bits(notCDom_reduced2AbsSigSum, 8, 8) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_9 = bits(notCDom_reduced2AbsSigSum, 9, 9) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_10 = bits(notCDom_reduced2AbsSigSum, 10, 10) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_11 = bits(notCDom_reduced2AbsSigSum, 11, 11) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_12 = bits(notCDom_reduced2AbsSigSum, 12, 12) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_13 = bits(notCDom_reduced2AbsSigSum, 13, 13) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_14 = bits(notCDom_reduced2AbsSigSum, 14, 14) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_15 = bits(notCDom_reduced2AbsSigSum, 15, 15) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_16 = bits(notCDom_reduced2AbsSigSum, 16, 16) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_17 = bits(notCDom_reduced2AbsSigSum, 17, 17) @[primitives.scala 92:52]
    node _notCDom_normDistReduced2_T_18 = mux(_notCDom_normDistReduced2_T_1, UInt<5>("h10"), UInt<5>("h11")) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_19 = mux(_notCDom_normDistReduced2_T_2, UInt<4>("hf"), _notCDom_normDistReduced2_T_18) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_20 = mux(_notCDom_normDistReduced2_T_3, UInt<4>("he"), _notCDom_normDistReduced2_T_19) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_21 = mux(_notCDom_normDistReduced2_T_4, UInt<4>("hd"), _notCDom_normDistReduced2_T_20) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_22 = mux(_notCDom_normDistReduced2_T_5, UInt<4>("hc"), _notCDom_normDistReduced2_T_21) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_23 = mux(_notCDom_normDistReduced2_T_6, UInt<4>("hb"), _notCDom_normDistReduced2_T_22) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_24 = mux(_notCDom_normDistReduced2_T_7, UInt<4>("ha"), _notCDom_normDistReduced2_T_23) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_25 = mux(_notCDom_normDistReduced2_T_8, UInt<4>("h9"), _notCDom_normDistReduced2_T_24) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_26 = mux(_notCDom_normDistReduced2_T_9, UInt<4>("h8"), _notCDom_normDistReduced2_T_25) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_27 = mux(_notCDom_normDistReduced2_T_10, UInt<3>("h7"), _notCDom_normDistReduced2_T_26) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_28 = mux(_notCDom_normDistReduced2_T_11, UInt<3>("h6"), _notCDom_normDistReduced2_T_27) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_29 = mux(_notCDom_normDistReduced2_T_12, UInt<3>("h5"), _notCDom_normDistReduced2_T_28) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_30 = mux(_notCDom_normDistReduced2_T_13, UInt<3>("h4"), _notCDom_normDistReduced2_T_29) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_31 = mux(_notCDom_normDistReduced2_T_14, UInt<2>("h3"), _notCDom_normDistReduced2_T_30) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_32 = mux(_notCDom_normDistReduced2_T_15, UInt<2>("h2"), _notCDom_normDistReduced2_T_31) @[Mux.scala 47:70]
    node _notCDom_normDistReduced2_T_33 = mux(_notCDom_normDistReduced2_T_16, UInt<1>("h1"), _notCDom_normDistReduced2_T_32) @[Mux.scala 47:70]
    node notCDom_normDistReduced2 = mux(_notCDom_normDistReduced2_T_17, UInt<1>("h0"), _notCDom_normDistReduced2_T_33) @[Mux.scala 47:70]
    node notCDom_nearNormDist = shl(notCDom_normDistReduced2, 1) @[MulAddRecFN.scala 239:56]
    node _notCDom_sExp_T = cvt(notCDom_nearNormDist) @[MulAddRecFN.scala 240:69]
    node _notCDom_sExp_T_1 = sub(io.fromPreMul.sExpSum, _notCDom_sExp_T) @[MulAddRecFN.scala 240:46]
    node _notCDom_sExp_T_2 = tail(_notCDom_sExp_T_1, 1) @[MulAddRecFN.scala 240:46]
    node notCDom_sExp = asSInt(_notCDom_sExp_T_2) @[MulAddRecFN.scala 240:46]
    node _notCDom_mainSig_T = dshl(notCDom_absSigSum, notCDom_nearNormDist) @[MulAddRecFN.scala 242:27]
    node notCDom_mainSig = bits(_notCDom_mainSig_T, 35, 15) @[MulAddRecFN.scala 242:50]
    node _notCDom_reduced4SigExtra_T = bits(notCDom_reduced2AbsSigSum, 8, 0) @[MulAddRecFN.scala 246:39]
    node _notCDom_reduced4SigExtra_T_1 = shl(_notCDom_reduced4SigExtra_T, 0) @[MulAddRecFN.scala 246:55]
    wire notCDom_reduced4SigExtra_reducedVec : UInt<1>[5] @[primitives.scala 102:30]
    notCDom_reduced4SigExtra_reducedVec is invalid @[primitives.scala 102:30]
    node _notCDom_reduced4SigExtra_reducedVec_0_T = bits(_notCDom_reduced4SigExtra_T_1, 1, 0) @[primitives.scala 104:33]
    node _notCDom_reduced4SigExtra_reducedVec_0_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_0_T) @[primitives.scala 104:54]
    notCDom_reduced4SigExtra_reducedVec[0] <= _notCDom_reduced4SigExtra_reducedVec_0_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced4SigExtra_reducedVec_1_T = bits(_notCDom_reduced4SigExtra_T_1, 3, 2) @[primitives.scala 104:33]
    node _notCDom_reduced4SigExtra_reducedVec_1_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_1_T) @[primitives.scala 104:54]
    notCDom_reduced4SigExtra_reducedVec[1] <= _notCDom_reduced4SigExtra_reducedVec_1_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced4SigExtra_reducedVec_2_T = bits(_notCDom_reduced4SigExtra_T_1, 5, 4) @[primitives.scala 104:33]
    node _notCDom_reduced4SigExtra_reducedVec_2_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_2_T) @[primitives.scala 104:54]
    notCDom_reduced4SigExtra_reducedVec[2] <= _notCDom_reduced4SigExtra_reducedVec_2_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced4SigExtra_reducedVec_3_T = bits(_notCDom_reduced4SigExtra_T_1, 7, 6) @[primitives.scala 104:33]
    node _notCDom_reduced4SigExtra_reducedVec_3_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_3_T) @[primitives.scala 104:54]
    notCDom_reduced4SigExtra_reducedVec[3] <= _notCDom_reduced4SigExtra_reducedVec_3_T_1 @[primitives.scala 104:28]
    node _notCDom_reduced4SigExtra_reducedVec_4_T = bits(_notCDom_reduced4SigExtra_T_1, 8, 8) @[primitives.scala 107:15]
    node _notCDom_reduced4SigExtra_reducedVec_4_T_1 = orr(_notCDom_reduced4SigExtra_reducedVec_4_T) @[primitives.scala 107:57]
    notCDom_reduced4SigExtra_reducedVec[4] <= _notCDom_reduced4SigExtra_reducedVec_4_T_1 @[primitives.scala 106:38]
    node notCDom_reduced4SigExtra_lo = cat(notCDom_reduced4SigExtra_reducedVec[1], notCDom_reduced4SigExtra_reducedVec[0]) @[primitives.scala 108:20]
    node notCDom_reduced4SigExtra_hi_hi = cat(notCDom_reduced4SigExtra_reducedVec[4], notCDom_reduced4SigExtra_reducedVec[3]) @[primitives.scala 108:20]
    node notCDom_reduced4SigExtra_hi = cat(notCDom_reduced4SigExtra_hi_hi, notCDom_reduced4SigExtra_reducedVec[2]) @[primitives.scala 108:20]
    node _notCDom_reduced4SigExtra_T_2 = cat(notCDom_reduced4SigExtra_hi, notCDom_reduced4SigExtra_lo) @[primitives.scala 108:20]
    node _notCDom_reduced4SigExtra_T_3 = shr(notCDom_normDistReduced2, 1) @[MulAddRecFN.scala 247:46]
    node _notCDom_reduced4SigExtra_T_4 = not(_notCDom_reduced4SigExtra_T_3) @[primitives.scala 51:21]
    node notCDom_reduced4SigExtra_shift = dshr(asSInt(UInt<17>("h10000")), _notCDom_reduced4SigExtra_T_4) @[primitives.scala 77:58]
    node _notCDom_reduced4SigExtra_T_5 = bits(notCDom_reduced4SigExtra_shift, 4, 1) @[primitives.scala 79:22]
    node _notCDom_reduced4SigExtra_T_6 = bits(_notCDom_reduced4SigExtra_T_5, 1, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_7 = bits(_notCDom_reduced4SigExtra_T_6, 0, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_8 = bits(_notCDom_reduced4SigExtra_T_6, 1, 1) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_9 = cat(_notCDom_reduced4SigExtra_T_7, _notCDom_reduced4SigExtra_T_8) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_10 = bits(_notCDom_reduced4SigExtra_T_5, 3, 2) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_11 = bits(_notCDom_reduced4SigExtra_T_10, 0, 0) @[Bitwise.scala 114:18]
    node _notCDom_reduced4SigExtra_T_12 = bits(_notCDom_reduced4SigExtra_T_10, 1, 1) @[Bitwise.scala 114:47]
    node _notCDom_reduced4SigExtra_T_13 = cat(_notCDom_reduced4SigExtra_T_11, _notCDom_reduced4SigExtra_T_12) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_14 = cat(_notCDom_reduced4SigExtra_T_9, _notCDom_reduced4SigExtra_T_13) @[Cat.scala 33:92]
    node _notCDom_reduced4SigExtra_T_15 = and(_notCDom_reduced4SigExtra_T_2, _notCDom_reduced4SigExtra_T_14) @[MulAddRecFN.scala 246:78]
    node notCDom_reduced4SigExtra = orr(_notCDom_reduced4SigExtra_T_15) @[MulAddRecFN.scala 248:11]
    node _notCDom_sig_T = shr(notCDom_mainSig, 3) @[MulAddRecFN.scala 250:28]
    node _notCDom_sig_T_1 = bits(notCDom_mainSig, 2, 0) @[MulAddRecFN.scala 251:28]
    node _notCDom_sig_T_2 = orr(_notCDom_sig_T_1) @[MulAddRecFN.scala 251:35]
    node _notCDom_sig_T_3 = or(_notCDom_sig_T_2, notCDom_reduced4SigExtra) @[MulAddRecFN.scala 251:39]
    node notCDom_sig = cat(_notCDom_sig_T, _notCDom_sig_T_3) @[Cat.scala 33:92]
    node _notCDom_completeCancellation_T = bits(notCDom_sig, 18, 17) @[MulAddRecFN.scala 254:21]
    node notCDom_completeCancellation = eq(_notCDom_completeCancellation_T, UInt<1>("h0")) @[MulAddRecFN.scala 254:50]
    node _notCDom_sign_T = xor(io.fromPreMul.signProd, notCDom_signSigSum) @[MulAddRecFN.scala 258:36]
    node notCDom_sign = mux(notCDom_completeCancellation, roundingMode_min, _notCDom_sign_T) @[MulAddRecFN.scala 256:12]
    node notNaN_isInfProd = or(io.fromPreMul.isInfA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 263:49]
    node notNaN_isInfOut = or(notNaN_isInfProd, io.fromPreMul.isInfC) @[MulAddRecFN.scala 264:44]
    node _notNaN_addZeros_T = or(io.fromPreMul.isZeroA, io.fromPreMul.isZeroB) @[MulAddRecFN.scala 266:32]
    node notNaN_addZeros = and(_notNaN_addZeros_T, io.fromPreMul.isZeroC) @[MulAddRecFN.scala 266:58]
    node _io_invalidExc_T = and(io.fromPreMul.isInfA, io.fromPreMul.isZeroB) @[MulAddRecFN.scala 271:31]
    node _io_invalidExc_T_1 = or(io.fromPreMul.isSigNaNAny, _io_invalidExc_T) @[MulAddRecFN.scala 270:35]
    node _io_invalidExc_T_2 = and(io.fromPreMul.isZeroA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 272:32]
    node _io_invalidExc_T_3 = or(_io_invalidExc_T_1, _io_invalidExc_T_2) @[MulAddRecFN.scala 271:57]
    node _io_invalidExc_T_4 = eq(io.fromPreMul.isNaNAOrB, UInt<1>("h0")) @[MulAddRecFN.scala 273:10]
    node _io_invalidExc_T_5 = or(io.fromPreMul.isInfA, io.fromPreMul.isInfB) @[MulAddRecFN.scala 274:36]
    node _io_invalidExc_T_6 = and(_io_invalidExc_T_4, _io_invalidExc_T_5) @[MulAddRecFN.scala 273:36]
    node _io_invalidExc_T_7 = and(_io_invalidExc_T_6, io.fromPreMul.isInfC) @[MulAddRecFN.scala 274:61]
    node _io_invalidExc_T_8 = and(_io_invalidExc_T_7, io.fromPreMul.doSubMags) @[MulAddRecFN.scala 275:35]
    node _io_invalidExc_T_9 = or(_io_invalidExc_T_3, _io_invalidExc_T_8) @[MulAddRecFN.scala 272:57]
    io.invalidExc <= _io_invalidExc_T_9 @[MulAddRecFN.scala 269:19]
    node _io_rawOut_isNaN_T = or(io.fromPreMul.isNaNAOrB, io.fromPreMul.isNaNC) @[MulAddRecFN.scala 277:48]
    io.rawOut.isNaN <= _io_rawOut_isNaN_T @[MulAddRecFN.scala 277:21]
    io.rawOut.isInf <= notNaN_isInfOut @[MulAddRecFN.scala 278:21]
    node _io_rawOut_isZero_T = eq(io.fromPreMul.CIsDominant, UInt<1>("h0")) @[MulAddRecFN.scala 282:14]
    node _io_rawOut_isZero_T_1 = and(_io_rawOut_isZero_T, notCDom_completeCancellation) @[MulAddRecFN.scala 282:42]
    node _io_rawOut_isZero_T_2 = or(notNaN_addZeros, _io_rawOut_isZero_T_1) @[MulAddRecFN.scala 281:25]
    io.rawOut.isZero <= _io_rawOut_isZero_T_2 @[MulAddRecFN.scala 280:22]
    node _io_rawOut_sign_T = and(notNaN_isInfProd, io.fromPreMul.signProd) @[MulAddRecFN.scala 284:27]
    node _io_rawOut_sign_T_1 = and(io.fromPreMul.isInfC, CDom_sign) @[MulAddRecFN.scala 285:31]
    node _io_rawOut_sign_T_2 = or(_io_rawOut_sign_T, _io_rawOut_sign_T_1) @[MulAddRecFN.scala 284:54]
    node _io_rawOut_sign_T_3 = eq(roundingMode_min, UInt<1>("h0")) @[MulAddRecFN.scala 286:29]
    node _io_rawOut_sign_T_4 = and(notNaN_addZeros, _io_rawOut_sign_T_3) @[MulAddRecFN.scala 286:26]
    node _io_rawOut_sign_T_5 = and(_io_rawOut_sign_T_4, io.fromPreMul.signProd) @[MulAddRecFN.scala 286:48]
    node _io_rawOut_sign_T_6 = and(_io_rawOut_sign_T_5, CDom_sign) @[MulAddRecFN.scala 287:36]
    node _io_rawOut_sign_T_7 = or(_io_rawOut_sign_T_2, _io_rawOut_sign_T_6) @[MulAddRecFN.scala 285:43]
    node _io_rawOut_sign_T_8 = and(notNaN_addZeros, roundingMode_min) @[MulAddRecFN.scala 288:26]
    node _io_rawOut_sign_T_9 = or(io.fromPreMul.signProd, CDom_sign) @[MulAddRecFN.scala 289:37]
    node _io_rawOut_sign_T_10 = and(_io_rawOut_sign_T_8, _io_rawOut_sign_T_9) @[MulAddRecFN.scala 288:46]
    node _io_rawOut_sign_T_11 = or(_io_rawOut_sign_T_7, _io_rawOut_sign_T_10) @[MulAddRecFN.scala 287:48]
    node _io_rawOut_sign_T_12 = eq(notNaN_isInfOut, UInt<1>("h0")) @[MulAddRecFN.scala 290:10]
    node _io_rawOut_sign_T_13 = eq(notNaN_addZeros, UInt<1>("h0")) @[MulAddRecFN.scala 290:31]
    node _io_rawOut_sign_T_14 = and(_io_rawOut_sign_T_12, _io_rawOut_sign_T_13) @[MulAddRecFN.scala 290:28]
    node _io_rawOut_sign_T_15 = mux(io.fromPreMul.CIsDominant, CDom_sign, notCDom_sign) @[MulAddRecFN.scala 291:17]
    node _io_rawOut_sign_T_16 = and(_io_rawOut_sign_T_14, _io_rawOut_sign_T_15) @[MulAddRecFN.scala 290:49]
    node _io_rawOut_sign_T_17 = or(_io_rawOut_sign_T_11, _io_rawOut_sign_T_16) @[MulAddRecFN.scala 289:50]
    io.rawOut.sign <= _io_rawOut_sign_T_17 @[MulAddRecFN.scala 283:20]
    node _io_rawOut_sExp_T = mux(io.fromPreMul.CIsDominant, CDom_sExp, notCDom_sExp) @[MulAddRecFN.scala 292:26]
    io.rawOut.sExp <= _io_rawOut_sExp_T @[MulAddRecFN.scala 292:20]
    node _io_rawOut_sig_T = mux(io.fromPreMul.CIsDominant, CDom_sig, notCDom_sig) @[MulAddRecFN.scala 293:25]
    io.rawOut.sig <= _io_rawOut_sig_T @[MulAddRecFN.scala 293:19]

  module RoundAnyRawFNToRecFN_33 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<19>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<25>, exceptionFlags : UInt<5>}

    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _roundMagUp_T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _roundMagUp_T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _roundMagUp_T_2 = and(roundingMode_max, _roundMagUp_T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_roundMagUp_T, _roundMagUp_T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 112:22]
    node doShiftSigDown1 = bits(adjustedSig, 18, 18) @[RoundAnyRawFNToRecFN.scala 118:61]
    wire common_expOut : UInt<9> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<15> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _roundMask_T = bits(io.in.sExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _roundMask_T_1 = not(_roundMask_T) @[primitives.scala 51:21]
    node roundMask_msb = bits(_roundMask_T_1, 8, 8) @[primitives.scala 57:25]
    node roundMask_lsbs = bits(_roundMask_T_1, 7, 0) @[primitives.scala 58:26]
    node roundMask_msb_1 = bits(roundMask_lsbs, 7, 7) @[primitives.scala 57:25]
    node roundMask_lsbs_1 = bits(roundMask_lsbs, 6, 0) @[primitives.scala 58:26]
    node roundMask_msb_2 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 57:25]
    node roundMask_lsbs_2 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 58:26]
    node roundMask_shift = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_2) @[primitives.scala 77:58]
    node _roundMask_T_2 = bits(roundMask_shift, 63, 50) @[primitives.scala 79:22]
    node _roundMask_T_3 = bits(_roundMask_T_2, 7, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_4 = shl(UInt<4>("hf"), 4) @[Bitwise.scala 107:52]
    node _roundMask_T_5 = xor(UInt<8>("hff"), _roundMask_T_4) @[Bitwise.scala 107:21]
    node _roundMask_T_6 = shr(_roundMask_T_3, 4) @[Bitwise.scala 108:21]
    node _roundMask_T_7 = and(_roundMask_T_6, _roundMask_T_5) @[Bitwise.scala 108:31]
    node _roundMask_T_8 = bits(_roundMask_T_3, 3, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_9 = shl(_roundMask_T_8, 4) @[Bitwise.scala 108:70]
    node _roundMask_T_10 = not(_roundMask_T_5) @[Bitwise.scala 108:82]
    node _roundMask_T_11 = and(_roundMask_T_9, _roundMask_T_10) @[Bitwise.scala 108:80]
    node _roundMask_T_12 = or(_roundMask_T_7, _roundMask_T_11) @[Bitwise.scala 108:39]
    node _roundMask_T_13 = bits(_roundMask_T_5, 5, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_14 = shl(_roundMask_T_13, 2) @[Bitwise.scala 107:52]
    node _roundMask_T_15 = xor(_roundMask_T_5, _roundMask_T_14) @[Bitwise.scala 107:21]
    node _roundMask_T_16 = shr(_roundMask_T_12, 2) @[Bitwise.scala 108:21]
    node _roundMask_T_17 = and(_roundMask_T_16, _roundMask_T_15) @[Bitwise.scala 108:31]
    node _roundMask_T_18 = bits(_roundMask_T_12, 5, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_19 = shl(_roundMask_T_18, 2) @[Bitwise.scala 108:70]
    node _roundMask_T_20 = not(_roundMask_T_15) @[Bitwise.scala 108:82]
    node _roundMask_T_21 = and(_roundMask_T_19, _roundMask_T_20) @[Bitwise.scala 108:80]
    node _roundMask_T_22 = or(_roundMask_T_17, _roundMask_T_21) @[Bitwise.scala 108:39]
    node _roundMask_T_23 = bits(_roundMask_T_15, 6, 0) @[Bitwise.scala 107:28]
    node _roundMask_T_24 = shl(_roundMask_T_23, 1) @[Bitwise.scala 107:52]
    node _roundMask_T_25 = xor(_roundMask_T_15, _roundMask_T_24) @[Bitwise.scala 107:21]
    node _roundMask_T_26 = shr(_roundMask_T_22, 1) @[Bitwise.scala 108:21]
    node _roundMask_T_27 = and(_roundMask_T_26, _roundMask_T_25) @[Bitwise.scala 108:31]
    node _roundMask_T_28 = bits(_roundMask_T_22, 6, 0) @[Bitwise.scala 108:46]
    node _roundMask_T_29 = shl(_roundMask_T_28, 1) @[Bitwise.scala 108:70]
    node _roundMask_T_30 = not(_roundMask_T_25) @[Bitwise.scala 108:82]
    node _roundMask_T_31 = and(_roundMask_T_29, _roundMask_T_30) @[Bitwise.scala 108:80]
    node _roundMask_T_32 = or(_roundMask_T_27, _roundMask_T_31) @[Bitwise.scala 108:39]
    node _roundMask_T_33 = bits(_roundMask_T_2, 13, 8) @[Bitwise.scala 114:47]
    node _roundMask_T_34 = bits(_roundMask_T_33, 3, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_35 = bits(_roundMask_T_34, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_36 = bits(_roundMask_T_35, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_37 = bits(_roundMask_T_35, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_38 = cat(_roundMask_T_36, _roundMask_T_37) @[Cat.scala 33:92]
    node _roundMask_T_39 = bits(_roundMask_T_34, 3, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_40 = bits(_roundMask_T_39, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_41 = bits(_roundMask_T_39, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_42 = cat(_roundMask_T_40, _roundMask_T_41) @[Cat.scala 33:92]
    node _roundMask_T_43 = cat(_roundMask_T_38, _roundMask_T_42) @[Cat.scala 33:92]
    node _roundMask_T_44 = bits(_roundMask_T_33, 5, 4) @[Bitwise.scala 114:47]
    node _roundMask_T_45 = bits(_roundMask_T_44, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_46 = bits(_roundMask_T_44, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_47 = cat(_roundMask_T_45, _roundMask_T_46) @[Cat.scala 33:92]
    node _roundMask_T_48 = cat(_roundMask_T_43, _roundMask_T_47) @[Cat.scala 33:92]
    node _roundMask_T_49 = cat(_roundMask_T_32, _roundMask_T_48) @[Cat.scala 33:92]
    node _roundMask_T_50 = not(_roundMask_T_49) @[primitives.scala 74:36]
    node _roundMask_T_51 = mux(roundMask_msb_2, UInt<1>("h0"), _roundMask_T_50) @[primitives.scala 74:21]
    node _roundMask_T_52 = not(_roundMask_T_51) @[primitives.scala 74:17]
    node _roundMask_T_53 = cat(_roundMask_T_52, UInt<3>("h7")) @[Cat.scala 33:92]
    node roundMask_msb_3 = bits(roundMask_lsbs_1, 6, 6) @[primitives.scala 57:25]
    node roundMask_lsbs_3 = bits(roundMask_lsbs_1, 5, 0) @[primitives.scala 58:26]
    node roundMask_shift_1 = dshr(asSInt(UInt<65>("h10000000000000000")), roundMask_lsbs_3) @[primitives.scala 77:58]
    node _roundMask_T_54 = bits(roundMask_shift_1, 2, 0) @[primitives.scala 79:22]
    node _roundMask_T_55 = bits(_roundMask_T_54, 1, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_56 = bits(_roundMask_T_55, 0, 0) @[Bitwise.scala 114:18]
    node _roundMask_T_57 = bits(_roundMask_T_55, 1, 1) @[Bitwise.scala 114:47]
    node _roundMask_T_58 = cat(_roundMask_T_56, _roundMask_T_57) @[Cat.scala 33:92]
    node _roundMask_T_59 = bits(_roundMask_T_54, 2, 2) @[Bitwise.scala 114:47]
    node _roundMask_T_60 = cat(_roundMask_T_58, _roundMask_T_59) @[Cat.scala 33:92]
    node _roundMask_T_61 = mux(roundMask_msb_3, _roundMask_T_60, UInt<1>("h0")) @[primitives.scala 61:24]
    node _roundMask_T_62 = mux(roundMask_msb_1, _roundMask_T_53, _roundMask_T_61) @[primitives.scala 66:24]
    node _roundMask_T_63 = mux(roundMask_msb, _roundMask_T_62, UInt<1>("h0")) @[primitives.scala 61:24]
    node _roundMask_T_64 = or(_roundMask_T_63, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 157:23]
    node roundMask = cat(_roundMask_T_64, UInt<2>("h3")) @[Cat.scala 33:92]
    node _shiftedRoundMask_T = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node shiftedRoundMask = cat(UInt<1>("h0"), _shiftedRoundMask_T) @[Cat.scala 33:92]
    node _roundPosMask_T = not(shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 161:28]
    node roundPosMask = and(_roundPosMask_T, roundMask) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _roundPosBit_T = and(adjustedSig, roundPosMask) @[RoundAnyRawFNToRecFN.scala 162:40]
    node roundPosBit = orr(_roundPosBit_T) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _anyRoundExtra_T = and(adjustedSig, shiftedRoundMask) @[RoundAnyRawFNToRecFN.scala 163:42]
    node anyRoundExtra = orr(_anyRoundExtra_T) @[RoundAnyRawFNToRecFN.scala 163:62]
    node anyRound = or(roundPosBit, anyRoundExtra) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _roundIncr_T_1 = and(_roundIncr_T, roundPosBit) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _roundIncr_T_2 = and(roundMagUp, anyRound) @[RoundAnyRawFNToRecFN.scala 169:29]
    node roundIncr = or(_roundIncr_T_1, _roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _roundedSig_T = or(adjustedSig, roundMask) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _roundedSig_T_1 = shr(_roundedSig_T, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _roundedSig_T_2 = add(_roundedSig_T_1, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _roundedSig_T_3 = and(roundingMode_near_even, roundPosBit) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _roundedSig_T_4 = eq(anyRoundExtra, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _roundedSig_T_5 = and(_roundedSig_T_3, _roundedSig_T_4) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _roundedSig_T_6 = shr(roundMask, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _roundedSig_T_7 = mux(_roundedSig_T_5, _roundedSig_T_6, UInt<18>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _roundedSig_T_8 = not(_roundedSig_T_7) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _roundedSig_T_9 = and(_roundedSig_T_2, _roundedSig_T_8) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _roundedSig_T_10 = not(roundMask) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _roundedSig_T_11 = and(adjustedSig, _roundedSig_T_10) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _roundedSig_T_12 = shr(_roundedSig_T_11, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _roundedSig_T_13 = and(roundingMode_odd, anyRound) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _roundedSig_T_14 = shr(roundPosMask, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _roundedSig_T_15 = mux(_roundedSig_T_13, _roundedSig_T_14, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _roundedSig_T_16 = or(_roundedSig_T_12, _roundedSig_T_15) @[RoundAnyRawFNToRecFN.scala 178:47]
    node roundedSig = mux(roundIncr, _roundedSig_T_9, _roundedSig_T_16) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _sRoundedExp_T = shr(roundedSig, 16) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _sRoundedExp_T_1 = cvt(_sRoundedExp_T) @[RoundAnyRawFNToRecFN.scala 183:69]
    node sRoundedExp = add(io.in.sExp, _sRoundedExp_T_1) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _common_expOut_T = bits(sRoundedExp, 8, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _common_expOut_T @[RoundAnyRawFNToRecFN.scala 185:23]
    node _common_fractOut_T = bits(roundedSig, 15, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _common_fractOut_T_1 = bits(roundedSig, 14, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _common_fractOut_T_2 = mux(doShiftSigDown1, _common_fractOut_T, _common_fractOut_T_1) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _common_fractOut_T_2 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _common_overflow_T = shr(sRoundedExp, 7) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _common_overflow_T_1 = geq(_common_overflow_T, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _common_overflow_T_1 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _common_totalUnderflow_T = lt(sRoundedExp, asSInt(UInt<8>("h73"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _common_totalUnderflow_T @[RoundAnyRawFNToRecFN.scala 195:31]
    node _unboundedRange_roundPosBit_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _unboundedRange_roundPosBit_T_1 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node unboundedRange_roundPosBit = mux(doShiftSigDown1, _unboundedRange_roundPosBit_T, _unboundedRange_roundPosBit_T_1) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _unboundedRange_anyRound_T = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _unboundedRange_anyRound_T_1 = and(doShiftSigDown1, _unboundedRange_anyRound_T) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _unboundedRange_anyRound_T_2 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _unboundedRange_anyRound_T_3 = orr(_unboundedRange_anyRound_T_2) @[RoundAnyRawFNToRecFN.scala 203:70]
    node unboundedRange_anyRound = or(_unboundedRange_anyRound_T_1, _unboundedRange_anyRound_T_3) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _unboundedRange_roundIncr_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _unboundedRange_roundIncr_T_1 = and(_unboundedRange_roundIncr_T, unboundedRange_roundPosBit) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _unboundedRange_roundIncr_T_2 = and(roundMagUp, unboundedRange_anyRound) @[RoundAnyRawFNToRecFN.scala 207:29]
    node unboundedRange_roundIncr = or(_unboundedRange_roundIncr_T_1, _unboundedRange_roundIncr_T_2) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _roundCarry_T = bits(roundedSig, 17, 17) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _roundCarry_T_1 = bits(roundedSig, 16, 16) @[RoundAnyRawFNToRecFN.scala 211:27]
    node roundCarry = mux(doShiftSigDown1, _roundCarry_T, _roundCarry_T_1) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _common_underflow_T = shr(io.in.sExp, 8) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _common_underflow_T_1 = leq(_common_underflow_T, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _common_underflow_T_2 = and(anyRound, _common_underflow_T_1) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _common_underflow_T_3 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _common_underflow_T_4 = bits(roundMask, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _common_underflow_T_5 = mux(doShiftSigDown1, _common_underflow_T_3, _common_underflow_T_4) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _common_underflow_T_6 = and(_common_underflow_T_2, _common_underflow_T_5) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _common_underflow_T_7 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _common_underflow_T_8 = bits(roundMask, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _common_underflow_T_9 = bits(roundMask, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _common_underflow_T_10 = mux(doShiftSigDown1, _common_underflow_T_8, _common_underflow_T_9) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _common_underflow_T_11 = eq(_common_underflow_T_10, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _common_underflow_T_12 = and(_common_underflow_T_7, _common_underflow_T_11) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _common_underflow_T_13 = and(_common_underflow_T_12, roundCarry) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _common_underflow_T_14 = and(_common_underflow_T_13, roundPosBit) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _common_underflow_T_15 = and(_common_underflow_T_14, unboundedRange_roundIncr) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _common_underflow_T_16 = eq(_common_underflow_T_15, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _common_underflow_T_17 = and(_common_underflow_T_6, _common_underflow_T_16) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _common_underflow_T_18 = or(common_totalUnderflow, _common_underflow_T_17) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _common_underflow_T_18 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _common_inexact_T = or(common_totalUnderflow, anyRound) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _common_inexact_T @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _commonCase_T = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _commonCase_T_1 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _commonCase_T_2 = and(_commonCase_T, _commonCase_T_1) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _commonCase_T_3 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_commonCase_T_2, _commonCase_T_3) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _inexact_T = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _inexact_T) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _overflow_roundMagUp_T = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_overflow_roundMagUp_T, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _pegMinNonzeroMagOut_T = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _pegMinNonzeroMagOut_T_1 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_pegMinNonzeroMagOut_T, _pegMinNonzeroMagOut_T_1) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _pegMaxFiniteMagOut_T = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _pegMaxFiniteMagOut_T) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _notNaN_isInfOut_T = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _notNaN_isInfOut_T) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _expOut_T = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _expOut_T_1 = mux(_expOut_T, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _expOut_T_2 = not(_expOut_T_1) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _expOut_T_3 = and(common_expOut, _expOut_T_2) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _expOut_T_4 = not(UInt<9>("h73")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _expOut_T_5 = mux(pegMinNonzeroMagOut, _expOut_T_4, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _expOut_T_6 = not(_expOut_T_5) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _expOut_T_7 = and(_expOut_T_3, _expOut_T_6) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _expOut_T_8 = mux(pegMaxFiniteMagOut, UInt<9>("h80"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _expOut_T_9 = not(_expOut_T_8) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _expOut_T_10 = and(_expOut_T_7, _expOut_T_9) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _expOut_T_11 = mux(notNaN_isInfOut, UInt<9>("h40"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _expOut_T_12 = not(_expOut_T_11) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _expOut_T_13 = and(_expOut_T_10, _expOut_T_12) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _expOut_T_14 = mux(pegMinNonzeroMagOut, UInt<9>("h73"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _expOut_T_15 = or(_expOut_T_13, _expOut_T_14) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _expOut_T_16 = mux(pegMaxFiniteMagOut, UInt<9>("h17f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _expOut_T_17 = or(_expOut_T_15, _expOut_T_16) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _expOut_T_18 = mux(notNaN_isInfOut, UInt<9>("h180"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _expOut_T_19 = or(_expOut_T_17, _expOut_T_18) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _expOut_T_20 = mux(isNaNOut, UInt<9>("h1c0"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_expOut_T_19, _expOut_T_20) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _fractOut_T = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _fractOut_T_1 = or(_fractOut_T, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _fractOut_T_2 = mux(isNaNOut, UInt<15>("h4000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _fractOut_T_3 = mux(_fractOut_T_1, _fractOut_T_2, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _fractOut_T_4 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 77:15]
    node _fractOut_T_5 = mux(_fractOut_T_4, UInt<15>("h7fff"), UInt<15>("h0")) @[Bitwise.scala 77:12]
    node fractOut = or(_fractOut_T_3, _fractOut_T_5) @[RoundAnyRawFNToRecFN.scala 281:11]
    node io_out_hi = cat(signOut, expOut) @[Cat.scala 33:92]
    node _io_out_T = cat(io_out_hi, fractOut) @[Cat.scala 33:92]
    io.out <= _io_out_T @[RoundAnyRawFNToRecFN.scala 284:12]
    node io_exceptionFlags_lo = cat(underflow, inexact) @[Cat.scala 33:92]
    node io_exceptionFlags_hi_hi = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 33:92]
    node io_exceptionFlags_hi = cat(io_exceptionFlags_hi_hi, overflow) @[Cat.scala 33:92]
    node _io_exceptionFlags_T = cat(io_exceptionFlags_hi, io_exceptionFlags_lo) @[Cat.scala 33:92]
    io.exceptionFlags <= _io_exceptionFlags_T @[RoundAnyRawFNToRecFN.scala 285:23]

  module RoundRawFNToRecFN_16 :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<19>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<25>, exceptionFlags : UInt<5>}

    io is invalid
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN_33 @[RoundAnyRawFNToRecFN.scala 307:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 310:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 311:44]
    roundAnyRawFNToRecFN.io.in <- io.in @[RoundAnyRawFNToRecFN.scala 312:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 314:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 315:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 316:23]

  module MulAddRecFN_16 :
    output io : { flip op : UInt<2>, flip a : UInt<25>, flip b : UInt<25>, flip c : UInt<25>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<25>, exceptionFlags : UInt<5>}

    io is invalid
    inst mulAddRecFNToRaw_preMul of MulAddRecFNToRaw_preMul_16 @[MulAddRecFN.scala 315:15]
    mulAddRecFNToRaw_preMul.io is invalid
    inst mulAddRecFNToRaw_postMul of MulAddRecFNToRaw_postMul_16 @[MulAddRecFN.scala 317:15]
    mulAddRecFNToRaw_postMul.io is invalid
    mulAddRecFNToRaw_preMul.io.op <= io.op @[MulAddRecFN.scala 319:35]
    mulAddRecFNToRaw_preMul.io.a <= io.a @[MulAddRecFN.scala 320:35]
    mulAddRecFNToRaw_preMul.io.b <= io.b @[MulAddRecFN.scala 321:35]
    mulAddRecFNToRaw_preMul.io.c <= io.c @[MulAddRecFN.scala 322:35]
    node _mulAddResult_T = mul(mulAddRecFNToRaw_preMul.io.mulAddA, mulAddRecFNToRaw_preMul.io.mulAddB) @[MulAddRecFN.scala 325:45]
    node mulAddResult = add(_mulAddResult_T, mulAddRecFNToRaw_preMul.io.mulAddC) @[MulAddRecFN.scala 326:50]
    mulAddRecFNToRaw_postMul.io.fromPreMul <- mulAddRecFNToRaw_preMul.io.toPostMul @[MulAddRecFN.scala 329:44]
    mulAddRecFNToRaw_postMul.io.mulAddResult <= mulAddResult @[MulAddRecFN.scala 331:46]
    mulAddRecFNToRaw_postMul.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 332:46]
    inst roundRawFNToRecFN of RoundRawFNToRecFN_16 @[MulAddRecFN.scala 337:15]
    roundRawFNToRecFN.io is invalid
    roundRawFNToRecFN.io.invalidExc <= mulAddRecFNToRaw_postMul.io.invalidExc @[MulAddRecFN.scala 338:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulAddRecFN.scala 339:39]
    roundRawFNToRecFN.io.in <- mulAddRecFNToRaw_postMul.io.rawOut @[MulAddRecFN.scala 340:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulAddRecFN.scala 341:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulAddRecFN.scala 342:41]
    io.out <= roundRawFNToRecFN.io.out @[MulAddRecFN.scala 343:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulAddRecFN.scala 344:23]

  module FanNode :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_l : { valid : UInt<1>, bits : { bits : UInt<24>}}, flip in_r : { valid : UInt<1>, bits : { bits : UInt<24>}}, flip same_l_border : UInt<1>, flip same_l : UInt<1>, flip same_m : UInt<1>, flip same_r : UInt<1>, flip same_r_border : UInt<1>, flip left_child : UInt<1>, out_l : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_r : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_final : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_same_l_border : UInt<1>, out_same : UInt<1>, out_same_r_border : UInt<1>}

    node _io_out_same_T = and(io.same_l, io.same_m) @[SIGMA.scala 73:28]
    node _io_out_same_T_1 = and(_io_out_same_T, io.same_r) @[SIGMA.scala 73:41]
    io.out_same <= _io_out_same_T_1 @[SIGMA.scala 73:15]
    io.out_same_l_border <= io.same_l_border @[SIGMA.scala 74:24]
    io.out_same_r_border <= io.same_r_border @[SIGMA.scala 75:24]
    wire NoOutput : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 76:30]
    NoOutput.valid <= UInt<1>("h0") @[SIGMA.scala 77:18]
    NoOutput.bits.bits is invalid @[SIGMA.scala 78:17]
    io.out_l <= NoOutput @[SIGMA.scala 79:12]
    io.out_r <= NoOutput @[SIGMA.scala 80:12]
    io.out_final <= NoOutput @[SIGMA.scala 81:16]
    node merge_l = and(io.same_l_border, io.same_l) @[SIGMA.scala 82:42]
    node merge_r = and(io.same_r_border, io.same_r) @[SIGMA.scala 83:42]
    when io.same_m : @[SIGMA.scala 84:19]
      node _T = and(io.in_l.valid, io.in_r.valid) @[SIGMA.scala 85:24]
      when _T : @[SIGMA.scala 85:42]
        wire sum : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 86:21]
        sum.valid <= UInt<1>("h1") @[SIGMA.scala 87:17]
        node sum_bits_t_rec_rawIn_sign = bits(io.in_r.bits.bits, 23, 23) @[rawFloatFromFN.scala 46:22]
        node sum_bits_t_rec_rawIn_expIn = bits(io.in_r.bits.bits, 22, 15) @[rawFloatFromFN.scala 47:23]
        node sum_bits_t_rec_rawIn_fractIn = bits(io.in_r.bits.bits, 14, 0) @[rawFloatFromFN.scala 48:25]
        node sum_bits_t_rec_rawIn_isZeroExpIn = eq(sum_bits_t_rec_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
        node sum_bits_t_rec_rawIn_isZeroFractIn = eq(sum_bits_t_rec_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
        node _sum_bits_t_rec_rawIn_normDist_T = bits(sum_bits_t_rec_rawIn_fractIn, 0, 0) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_1 = bits(sum_bits_t_rec_rawIn_fractIn, 1, 1) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_2 = bits(sum_bits_t_rec_rawIn_fractIn, 2, 2) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_3 = bits(sum_bits_t_rec_rawIn_fractIn, 3, 3) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_4 = bits(sum_bits_t_rec_rawIn_fractIn, 4, 4) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_5 = bits(sum_bits_t_rec_rawIn_fractIn, 5, 5) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_6 = bits(sum_bits_t_rec_rawIn_fractIn, 6, 6) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_7 = bits(sum_bits_t_rec_rawIn_fractIn, 7, 7) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_8 = bits(sum_bits_t_rec_rawIn_fractIn, 8, 8) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_9 = bits(sum_bits_t_rec_rawIn_fractIn, 9, 9) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_10 = bits(sum_bits_t_rec_rawIn_fractIn, 10, 10) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_11 = bits(sum_bits_t_rec_rawIn_fractIn, 11, 11) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_12 = bits(sum_bits_t_rec_rawIn_fractIn, 12, 12) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_13 = bits(sum_bits_t_rec_rawIn_fractIn, 13, 13) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_14 = bits(sum_bits_t_rec_rawIn_fractIn, 14, 14) @[primitives.scala 92:52]
        node _sum_bits_t_rec_rawIn_normDist_T_15 = mux(_sum_bits_t_rec_rawIn_normDist_T_1, UInt<4>("hd"), UInt<4>("he")) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_16 = mux(_sum_bits_t_rec_rawIn_normDist_T_2, UInt<4>("hc"), _sum_bits_t_rec_rawIn_normDist_T_15) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_17 = mux(_sum_bits_t_rec_rawIn_normDist_T_3, UInt<4>("hb"), _sum_bits_t_rec_rawIn_normDist_T_16) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_18 = mux(_sum_bits_t_rec_rawIn_normDist_T_4, UInt<4>("ha"), _sum_bits_t_rec_rawIn_normDist_T_17) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_19 = mux(_sum_bits_t_rec_rawIn_normDist_T_5, UInt<4>("h9"), _sum_bits_t_rec_rawIn_normDist_T_18) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_20 = mux(_sum_bits_t_rec_rawIn_normDist_T_6, UInt<4>("h8"), _sum_bits_t_rec_rawIn_normDist_T_19) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_21 = mux(_sum_bits_t_rec_rawIn_normDist_T_7, UInt<3>("h7"), _sum_bits_t_rec_rawIn_normDist_T_20) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_22 = mux(_sum_bits_t_rec_rawIn_normDist_T_8, UInt<3>("h6"), _sum_bits_t_rec_rawIn_normDist_T_21) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_23 = mux(_sum_bits_t_rec_rawIn_normDist_T_9, UInt<3>("h5"), _sum_bits_t_rec_rawIn_normDist_T_22) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_24 = mux(_sum_bits_t_rec_rawIn_normDist_T_10, UInt<3>("h4"), _sum_bits_t_rec_rawIn_normDist_T_23) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_25 = mux(_sum_bits_t_rec_rawIn_normDist_T_11, UInt<2>("h3"), _sum_bits_t_rec_rawIn_normDist_T_24) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_26 = mux(_sum_bits_t_rec_rawIn_normDist_T_12, UInt<2>("h2"), _sum_bits_t_rec_rawIn_normDist_T_25) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_normDist_T_27 = mux(_sum_bits_t_rec_rawIn_normDist_T_13, UInt<1>("h1"), _sum_bits_t_rec_rawIn_normDist_T_26) @[Mux.scala 47:70]
        node sum_bits_t_rec_rawIn_normDist = mux(_sum_bits_t_rec_rawIn_normDist_T_14, UInt<1>("h0"), _sum_bits_t_rec_rawIn_normDist_T_27) @[Mux.scala 47:70]
        node _sum_bits_t_rec_rawIn_subnormFract_T = dshl(sum_bits_t_rec_rawIn_fractIn, sum_bits_t_rec_rawIn_normDist) @[rawFloatFromFN.scala 54:36]
        node _sum_bits_t_rec_rawIn_subnormFract_T_1 = bits(_sum_bits_t_rec_rawIn_subnormFract_T, 13, 0) @[rawFloatFromFN.scala 54:47]
        node sum_bits_t_rec_rawIn_subnormFract = shl(_sum_bits_t_rec_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 54:64]
        node _sum_bits_t_rec_rawIn_adjustedExp_T = xor(sum_bits_t_rec_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
        node _sum_bits_t_rec_rawIn_adjustedExp_T_1 = mux(sum_bits_t_rec_rawIn_isZeroExpIn, _sum_bits_t_rec_rawIn_adjustedExp_T, sum_bits_t_rec_rawIn_expIn) @[rawFloatFromFN.scala 56:16]
        node _sum_bits_t_rec_rawIn_adjustedExp_T_2 = mux(sum_bits_t_rec_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
        node _sum_bits_t_rec_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _sum_bits_t_rec_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 60:22]
        node _sum_bits_t_rec_rawIn_adjustedExp_T_4 = add(_sum_bits_t_rec_rawIn_adjustedExp_T_1, _sum_bits_t_rec_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 59:15]
        node sum_bits_t_rec_rawIn_adjustedExp = tail(_sum_bits_t_rec_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 59:15]
        node sum_bits_t_rec_rawIn_isZero = and(sum_bits_t_rec_rawIn_isZeroExpIn, sum_bits_t_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 62:34]
        node _sum_bits_t_rec_rawIn_isSpecial_T = bits(sum_bits_t_rec_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 63:37]
        node sum_bits_t_rec_rawIn_isSpecial = eq(_sum_bits_t_rec_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
        wire sum_bits_t_rec_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromFN.scala 65:23]
        sum_bits_t_rec_rawIn is invalid @[rawFloatFromFN.scala 65:23]
        node _sum_bits_t_rec_rawIn_out_isNaN_T = eq(sum_bits_t_rec_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
        node _sum_bits_t_rec_rawIn_out_isNaN_T_1 = and(sum_bits_t_rec_rawIn_isSpecial, _sum_bits_t_rec_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 66:33]
        sum_bits_t_rec_rawIn.isNaN <= _sum_bits_t_rec_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 66:20]
        node _sum_bits_t_rec_rawIn_out_isInf_T = and(sum_bits_t_rec_rawIn_isSpecial, sum_bits_t_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 67:33]
        sum_bits_t_rec_rawIn.isInf <= _sum_bits_t_rec_rawIn_out_isInf_T @[rawFloatFromFN.scala 67:20]
        sum_bits_t_rec_rawIn.isZero <= sum_bits_t_rec_rawIn_isZero @[rawFloatFromFN.scala 68:20]
        sum_bits_t_rec_rawIn.sign <= sum_bits_t_rec_rawIn_sign @[rawFloatFromFN.scala 69:20]
        node _sum_bits_t_rec_rawIn_out_sExp_T = bits(sum_bits_t_rec_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 70:34]
        node _sum_bits_t_rec_rawIn_out_sExp_T_1 = cvt(_sum_bits_t_rec_rawIn_out_sExp_T) @[rawFloatFromFN.scala 70:48]
        sum_bits_t_rec_rawIn.sExp <= _sum_bits_t_rec_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 70:20]
        node _sum_bits_t_rec_rawIn_out_sig_T = eq(sum_bits_t_rec_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
        node _sum_bits_t_rec_rawIn_out_sig_T_1 = mux(sum_bits_t_rec_rawIn_isZeroExpIn, sum_bits_t_rec_rawIn_subnormFract, sum_bits_t_rec_rawIn_fractIn) @[rawFloatFromFN.scala 72:42]
        node sum_bits_t_rec_rawIn_out_sig_hi = cat(UInt<1>("h0"), _sum_bits_t_rec_rawIn_out_sig_T) @[Cat.scala 33:92]
        node _sum_bits_t_rec_rawIn_out_sig_T_2 = cat(sum_bits_t_rec_rawIn_out_sig_hi, _sum_bits_t_rec_rawIn_out_sig_T_1) @[Cat.scala 33:92]
        sum_bits_t_rec_rawIn.sig <= _sum_bits_t_rec_rawIn_out_sig_T_2 @[rawFloatFromFN.scala 71:17]
        node _sum_bits_t_rec_T = bits(sum_bits_t_rec_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:53]
        node _sum_bits_t_rec_T_1 = mux(sum_bits_t_rec_rawIn.isZero, UInt<3>("h0"), _sum_bits_t_rec_T) @[recFNFromFN.scala 48:16]
        node _sum_bits_t_rec_T_2 = mux(sum_bits_t_rec_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
        node _sum_bits_t_rec_T_3 = or(_sum_bits_t_rec_T_1, _sum_bits_t_rec_T_2) @[recFNFromFN.scala 48:79]
        node _sum_bits_t_rec_T_4 = bits(sum_bits_t_rec_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
        node _sum_bits_t_rec_T_5 = bits(sum_bits_t_rec_rawIn.sig, 14, 0) @[recFNFromFN.scala 51:22]
        node sum_bits_t_rec_lo = cat(_sum_bits_t_rec_T_4, _sum_bits_t_rec_T_5) @[Cat.scala 33:92]
        node sum_bits_t_rec_hi = cat(sum_bits_t_rec_rawIn.sign, _sum_bits_t_rec_T_3) @[Cat.scala 33:92]
        node sum_bits_t_rec = cat(sum_bits_t_rec_hi, sum_bits_t_rec_lo) @[Cat.scala 33:92]
        node sum_bits_self_rec_rawIn_sign = bits(io.in_l.bits.bits, 23, 23) @[rawFloatFromFN.scala 46:22]
        node sum_bits_self_rec_rawIn_expIn = bits(io.in_l.bits.bits, 22, 15) @[rawFloatFromFN.scala 47:23]
        node sum_bits_self_rec_rawIn_fractIn = bits(io.in_l.bits.bits, 14, 0) @[rawFloatFromFN.scala 48:25]
        node sum_bits_self_rec_rawIn_isZeroExpIn = eq(sum_bits_self_rec_rawIn_expIn, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
        node sum_bits_self_rec_rawIn_isZeroFractIn = eq(sum_bits_self_rec_rawIn_fractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
        node _sum_bits_self_rec_rawIn_normDist_T = bits(sum_bits_self_rec_rawIn_fractIn, 0, 0) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_1 = bits(sum_bits_self_rec_rawIn_fractIn, 1, 1) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_2 = bits(sum_bits_self_rec_rawIn_fractIn, 2, 2) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_3 = bits(sum_bits_self_rec_rawIn_fractIn, 3, 3) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_4 = bits(sum_bits_self_rec_rawIn_fractIn, 4, 4) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_5 = bits(sum_bits_self_rec_rawIn_fractIn, 5, 5) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_6 = bits(sum_bits_self_rec_rawIn_fractIn, 6, 6) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_7 = bits(sum_bits_self_rec_rawIn_fractIn, 7, 7) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_8 = bits(sum_bits_self_rec_rawIn_fractIn, 8, 8) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_9 = bits(sum_bits_self_rec_rawIn_fractIn, 9, 9) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_10 = bits(sum_bits_self_rec_rawIn_fractIn, 10, 10) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_11 = bits(sum_bits_self_rec_rawIn_fractIn, 11, 11) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_12 = bits(sum_bits_self_rec_rawIn_fractIn, 12, 12) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_13 = bits(sum_bits_self_rec_rawIn_fractIn, 13, 13) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_14 = bits(sum_bits_self_rec_rawIn_fractIn, 14, 14) @[primitives.scala 92:52]
        node _sum_bits_self_rec_rawIn_normDist_T_15 = mux(_sum_bits_self_rec_rawIn_normDist_T_1, UInt<4>("hd"), UInt<4>("he")) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_16 = mux(_sum_bits_self_rec_rawIn_normDist_T_2, UInt<4>("hc"), _sum_bits_self_rec_rawIn_normDist_T_15) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_17 = mux(_sum_bits_self_rec_rawIn_normDist_T_3, UInt<4>("hb"), _sum_bits_self_rec_rawIn_normDist_T_16) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_18 = mux(_sum_bits_self_rec_rawIn_normDist_T_4, UInt<4>("ha"), _sum_bits_self_rec_rawIn_normDist_T_17) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_19 = mux(_sum_bits_self_rec_rawIn_normDist_T_5, UInt<4>("h9"), _sum_bits_self_rec_rawIn_normDist_T_18) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_20 = mux(_sum_bits_self_rec_rawIn_normDist_T_6, UInt<4>("h8"), _sum_bits_self_rec_rawIn_normDist_T_19) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_21 = mux(_sum_bits_self_rec_rawIn_normDist_T_7, UInt<3>("h7"), _sum_bits_self_rec_rawIn_normDist_T_20) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_22 = mux(_sum_bits_self_rec_rawIn_normDist_T_8, UInt<3>("h6"), _sum_bits_self_rec_rawIn_normDist_T_21) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_23 = mux(_sum_bits_self_rec_rawIn_normDist_T_9, UInt<3>("h5"), _sum_bits_self_rec_rawIn_normDist_T_22) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_24 = mux(_sum_bits_self_rec_rawIn_normDist_T_10, UInt<3>("h4"), _sum_bits_self_rec_rawIn_normDist_T_23) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_25 = mux(_sum_bits_self_rec_rawIn_normDist_T_11, UInt<2>("h3"), _sum_bits_self_rec_rawIn_normDist_T_24) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_26 = mux(_sum_bits_self_rec_rawIn_normDist_T_12, UInt<2>("h2"), _sum_bits_self_rec_rawIn_normDist_T_25) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_normDist_T_27 = mux(_sum_bits_self_rec_rawIn_normDist_T_13, UInt<1>("h1"), _sum_bits_self_rec_rawIn_normDist_T_26) @[Mux.scala 47:70]
        node sum_bits_self_rec_rawIn_normDist = mux(_sum_bits_self_rec_rawIn_normDist_T_14, UInt<1>("h0"), _sum_bits_self_rec_rawIn_normDist_T_27) @[Mux.scala 47:70]
        node _sum_bits_self_rec_rawIn_subnormFract_T = dshl(sum_bits_self_rec_rawIn_fractIn, sum_bits_self_rec_rawIn_normDist) @[rawFloatFromFN.scala 54:36]
        node _sum_bits_self_rec_rawIn_subnormFract_T_1 = bits(_sum_bits_self_rec_rawIn_subnormFract_T, 13, 0) @[rawFloatFromFN.scala 54:47]
        node sum_bits_self_rec_rawIn_subnormFract = shl(_sum_bits_self_rec_rawIn_subnormFract_T_1, 1) @[rawFloatFromFN.scala 54:64]
        node _sum_bits_self_rec_rawIn_adjustedExp_T = xor(sum_bits_self_rec_rawIn_normDist, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
        node _sum_bits_self_rec_rawIn_adjustedExp_T_1 = mux(sum_bits_self_rec_rawIn_isZeroExpIn, _sum_bits_self_rec_rawIn_adjustedExp_T, sum_bits_self_rec_rawIn_expIn) @[rawFloatFromFN.scala 56:16]
        node _sum_bits_self_rec_rawIn_adjustedExp_T_2 = mux(sum_bits_self_rec_rawIn_isZeroExpIn, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
        node _sum_bits_self_rec_rawIn_adjustedExp_T_3 = or(UInt<8>("h80"), _sum_bits_self_rec_rawIn_adjustedExp_T_2) @[rawFloatFromFN.scala 60:22]
        node _sum_bits_self_rec_rawIn_adjustedExp_T_4 = add(_sum_bits_self_rec_rawIn_adjustedExp_T_1, _sum_bits_self_rec_rawIn_adjustedExp_T_3) @[rawFloatFromFN.scala 59:15]
        node sum_bits_self_rec_rawIn_adjustedExp = tail(_sum_bits_self_rec_rawIn_adjustedExp_T_4, 1) @[rawFloatFromFN.scala 59:15]
        node sum_bits_self_rec_rawIn_isZero = and(sum_bits_self_rec_rawIn_isZeroExpIn, sum_bits_self_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 62:34]
        node _sum_bits_self_rec_rawIn_isSpecial_T = bits(sum_bits_self_rec_rawIn_adjustedExp, 8, 7) @[rawFloatFromFN.scala 63:37]
        node sum_bits_self_rec_rawIn_isSpecial = eq(_sum_bits_self_rec_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
        wire sum_bits_self_rec_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromFN.scala 65:23]
        sum_bits_self_rec_rawIn is invalid @[rawFloatFromFN.scala 65:23]
        node _sum_bits_self_rec_rawIn_out_isNaN_T = eq(sum_bits_self_rec_rawIn_isZeroFractIn, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
        node _sum_bits_self_rec_rawIn_out_isNaN_T_1 = and(sum_bits_self_rec_rawIn_isSpecial, _sum_bits_self_rec_rawIn_out_isNaN_T) @[rawFloatFromFN.scala 66:33]
        sum_bits_self_rec_rawIn.isNaN <= _sum_bits_self_rec_rawIn_out_isNaN_T_1 @[rawFloatFromFN.scala 66:20]
        node _sum_bits_self_rec_rawIn_out_isInf_T = and(sum_bits_self_rec_rawIn_isSpecial, sum_bits_self_rec_rawIn_isZeroFractIn) @[rawFloatFromFN.scala 67:33]
        sum_bits_self_rec_rawIn.isInf <= _sum_bits_self_rec_rawIn_out_isInf_T @[rawFloatFromFN.scala 67:20]
        sum_bits_self_rec_rawIn.isZero <= sum_bits_self_rec_rawIn_isZero @[rawFloatFromFN.scala 68:20]
        sum_bits_self_rec_rawIn.sign <= sum_bits_self_rec_rawIn_sign @[rawFloatFromFN.scala 69:20]
        node _sum_bits_self_rec_rawIn_out_sExp_T = bits(sum_bits_self_rec_rawIn_adjustedExp, 8, 0) @[rawFloatFromFN.scala 70:34]
        node _sum_bits_self_rec_rawIn_out_sExp_T_1 = cvt(_sum_bits_self_rec_rawIn_out_sExp_T) @[rawFloatFromFN.scala 70:48]
        sum_bits_self_rec_rawIn.sExp <= _sum_bits_self_rec_rawIn_out_sExp_T_1 @[rawFloatFromFN.scala 70:20]
        node _sum_bits_self_rec_rawIn_out_sig_T = eq(sum_bits_self_rec_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
        node _sum_bits_self_rec_rawIn_out_sig_T_1 = mux(sum_bits_self_rec_rawIn_isZeroExpIn, sum_bits_self_rec_rawIn_subnormFract, sum_bits_self_rec_rawIn_fractIn) @[rawFloatFromFN.scala 72:42]
        node sum_bits_self_rec_rawIn_out_sig_hi = cat(UInt<1>("h0"), _sum_bits_self_rec_rawIn_out_sig_T) @[Cat.scala 33:92]
        node _sum_bits_self_rec_rawIn_out_sig_T_2 = cat(sum_bits_self_rec_rawIn_out_sig_hi, _sum_bits_self_rec_rawIn_out_sig_T_1) @[Cat.scala 33:92]
        sum_bits_self_rec_rawIn.sig <= _sum_bits_self_rec_rawIn_out_sig_T_2 @[rawFloatFromFN.scala 71:17]
        node _sum_bits_self_rec_T = bits(sum_bits_self_rec_rawIn.sExp, 8, 6) @[recFNFromFN.scala 48:53]
        node _sum_bits_self_rec_T_1 = mux(sum_bits_self_rec_rawIn.isZero, UInt<3>("h0"), _sum_bits_self_rec_T) @[recFNFromFN.scala 48:16]
        node _sum_bits_self_rec_T_2 = mux(sum_bits_self_rec_rawIn.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
        node _sum_bits_self_rec_T_3 = or(_sum_bits_self_rec_T_1, _sum_bits_self_rec_T_2) @[recFNFromFN.scala 48:79]
        node _sum_bits_self_rec_T_4 = bits(sum_bits_self_rec_rawIn.sExp, 5, 0) @[recFNFromFN.scala 50:23]
        node _sum_bits_self_rec_T_5 = bits(sum_bits_self_rec_rawIn.sig, 14, 0) @[recFNFromFN.scala 51:22]
        node sum_bits_self_rec_lo = cat(_sum_bits_self_rec_T_4, _sum_bits_self_rec_T_5) @[Cat.scala 33:92]
        node sum_bits_self_rec_hi = cat(sum_bits_self_rec_rawIn.sign, _sum_bits_self_rec_T_3) @[Cat.scala 33:92]
        node sum_bits_self_rec = cat(sum_bits_self_rec_hi, sum_bits_self_rec_lo) @[Cat.scala 33:92]
        inst sum_bits_in_to_rec_fn of INToRecFN @[Arithmetic.scala 202:34]
        sum_bits_in_to_rec_fn.io.signedIn <= UInt<1>("h0") @[Arithmetic.scala 203:34]
        sum_bits_in_to_rec_fn.io.in <= UInt<1>("h1") @[Arithmetic.scala 204:28]
        sum_bits_in_to_rec_fn.io.roundingMode <= UInt<3>("h0") @[Arithmetic.scala 205:38]
        sum_bits_in_to_rec_fn.io.detectTininess <= UInt<1>("h1") @[Arithmetic.scala 206:40]
        inst sum_bits_t_resizer of RecFNToRecFN_32 @[Arithmetic.scala 211:31]
        sum_bits_t_resizer.io.in <= sum_bits_t_rec @[Arithmetic.scala 212:25]
        sum_bits_t_resizer.io.roundingMode <= UInt<3>("h0") @[Arithmetic.scala 213:35]
        sum_bits_t_resizer.io.detectTininess <= UInt<1>("h1") @[Arithmetic.scala 214:37]
        inst sum_bits_muladder of MulAddRecFN_16 @[Arithmetic.scala 218:30]
        sum_bits_muladder.io.op <= UInt<1>("h0") @[Arithmetic.scala 220:24]
        sum_bits_muladder.io.roundingMode <= UInt<3>("h0") @[Arithmetic.scala 221:34]
        sum_bits_muladder.io.detectTininess <= UInt<1>("h1") @[Arithmetic.scala 222:36]
        sum_bits_muladder.io.a <= sum_bits_t_resizer.io.out @[Arithmetic.scala 224:23]
        sum_bits_muladder.io.b <= sum_bits_in_to_rec_fn.io.out @[Arithmetic.scala 225:23]
        sum_bits_muladder.io.c <= sum_bits_self_rec @[Arithmetic.scala 226:23]
        wire sum_bits_result : { bits : UInt<24>} @[Arithmetic.scala 228:26]
        node sum_bits_result_bits_rawIn_exp = bits(sum_bits_muladder.io.out, 23, 15) @[rawFloatFromRecFN.scala 50:21]
        node _sum_bits_result_bits_rawIn_isZero_T = bits(sum_bits_result_bits_rawIn_exp, 8, 6) @[rawFloatFromRecFN.scala 51:29]
        node sum_bits_result_bits_rawIn_isZero = eq(_sum_bits_result_bits_rawIn_isZero_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
        node _sum_bits_result_bits_rawIn_isSpecial_T = bits(sum_bits_result_bits_rawIn_exp, 8, 7) @[rawFloatFromRecFN.scala 52:29]
        node sum_bits_result_bits_rawIn_isSpecial = eq(_sum_bits_result_bits_rawIn_isSpecial_T, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
        wire sum_bits_result_bits_rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<17>} @[rawFloatFromRecFN.scala 54:23]
        sum_bits_result_bits_rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
        node _sum_bits_result_bits_rawIn_out_isNaN_T = bits(sum_bits_result_bits_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 55:41]
        node _sum_bits_result_bits_rawIn_out_isNaN_T_1 = and(sum_bits_result_bits_rawIn_isSpecial, _sum_bits_result_bits_rawIn_out_isNaN_T) @[rawFloatFromRecFN.scala 55:33]
        sum_bits_result_bits_rawIn.isNaN <= _sum_bits_result_bits_rawIn_out_isNaN_T_1 @[rawFloatFromRecFN.scala 55:20]
        node _sum_bits_result_bits_rawIn_out_isInf_T = bits(sum_bits_result_bits_rawIn_exp, 6, 6) @[rawFloatFromRecFN.scala 56:41]
        node _sum_bits_result_bits_rawIn_out_isInf_T_1 = eq(_sum_bits_result_bits_rawIn_out_isInf_T, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
        node _sum_bits_result_bits_rawIn_out_isInf_T_2 = and(sum_bits_result_bits_rawIn_isSpecial, _sum_bits_result_bits_rawIn_out_isInf_T_1) @[rawFloatFromRecFN.scala 56:33]
        sum_bits_result_bits_rawIn.isInf <= _sum_bits_result_bits_rawIn_out_isInf_T_2 @[rawFloatFromRecFN.scala 56:20]
        sum_bits_result_bits_rawIn.isZero <= sum_bits_result_bits_rawIn_isZero @[rawFloatFromRecFN.scala 57:20]
        node _sum_bits_result_bits_rawIn_out_sign_T = bits(sum_bits_muladder.io.out, 24, 24) @[rawFloatFromRecFN.scala 58:25]
        sum_bits_result_bits_rawIn.sign <= _sum_bits_result_bits_rawIn_out_sign_T @[rawFloatFromRecFN.scala 58:20]
        node _sum_bits_result_bits_rawIn_out_sExp_T = cvt(sum_bits_result_bits_rawIn_exp) @[rawFloatFromRecFN.scala 59:27]
        sum_bits_result_bits_rawIn.sExp <= _sum_bits_result_bits_rawIn_out_sExp_T @[rawFloatFromRecFN.scala 59:20]
        node _sum_bits_result_bits_rawIn_out_sig_T = eq(sum_bits_result_bits_rawIn_isZero, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
        node _sum_bits_result_bits_rawIn_out_sig_T_1 = bits(sum_bits_muladder.io.out, 14, 0) @[rawFloatFromRecFN.scala 60:51]
        node sum_bits_result_bits_rawIn_out_sig_hi = cat(UInt<1>("h0"), _sum_bits_result_bits_rawIn_out_sig_T) @[Cat.scala 33:92]
        node _sum_bits_result_bits_rawIn_out_sig_T_2 = cat(sum_bits_result_bits_rawIn_out_sig_hi, _sum_bits_result_bits_rawIn_out_sig_T_1) @[Cat.scala 33:92]
        sum_bits_result_bits_rawIn.sig <= _sum_bits_result_bits_rawIn_out_sig_T_2 @[rawFloatFromRecFN.scala 60:20]
        node sum_bits_result_bits_isSubnormal = lt(sum_bits_result_bits_rawIn.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 50:39]
        node _sum_bits_result_bits_denormShiftDist_T = bits(sum_bits_result_bits_rawIn.sExp, 3, 0) @[fNFromRecFN.scala 51:51]
        node _sum_bits_result_bits_denormShiftDist_T_1 = sub(UInt<1>("h1"), _sum_bits_result_bits_denormShiftDist_T) @[fNFromRecFN.scala 51:39]
        node sum_bits_result_bits_denormShiftDist = tail(_sum_bits_result_bits_denormShiftDist_T_1, 1) @[fNFromRecFN.scala 51:39]
        node _sum_bits_result_bits_denormFract_T = shr(sum_bits_result_bits_rawIn.sig, 1) @[fNFromRecFN.scala 52:38]
        node _sum_bits_result_bits_denormFract_T_1 = dshr(_sum_bits_result_bits_denormFract_T, sum_bits_result_bits_denormShiftDist) @[fNFromRecFN.scala 52:42]
        node sum_bits_result_bits_denormFract = bits(_sum_bits_result_bits_denormFract_T_1, 14, 0) @[fNFromRecFN.scala 52:60]
        node _sum_bits_result_bits_expOut_T = bits(sum_bits_result_bits_rawIn.sExp, 7, 0) @[fNFromRecFN.scala 57:27]
        node _sum_bits_result_bits_expOut_T_1 = sub(_sum_bits_result_bits_expOut_T, UInt<8>("h81")) @[fNFromRecFN.scala 57:45]
        node _sum_bits_result_bits_expOut_T_2 = tail(_sum_bits_result_bits_expOut_T_1, 1) @[fNFromRecFN.scala 57:45]
        node _sum_bits_result_bits_expOut_T_3 = mux(sum_bits_result_bits_isSubnormal, UInt<1>("h0"), _sum_bits_result_bits_expOut_T_2) @[fNFromRecFN.scala 55:16]
        node _sum_bits_result_bits_expOut_T_4 = or(sum_bits_result_bits_rawIn.isNaN, sum_bits_result_bits_rawIn.isInf) @[fNFromRecFN.scala 59:44]
        node _sum_bits_result_bits_expOut_T_5 = bits(_sum_bits_result_bits_expOut_T_4, 0, 0) @[Bitwise.scala 77:15]
        node _sum_bits_result_bits_expOut_T_6 = mux(_sum_bits_result_bits_expOut_T_5, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
        node sum_bits_result_bits_expOut = or(_sum_bits_result_bits_expOut_T_3, _sum_bits_result_bits_expOut_T_6) @[fNFromRecFN.scala 59:15]
        node _sum_bits_result_bits_fractOut_T = bits(sum_bits_result_bits_rawIn.sig, 14, 0) @[fNFromRecFN.scala 63:52]
        node _sum_bits_result_bits_fractOut_T_1 = mux(sum_bits_result_bits_rawIn.isInf, UInt<1>("h0"), _sum_bits_result_bits_fractOut_T) @[fNFromRecFN.scala 63:20]
        node sum_bits_result_bits_fractOut = mux(sum_bits_result_bits_isSubnormal, sum_bits_result_bits_denormFract, _sum_bits_result_bits_fractOut_T_1) @[fNFromRecFN.scala 61:16]
        node sum_bits_result_bits_hi = cat(sum_bits_result_bits_rawIn.sign, sum_bits_result_bits_expOut) @[Cat.scala 33:92]
        node _sum_bits_result_bits_T = cat(sum_bits_result_bits_hi, sum_bits_result_bits_fractOut) @[Cat.scala 33:92]
        sum_bits_result.bits <= _sum_bits_result_bits_T @[Arithmetic.scala 229:21]
        sum.bits <= sum_bits_result @[SIGMA.scala 88:16]
        node _T_1 = and(merge_l, merge_r) @[SIGMA.scala 89:20]
        when _T_1 : @[SIGMA.scala 89:32]
          when io.left_child : @[SIGMA.scala 90:29]
            io.out_r <= sum @[SIGMA.scala 91:20]
          else :
            io.out_l <= sum @[SIGMA.scala 93:20]
        else :
          when merge_l : @[SIGMA.scala 95:28]
            io.out_l <= sum @[SIGMA.scala 96:18]
          else :
            when merge_r : @[SIGMA.scala 97:28]
              io.out_r <= sum @[SIGMA.scala 98:18]
            else :
              io.out_final <= sum @[SIGMA.scala 100:22]
    else :
      when merge_l : @[SIGMA.scala 104:19]
        io.out_l <= io.in_l @[SIGMA.scala 105:16]
      else :
        io.out_final <= io.in_l @[SIGMA.scala 107:20]
      when io.same_r : @[SIGMA.scala 109:21]
        io.out_r <= io.in_r @[SIGMA.scala 110:16]


  module FanNodeWrapper :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_l : { valid : UInt<1>, bits : { bits : UInt<24>}}[1], flip in_r : { valid : UInt<1>, bits : { bits : UInt<24>}}[1], flip same_l_border : UInt<1>, flip same_l : UInt<1>, flip same_m : UInt<1>, flip same_r : UInt<1>, flip same_r_border : UInt<1>, flip left_child : UInt<1>, out_l : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_r : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_same_l_border : UInt<1>, out_same : UInt<1>, out_same_r_border : UInt<1>}

    inst inner of FanNode @[SIGMA.scala 148:31]
    inner.clock <= clock
    inner.reset <= reset
    inner.io.in_l.bits.bits <= io.in_l[0].bits.bits @[SIGMA.scala 149:19]
    inner.io.in_l.valid <= io.in_l[0].valid @[SIGMA.scala 149:19]
    inner.io.in_r.bits.bits <= io.in_r[0].bits.bits @[SIGMA.scala 150:19]
    inner.io.in_r.valid <= io.in_r[0].valid @[SIGMA.scala 150:19]
    inner.io.same_l <= io.same_l @[SIGMA.scala 151:21]
    inner.io.same_r <= io.same_r @[SIGMA.scala 152:21]
    inner.io.same_m <= io.same_m @[SIGMA.scala 153:21]
    inner.io.same_l_border <= io.same_l_border @[SIGMA.scala 154:28]
    inner.io.same_r_border <= io.same_r_border @[SIGMA.scala 155:28]
    inner.io.left_child <= io.left_child @[SIGMA.scala 156:25]
    reg io_out_l_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_l_v <= inner.io.out_l.valid @[Valid.scala 130:22]
    reg io_out_l_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_l_b) @[Reg.scala 19:16]
    when inner.io.out_l.valid : @[Reg.scala 20:18]
      io_out_l_b <= inner.io.out_l.bits @[Reg.scala 20:22]
    wire io_out_l_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_l_out.valid <= io_out_l_v @[Valid.scala 126:17]
    io_out_l_out.bits <= io_out_l_b @[Valid.scala 127:16]
    io.out_l <= io_out_l_out @[SIGMA.scala 157:14]
    reg io_out_r_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_r_v <= inner.io.out_r.valid @[Valid.scala 130:22]
    reg io_out_r_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_r_b) @[Reg.scala 19:16]
    when inner.io.out_r.valid : @[Reg.scala 20:18]
      io_out_r_b <= inner.io.out_r.bits @[Reg.scala 20:22]
    wire io_out_r_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_r_out.valid <= io_out_r_v @[Valid.scala 126:17]
    io_out_r_out.bits <= io_out_r_b @[Valid.scala 127:16]
    io.out_r <= io_out_r_out @[SIGMA.scala 158:14]
    reg io_out_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_v <= inner.io.out_final.valid @[Valid.scala 130:22]
    reg io_out_data_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_b) @[Reg.scala 19:16]
    when inner.io.out_final.valid : @[Reg.scala 20:18]
      io_out_data_b <= inner.io.out_final.bits @[Reg.scala 20:22]
    reg io_out_data_outPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_outPipe_valid <= io_out_data_v @[Valid.scala 130:22]
    reg io_out_data_outPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_outPipe_bits) @[Reg.scala 19:16]
    when io_out_data_v : @[Reg.scala 20:18]
      io_out_data_outPipe_bits <= io_out_data_b @[Reg.scala 20:22]
    reg io_out_data_outPipe_valid_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_outPipe_valid_1 <= io_out_data_outPipe_valid @[Valid.scala 130:22]
    reg io_out_data_outPipe_bits_1 : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_outPipe_bits_1) @[Reg.scala 19:16]
    when io_out_data_outPipe_valid : @[Reg.scala 20:18]
      io_out_data_outPipe_bits_1 <= io_out_data_outPipe_bits @[Reg.scala 20:22]
    wire io_out_data_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_data_out.valid <= io_out_data_outPipe_valid_1 @[Valid.scala 126:17]
    io_out_data_out.bits <= io_out_data_outPipe_bits_1 @[Valid.scala 127:16]
    io.out_data <= io_out_data_out @[SIGMA.scala 159:17]
    reg io_out_same_l_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_l_border_REG) @[SIGMA.scala 160:36]
    io_out_same_l_border_REG <= inner.io.out_same_l_border @[SIGMA.scala 160:36]
    io.out_same_l_border <= io_out_same_l_border_REG @[SIGMA.scala 160:26]
    reg io_out_same_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_REG) @[SIGMA.scala 161:27]
    io_out_same_REG <= inner.io.out_same @[SIGMA.scala 161:27]
    io.out_same <= io_out_same_REG @[SIGMA.scala 161:17]
    reg io_out_same_r_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_r_border_REG) @[SIGMA.scala 162:36]
    io_out_same_r_border_REG <= inner.io.out_same_r_border @[SIGMA.scala 162:36]
    io.out_same_r_border <= io_out_same_r_border_REG @[SIGMA.scala 162:26]

  module FanNodeWrapper_8 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_l : { valid : UInt<1>, bits : { bits : UInt<24>}}[1], flip in_r : { valid : UInt<1>, bits : { bits : UInt<24>}}[1], flip same_l_border : UInt<1>, flip same_l : UInt<1>, flip same_m : UInt<1>, flip same_r : UInt<1>, flip same_r_border : UInt<1>, flip left_child : UInt<1>, out_l : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_r : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_same_l_border : UInt<1>, out_same : UInt<1>, out_same_r_border : UInt<1>}

    inst inner of FanNode @[SIGMA.scala 148:31]
    inner.clock <= clock
    inner.reset <= reset
    inner.io.in_l.bits.bits <= io.in_l[0].bits.bits @[SIGMA.scala 149:19]
    inner.io.in_l.valid <= io.in_l[0].valid @[SIGMA.scala 149:19]
    inner.io.in_r.bits.bits <= io.in_r[0].bits.bits @[SIGMA.scala 150:19]
    inner.io.in_r.valid <= io.in_r[0].valid @[SIGMA.scala 150:19]
    inner.io.same_l <= io.same_l @[SIGMA.scala 151:21]
    inner.io.same_r <= io.same_r @[SIGMA.scala 152:21]
    inner.io.same_m <= io.same_m @[SIGMA.scala 153:21]
    inner.io.same_l_border <= io.same_l_border @[SIGMA.scala 154:28]
    inner.io.same_r_border <= io.same_r_border @[SIGMA.scala 155:28]
    inner.io.left_child <= io.left_child @[SIGMA.scala 156:25]
    reg io_out_l_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_l_v <= inner.io.out_l.valid @[Valid.scala 130:22]
    reg io_out_l_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_l_b) @[Reg.scala 19:16]
    when inner.io.out_l.valid : @[Reg.scala 20:18]
      io_out_l_b <= inner.io.out_l.bits @[Reg.scala 20:22]
    wire io_out_l_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_l_out.valid <= io_out_l_v @[Valid.scala 126:17]
    io_out_l_out.bits <= io_out_l_b @[Valid.scala 127:16]
    io.out_l <= io_out_l_out @[SIGMA.scala 157:14]
    reg io_out_r_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_r_v <= inner.io.out_r.valid @[Valid.scala 130:22]
    reg io_out_r_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_r_b) @[Reg.scala 19:16]
    when inner.io.out_r.valid : @[Reg.scala 20:18]
      io_out_r_b <= inner.io.out_r.bits @[Reg.scala 20:22]
    wire io_out_r_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_r_out.valid <= io_out_r_v @[Valid.scala 126:17]
    io_out_r_out.bits <= io_out_r_b @[Valid.scala 127:16]
    io.out_r <= io_out_r_out @[SIGMA.scala 158:14]
    reg io_out_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_v <= inner.io.out_final.valid @[Valid.scala 130:22]
    reg io_out_data_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_b) @[Reg.scala 19:16]
    when inner.io.out_final.valid : @[Reg.scala 20:18]
      io_out_data_b <= inner.io.out_final.bits @[Reg.scala 20:22]
    reg io_out_data_outPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_outPipe_valid <= io_out_data_v @[Valid.scala 130:22]
    reg io_out_data_outPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_outPipe_bits) @[Reg.scala 19:16]
    when io_out_data_v : @[Reg.scala 20:18]
      io_out_data_outPipe_bits <= io_out_data_b @[Reg.scala 20:22]
    wire io_out_data_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_data_out.valid <= io_out_data_outPipe_valid @[Valid.scala 126:17]
    io_out_data_out.bits <= io_out_data_outPipe_bits @[Valid.scala 127:16]
    io.out_data <= io_out_data_out @[SIGMA.scala 159:17]
    reg io_out_same_l_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_l_border_REG) @[SIGMA.scala 160:36]
    io_out_same_l_border_REG <= inner.io.out_same_l_border @[SIGMA.scala 160:36]
    io.out_same_l_border <= io_out_same_l_border_REG @[SIGMA.scala 160:26]
    reg io_out_same_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_REG) @[SIGMA.scala 161:27]
    io_out_same_REG <= inner.io.out_same @[SIGMA.scala 161:27]
    io.out_same <= io_out_same_REG @[SIGMA.scala 161:17]
    reg io_out_same_r_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_r_border_REG) @[SIGMA.scala 162:36]
    io_out_same_r_border_REG <= inner.io.out_same_r_border @[SIGMA.scala 162:36]
    io.out_same_r_border <= io_out_same_r_border_REG @[SIGMA.scala 162:26]

  module FanNodeWrapper_12 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_l : { valid : UInt<1>, bits : { bits : UInt<24>}}[2], flip in_r : { valid : UInt<1>, bits : { bits : UInt<24>}}[2], flip same_l_border : UInt<1>, flip same_l : UInt<1>, flip same_m : UInt<1>, flip same_r : UInt<1>, flip same_r_border : UInt<1>, flip left_child : UInt<1>, out_l : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_r : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_same_l_border : UInt<1>, out_same : UInt<1>, out_same_r_border : UInt<1>}

    inst inner of FanNode @[SIGMA.scala 148:31]
    inner.clock <= clock
    inner.reset <= reset
    reg inner_io_in_l_upPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    inner_io_in_l_upPipe_valid <= io.in_l[0].valid @[Valid.scala 130:22]
    reg inner_io_in_l_upPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), inner_io_in_l_upPipe_bits) @[Reg.scala 19:16]
    when io.in_l[0].valid : @[Reg.scala 20:18]
      inner_io_in_l_upPipe_bits <= io.in_l[0].bits @[Reg.scala 20:22]
    wire inner_io_in_l_up : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    inner_io_in_l_up.valid <= inner_io_in_l_upPipe_valid @[Valid.scala 126:17]
    inner_io_in_l_up.bits <= inner_io_in_l_upPipe_bits @[Valid.scala 127:16]
    wire inner_io_in_l_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 126:21]
    node _inner_io_in_l_out_valid_T = or(inner_io_in_l_up.valid, io.in_l[1].valid) @[SIGMA.scala 127:29]
    inner_io_in_l_out.valid <= _inner_io_in_l_out_valid_T @[SIGMA.scala 127:17]
    node _inner_io_in_l_out_bits_T = mux(inner_io_in_l_up.valid, inner_io_in_l_up.bits, io.in_l[1].bits) @[SIGMA.scala 128:22]
    inner_io_in_l_out.bits <= _inner_io_in_l_out_bits_T @[SIGMA.scala 128:16]
    inner.io.in_l.bits.bits <= inner_io_in_l_out.bits.bits @[SIGMA.scala 149:19]
    inner.io.in_l.valid <= inner_io_in_l_out.valid @[SIGMA.scala 149:19]
    reg inner_io_in_r_upPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    inner_io_in_r_upPipe_valid <= io.in_r[0].valid @[Valid.scala 130:22]
    reg inner_io_in_r_upPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), inner_io_in_r_upPipe_bits) @[Reg.scala 19:16]
    when io.in_r[0].valid : @[Reg.scala 20:18]
      inner_io_in_r_upPipe_bits <= io.in_r[0].bits @[Reg.scala 20:22]
    wire inner_io_in_r_up : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    inner_io_in_r_up.valid <= inner_io_in_r_upPipe_valid @[Valid.scala 126:17]
    inner_io_in_r_up.bits <= inner_io_in_r_upPipe_bits @[Valid.scala 127:16]
    wire inner_io_in_r_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 126:21]
    node _inner_io_in_r_out_valid_T = or(inner_io_in_r_up.valid, io.in_r[1].valid) @[SIGMA.scala 127:29]
    inner_io_in_r_out.valid <= _inner_io_in_r_out_valid_T @[SIGMA.scala 127:17]
    node _inner_io_in_r_out_bits_T = mux(inner_io_in_r_up.valid, inner_io_in_r_up.bits, io.in_r[1].bits) @[SIGMA.scala 128:22]
    inner_io_in_r_out.bits <= _inner_io_in_r_out_bits_T @[SIGMA.scala 128:16]
    inner.io.in_r.bits.bits <= inner_io_in_r_out.bits.bits @[SIGMA.scala 150:19]
    inner.io.in_r.valid <= inner_io_in_r_out.valid @[SIGMA.scala 150:19]
    inner.io.same_l <= io.same_l @[SIGMA.scala 151:21]
    inner.io.same_r <= io.same_r @[SIGMA.scala 152:21]
    inner.io.same_m <= io.same_m @[SIGMA.scala 153:21]
    inner.io.same_l_border <= io.same_l_border @[SIGMA.scala 154:28]
    inner.io.same_r_border <= io.same_r_border @[SIGMA.scala 155:28]
    inner.io.left_child <= io.left_child @[SIGMA.scala 156:25]
    reg io_out_l_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_l_v <= inner.io.out_l.valid @[Valid.scala 130:22]
    reg io_out_l_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_l_b) @[Reg.scala 19:16]
    when inner.io.out_l.valid : @[Reg.scala 20:18]
      io_out_l_b <= inner.io.out_l.bits @[Reg.scala 20:22]
    wire io_out_l_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_l_out.valid <= io_out_l_v @[Valid.scala 126:17]
    io_out_l_out.bits <= io_out_l_b @[Valid.scala 127:16]
    io.out_l <= io_out_l_out @[SIGMA.scala 157:14]
    reg io_out_r_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_r_v <= inner.io.out_r.valid @[Valid.scala 130:22]
    reg io_out_r_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_r_b) @[Reg.scala 19:16]
    when inner.io.out_r.valid : @[Reg.scala 20:18]
      io_out_r_b <= inner.io.out_r.bits @[Reg.scala 20:22]
    wire io_out_r_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_r_out.valid <= io_out_r_v @[Valid.scala 126:17]
    io_out_r_out.bits <= io_out_r_b @[Valid.scala 127:16]
    io.out_r <= io_out_r_out @[SIGMA.scala 158:14]
    reg io_out_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_v <= inner.io.out_final.valid @[Valid.scala 130:22]
    reg io_out_data_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_b) @[Reg.scala 19:16]
    when inner.io.out_final.valid : @[Reg.scala 20:18]
      io_out_data_b <= inner.io.out_final.bits @[Reg.scala 20:22]
    wire io_out_data_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_data_out.valid <= io_out_data_v @[Valid.scala 126:17]
    io_out_data_out.bits <= io_out_data_b @[Valid.scala 127:16]
    io.out_data <= io_out_data_out @[SIGMA.scala 159:17]
    reg io_out_same_l_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_l_border_REG) @[SIGMA.scala 160:36]
    io_out_same_l_border_REG <= inner.io.out_same_l_border @[SIGMA.scala 160:36]
    io.out_same_l_border <= io_out_same_l_border_REG @[SIGMA.scala 160:26]
    reg io_out_same_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_REG) @[SIGMA.scala 161:27]
    io_out_same_REG <= inner.io.out_same @[SIGMA.scala 161:27]
    io.out_same <= io_out_same_REG @[SIGMA.scala 161:17]
    reg io_out_same_r_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_r_border_REG) @[SIGMA.scala 162:36]
    io_out_same_r_border_REG <= inner.io.out_same_r_border @[SIGMA.scala 162:36]
    io.out_same_r_border <= io_out_same_r_border_REG @[SIGMA.scala 162:26]

  module FanNodeWrapper_14 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_l : { valid : UInt<1>, bits : { bits : UInt<24>}}[3], flip in_r : { valid : UInt<1>, bits : { bits : UInt<24>}}[3], flip same_l_border : UInt<1>, flip same_l : UInt<1>, flip same_m : UInt<1>, flip same_r : UInt<1>, flip same_r_border : UInt<1>, flip left_child : UInt<1>, out_l : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_r : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}, out_same_l_border : UInt<1>, out_same : UInt<1>, out_same_r_border : UInt<1>}

    inst inner of FanNode @[SIGMA.scala 148:31]
    inner.clock <= clock
    inner.reset <= reset
    reg inner_io_in_l_upPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    inner_io_in_l_upPipe_valid <= io.in_l[0].valid @[Valid.scala 130:22]
    reg inner_io_in_l_upPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), inner_io_in_l_upPipe_bits) @[Reg.scala 19:16]
    when io.in_l[0].valid : @[Reg.scala 20:18]
      inner_io_in_l_upPipe_bits <= io.in_l[0].bits @[Reg.scala 20:22]
    wire inner_io_in_l_up : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    inner_io_in_l_up.valid <= inner_io_in_l_upPipe_valid @[Valid.scala 126:17]
    inner_io_in_l_up.bits <= inner_io_in_l_upPipe_bits @[Valid.scala 127:16]
    wire inner_io_in_l_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 126:21]
    node _inner_io_in_l_out_valid_T = or(inner_io_in_l_up.valid, io.in_l[1].valid) @[SIGMA.scala 127:29]
    inner_io_in_l_out.valid <= _inner_io_in_l_out_valid_T @[SIGMA.scala 127:17]
    node _inner_io_in_l_out_bits_T = mux(inner_io_in_l_up.valid, inner_io_in_l_up.bits, io.in_l[1].bits) @[SIGMA.scala 128:22]
    inner_io_in_l_out.bits <= _inner_io_in_l_out_bits_T @[SIGMA.scala 128:16]
    reg inner_io_in_l_upPipe_valid_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    inner_io_in_l_upPipe_valid_1 <= inner_io_in_l_out.valid @[Valid.scala 130:22]
    reg inner_io_in_l_upPipe_bits_1 : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), inner_io_in_l_upPipe_bits_1) @[Reg.scala 19:16]
    when inner_io_in_l_out.valid : @[Reg.scala 20:18]
      inner_io_in_l_upPipe_bits_1 <= inner_io_in_l_out.bits @[Reg.scala 20:22]
    wire inner_io_in_l_up_1 : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    inner_io_in_l_up_1.valid <= inner_io_in_l_upPipe_valid_1 @[Valid.scala 126:17]
    inner_io_in_l_up_1.bits <= inner_io_in_l_upPipe_bits_1 @[Valid.scala 127:16]
    wire inner_io_in_l_out_1 : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 126:21]
    node _inner_io_in_l_out_valid_T_1 = or(inner_io_in_l_up_1.valid, io.in_l[2].valid) @[SIGMA.scala 127:29]
    inner_io_in_l_out_1.valid <= _inner_io_in_l_out_valid_T_1 @[SIGMA.scala 127:17]
    node _inner_io_in_l_out_bits_T_1 = mux(inner_io_in_l_up_1.valid, inner_io_in_l_up_1.bits, io.in_l[2].bits) @[SIGMA.scala 128:22]
    inner_io_in_l_out_1.bits <= _inner_io_in_l_out_bits_T_1 @[SIGMA.scala 128:16]
    inner.io.in_l.bits.bits <= inner_io_in_l_out_1.bits.bits @[SIGMA.scala 149:19]
    inner.io.in_l.valid <= inner_io_in_l_out_1.valid @[SIGMA.scala 149:19]
    reg inner_io_in_r_upPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    inner_io_in_r_upPipe_valid <= io.in_r[0].valid @[Valid.scala 130:22]
    reg inner_io_in_r_upPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), inner_io_in_r_upPipe_bits) @[Reg.scala 19:16]
    when io.in_r[0].valid : @[Reg.scala 20:18]
      inner_io_in_r_upPipe_bits <= io.in_r[0].bits @[Reg.scala 20:22]
    wire inner_io_in_r_up : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    inner_io_in_r_up.valid <= inner_io_in_r_upPipe_valid @[Valid.scala 126:17]
    inner_io_in_r_up.bits <= inner_io_in_r_upPipe_bits @[Valid.scala 127:16]
    wire inner_io_in_r_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 126:21]
    node _inner_io_in_r_out_valid_T = or(inner_io_in_r_up.valid, io.in_r[1].valid) @[SIGMA.scala 127:29]
    inner_io_in_r_out.valid <= _inner_io_in_r_out_valid_T @[SIGMA.scala 127:17]
    node _inner_io_in_r_out_bits_T = mux(inner_io_in_r_up.valid, inner_io_in_r_up.bits, io.in_r[1].bits) @[SIGMA.scala 128:22]
    inner_io_in_r_out.bits <= _inner_io_in_r_out_bits_T @[SIGMA.scala 128:16]
    reg inner_io_in_r_upPipe_valid_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    inner_io_in_r_upPipe_valid_1 <= inner_io_in_r_out.valid @[Valid.scala 130:22]
    reg inner_io_in_r_upPipe_bits_1 : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), inner_io_in_r_upPipe_bits_1) @[Reg.scala 19:16]
    when inner_io_in_r_out.valid : @[Reg.scala 20:18]
      inner_io_in_r_upPipe_bits_1 <= inner_io_in_r_out.bits @[Reg.scala 20:22]
    wire inner_io_in_r_up_1 : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    inner_io_in_r_up_1.valid <= inner_io_in_r_upPipe_valid_1 @[Valid.scala 126:17]
    inner_io_in_r_up_1.bits <= inner_io_in_r_upPipe_bits_1 @[Valid.scala 127:16]
    wire inner_io_in_r_out_1 : { valid : UInt<1>, bits : { bits : UInt<24>}} @[SIGMA.scala 126:21]
    node _inner_io_in_r_out_valid_T_1 = or(inner_io_in_r_up_1.valid, io.in_r[2].valid) @[SIGMA.scala 127:29]
    inner_io_in_r_out_1.valid <= _inner_io_in_r_out_valid_T_1 @[SIGMA.scala 127:17]
    node _inner_io_in_r_out_bits_T_1 = mux(inner_io_in_r_up_1.valid, inner_io_in_r_up_1.bits, io.in_r[2].bits) @[SIGMA.scala 128:22]
    inner_io_in_r_out_1.bits <= _inner_io_in_r_out_bits_T_1 @[SIGMA.scala 128:16]
    inner.io.in_r.bits.bits <= inner_io_in_r_out_1.bits.bits @[SIGMA.scala 150:19]
    inner.io.in_r.valid <= inner_io_in_r_out_1.valid @[SIGMA.scala 150:19]
    inner.io.same_l <= io.same_l @[SIGMA.scala 151:21]
    inner.io.same_r <= io.same_r @[SIGMA.scala 152:21]
    inner.io.same_m <= io.same_m @[SIGMA.scala 153:21]
    inner.io.same_l_border <= io.same_l_border @[SIGMA.scala 154:28]
    inner.io.same_r_border <= io.same_r_border @[SIGMA.scala 155:28]
    inner.io.left_child <= io.left_child @[SIGMA.scala 156:25]
    reg io_out_l_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_l_v <= inner.io.out_l.valid @[Valid.scala 130:22]
    reg io_out_l_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_l_b) @[Reg.scala 19:16]
    when inner.io.out_l.valid : @[Reg.scala 20:18]
      io_out_l_b <= inner.io.out_l.bits @[Reg.scala 20:22]
    wire io_out_l_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_l_out.valid <= io_out_l_v @[Valid.scala 126:17]
    io_out_l_out.bits <= io_out_l_b @[Valid.scala 127:16]
    io.out_l <= io_out_l_out @[SIGMA.scala 157:14]
    reg io_out_r_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_r_v <= inner.io.out_r.valid @[Valid.scala 130:22]
    reg io_out_r_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_r_b) @[Reg.scala 19:16]
    when inner.io.out_r.valid : @[Reg.scala 20:18]
      io_out_r_b <= inner.io.out_r.bits @[Reg.scala 20:22]
    wire io_out_r_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_r_out.valid <= io_out_r_v @[Valid.scala 126:17]
    io_out_r_out.bits <= io_out_r_b @[Valid.scala 127:16]
    io.out_r <= io_out_r_out @[SIGMA.scala 158:14]
    wire io_out_data_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_data_out.valid <= inner.io.out_final.valid @[Valid.scala 126:17]
    io_out_data_out.bits <= inner.io.out_final.bits @[Valid.scala 127:16]
    io.out_data <= io_out_data_out @[SIGMA.scala 159:17]
    reg io_out_same_l_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_l_border_REG) @[SIGMA.scala 160:36]
    io_out_same_l_border_REG <= inner.io.out_same_l_border @[SIGMA.scala 160:36]
    io.out_same_l_border <= io_out_same_l_border_REG @[SIGMA.scala 160:26]
    reg io_out_same_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_REG) @[SIGMA.scala 161:27]
    io_out_same_REG <= inner.io.out_same @[SIGMA.scala 161:27]
    io.out_same <= io_out_same_REG @[SIGMA.scala 161:17]
    reg io_out_same_r_border_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_out_same_r_border_REG) @[SIGMA.scala 162:36]
    io_out_same_r_border_REG <= inner.io.out_same_r_border @[SIGMA.scala 162:36]
    io.out_same_r_border <= io_out_same_r_border_REG @[SIGMA.scala 162:26]

  module FanNetwork :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_data : { valid : UInt<1>, bits : { bits : UInt<24>}}[16], flip in_same : UInt<1>[15], out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}[16]}

    inst nodes_0_0 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_0.clock <= clock
    nodes_0_0.reset <= reset
    inst nodes_0_1 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_1.clock <= clock
    nodes_0_1.reset <= reset
    inst nodes_0_2 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_2.clock <= clock
    nodes_0_2.reset <= reset
    inst nodes_0_3 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_3.clock <= clock
    nodes_0_3.reset <= reset
    inst nodes_0_4 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_4.clock <= clock
    nodes_0_4.reset <= reset
    inst nodes_0_5 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_5.clock <= clock
    nodes_0_5.reset <= reset
    inst nodes_0_6 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_6.clock <= clock
    nodes_0_6.reset <= reset
    inst nodes_0_7 of FanNodeWrapper @[SIGMA.scala 169:44]
    nodes_0_7.clock <= clock
    nodes_0_7.reset <= reset
    nodes_0_0.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_0_0.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_0.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_0.io.same_m <= io.in_same[0] @[SIGMA.scala 176:23]
    nodes_0_0.io.same_l_border <= UInt<1>("h0") @[SIGMA.scala 177:43]
    nodes_0_0.io.same_r_border <= io.in_same[1] @[SIGMA.scala 180:35]
    nodes_0_0.io.in_l[0].bits.bits <= io.in_data[0].bits.bits @[SIGMA.scala 181:26]
    nodes_0_0.io.in_l[0].valid <= io.in_data[0].valid @[SIGMA.scala 181:26]
    nodes_0_0.io.in_r[0].bits.bits <= io.in_data[1].bits.bits @[SIGMA.scala 182:26]
    nodes_0_0.io.in_r[0].valid <= io.in_data[1].valid @[SIGMA.scala 182:26]
    io.out_data[0] <= nodes_0_0.io.out_data @[SIGMA.scala 183:26]
    nodes_0_1.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_0_1.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_1.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_1.io.same_m <= io.in_same[2] @[SIGMA.scala 176:23]
    nodes_0_1.io.same_l_border <= io.in_same[1] @[SIGMA.scala 178:35]
    nodes_0_1.io.same_r_border <= io.in_same[3] @[SIGMA.scala 180:35]
    nodes_0_1.io.in_l[0].bits.bits <= io.in_data[2].bits.bits @[SIGMA.scala 181:26]
    nodes_0_1.io.in_l[0].valid <= io.in_data[2].valid @[SIGMA.scala 181:26]
    nodes_0_1.io.in_r[0].bits.bits <= io.in_data[3].bits.bits @[SIGMA.scala 182:26]
    nodes_0_1.io.in_r[0].valid <= io.in_data[3].valid @[SIGMA.scala 182:26]
    io.out_data[2] <= nodes_0_1.io.out_data @[SIGMA.scala 183:26]
    nodes_0_2.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_0_2.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_2.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_2.io.same_m <= io.in_same[4] @[SIGMA.scala 176:23]
    nodes_0_2.io.same_l_border <= io.in_same[3] @[SIGMA.scala 178:35]
    nodes_0_2.io.same_r_border <= io.in_same[5] @[SIGMA.scala 180:35]
    nodes_0_2.io.in_l[0].bits.bits <= io.in_data[4].bits.bits @[SIGMA.scala 181:26]
    nodes_0_2.io.in_l[0].valid <= io.in_data[4].valid @[SIGMA.scala 181:26]
    nodes_0_2.io.in_r[0].bits.bits <= io.in_data[5].bits.bits @[SIGMA.scala 182:26]
    nodes_0_2.io.in_r[0].valid <= io.in_data[5].valid @[SIGMA.scala 182:26]
    io.out_data[4] <= nodes_0_2.io.out_data @[SIGMA.scala 183:26]
    nodes_0_3.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_0_3.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_3.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_3.io.same_m <= io.in_same[6] @[SIGMA.scala 176:23]
    nodes_0_3.io.same_l_border <= io.in_same[5] @[SIGMA.scala 178:35]
    nodes_0_3.io.same_r_border <= io.in_same[7] @[SIGMA.scala 180:35]
    nodes_0_3.io.in_l[0].bits.bits <= io.in_data[6].bits.bits @[SIGMA.scala 181:26]
    nodes_0_3.io.in_l[0].valid <= io.in_data[6].valid @[SIGMA.scala 181:26]
    nodes_0_3.io.in_r[0].bits.bits <= io.in_data[7].bits.bits @[SIGMA.scala 182:26]
    nodes_0_3.io.in_r[0].valid <= io.in_data[7].valid @[SIGMA.scala 182:26]
    io.out_data[6] <= nodes_0_3.io.out_data @[SIGMA.scala 183:26]
    nodes_0_4.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_0_4.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_4.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_4.io.same_m <= io.in_same[8] @[SIGMA.scala 176:23]
    nodes_0_4.io.same_l_border <= io.in_same[7] @[SIGMA.scala 178:35]
    nodes_0_4.io.same_r_border <= io.in_same[9] @[SIGMA.scala 180:35]
    nodes_0_4.io.in_l[0].bits.bits <= io.in_data[8].bits.bits @[SIGMA.scala 181:26]
    nodes_0_4.io.in_l[0].valid <= io.in_data[8].valid @[SIGMA.scala 181:26]
    nodes_0_4.io.in_r[0].bits.bits <= io.in_data[9].bits.bits @[SIGMA.scala 182:26]
    nodes_0_4.io.in_r[0].valid <= io.in_data[9].valid @[SIGMA.scala 182:26]
    io.out_data[8] <= nodes_0_4.io.out_data @[SIGMA.scala 183:26]
    nodes_0_5.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_0_5.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_5.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_5.io.same_m <= io.in_same[10] @[SIGMA.scala 176:23]
    nodes_0_5.io.same_l_border <= io.in_same[9] @[SIGMA.scala 178:35]
    nodes_0_5.io.same_r_border <= io.in_same[11] @[SIGMA.scala 180:35]
    nodes_0_5.io.in_l[0].bits.bits <= io.in_data[10].bits.bits @[SIGMA.scala 181:26]
    nodes_0_5.io.in_l[0].valid <= io.in_data[10].valid @[SIGMA.scala 181:26]
    nodes_0_5.io.in_r[0].bits.bits <= io.in_data[11].bits.bits @[SIGMA.scala 182:26]
    nodes_0_5.io.in_r[0].valid <= io.in_data[11].valid @[SIGMA.scala 182:26]
    io.out_data[10] <= nodes_0_5.io.out_data @[SIGMA.scala 183:26]
    nodes_0_6.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_0_6.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_6.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_6.io.same_m <= io.in_same[12] @[SIGMA.scala 176:23]
    nodes_0_6.io.same_l_border <= io.in_same[11] @[SIGMA.scala 178:35]
    nodes_0_6.io.same_r_border <= io.in_same[13] @[SIGMA.scala 180:35]
    nodes_0_6.io.in_l[0].bits.bits <= io.in_data[12].bits.bits @[SIGMA.scala 181:26]
    nodes_0_6.io.in_l[0].valid <= io.in_data[12].valid @[SIGMA.scala 181:26]
    nodes_0_6.io.in_r[0].bits.bits <= io.in_data[13].bits.bits @[SIGMA.scala 182:26]
    nodes_0_6.io.in_r[0].valid <= io.in_data[13].valid @[SIGMA.scala 182:26]
    io.out_data[12] <= nodes_0_6.io.out_data @[SIGMA.scala 183:26]
    nodes_0_7.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_0_7.io.same_l <= UInt<1>("h1") @[SIGMA.scala 174:23]
    nodes_0_7.io.same_r <= UInt<1>("h1") @[SIGMA.scala 175:23]
    nodes_0_7.io.same_m <= io.in_same[14] @[SIGMA.scala 176:23]
    nodes_0_7.io.same_l_border <= io.in_same[13] @[SIGMA.scala 178:35]
    nodes_0_7.io.same_r_border <= UInt<1>("h0") @[SIGMA.scala 179:49]
    nodes_0_7.io.in_l[0].bits.bits <= io.in_data[14].bits.bits @[SIGMA.scala 181:26]
    nodes_0_7.io.in_l[0].valid <= io.in_data[14].valid @[SIGMA.scala 181:26]
    nodes_0_7.io.in_r[0].bits.bits <= io.in_data[15].bits.bits @[SIGMA.scala 182:26]
    nodes_0_7.io.in_r[0].valid <= io.in_data[15].valid @[SIGMA.scala 182:26]
    io.out_data[14] <= nodes_0_7.io.out_data @[SIGMA.scala 183:26]
    inst nodes_1_0 of FanNodeWrapper_8 @[SIGMA.scala 169:44]
    nodes_1_0.clock <= clock
    nodes_1_0.reset <= reset
    inst nodes_1_1 of FanNodeWrapper_8 @[SIGMA.scala 169:44]
    nodes_1_1.clock <= clock
    nodes_1_1.reset <= reset
    inst nodes_1_2 of FanNodeWrapper_8 @[SIGMA.scala 169:44]
    nodes_1_2.clock <= clock
    nodes_1_2.reset <= reset
    inst nodes_1_3 of FanNodeWrapper_8 @[SIGMA.scala 169:44]
    nodes_1_3.clock <= clock
    nodes_1_3.reset <= reset
    nodes_1_0.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_1_0.io.same_l <= nodes_0_0.io.out_same @[SIGMA.scala 188:23]
    nodes_1_0.io.same_r <= nodes_0_1.io.out_same @[SIGMA.scala 189:23]
    nodes_1_0.io.same_m <= nodes_0_1.io.same_l_border @[SIGMA.scala 190:23]
    nodes_1_0.io.same_l_border <= nodes_0_0.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_1_0.io.same_r_border <= nodes_0_1.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_1_0.io.in_l[0].bits.bits <= nodes_0_0.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_1_0.io.in_l[0].valid <= nodes_0_0.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_1_0.io.in_r[0].bits.bits <= nodes_0_1.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_1_0.io.in_r[0].valid <= nodes_0_1.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[1] <= nodes_1_0.io.out_data @[SIGMA.scala 195:26]
    nodes_1_1.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_1_1.io.same_l <= nodes_0_2.io.out_same @[SIGMA.scala 188:23]
    nodes_1_1.io.same_r <= nodes_0_3.io.out_same @[SIGMA.scala 189:23]
    nodes_1_1.io.same_m <= nodes_0_3.io.same_l_border @[SIGMA.scala 190:23]
    nodes_1_1.io.same_l_border <= nodes_0_2.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_1_1.io.same_r_border <= nodes_0_3.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_1_1.io.in_l[0].bits.bits <= nodes_0_2.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_1_1.io.in_l[0].valid <= nodes_0_2.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_1_1.io.in_r[0].bits.bits <= nodes_0_3.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_1_1.io.in_r[0].valid <= nodes_0_3.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[5] <= nodes_1_1.io.out_data @[SIGMA.scala 195:26]
    nodes_1_2.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_1_2.io.same_l <= nodes_0_4.io.out_same @[SIGMA.scala 188:23]
    nodes_1_2.io.same_r <= nodes_0_5.io.out_same @[SIGMA.scala 189:23]
    nodes_1_2.io.same_m <= nodes_0_5.io.same_l_border @[SIGMA.scala 190:23]
    nodes_1_2.io.same_l_border <= nodes_0_4.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_1_2.io.same_r_border <= nodes_0_5.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_1_2.io.in_l[0].bits.bits <= nodes_0_4.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_1_2.io.in_l[0].valid <= nodes_0_4.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_1_2.io.in_r[0].bits.bits <= nodes_0_5.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_1_2.io.in_r[0].valid <= nodes_0_5.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[9] <= nodes_1_2.io.out_data @[SIGMA.scala 195:26]
    nodes_1_3.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_1_3.io.same_l <= nodes_0_6.io.out_same @[SIGMA.scala 188:23]
    nodes_1_3.io.same_r <= nodes_0_7.io.out_same @[SIGMA.scala 189:23]
    nodes_1_3.io.same_m <= nodes_0_7.io.same_l_border @[SIGMA.scala 190:23]
    nodes_1_3.io.same_l_border <= nodes_0_6.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_1_3.io.same_r_border <= nodes_0_7.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_1_3.io.in_l[0].bits.bits <= nodes_0_6.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_1_3.io.in_l[0].valid <= nodes_0_6.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_1_3.io.in_r[0].bits.bits <= nodes_0_7.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_1_3.io.in_r[0].valid <= nodes_0_7.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[13] <= nodes_1_3.io.out_data @[SIGMA.scala 195:26]
    inst nodes_2_0 of FanNodeWrapper_12 @[SIGMA.scala 169:44]
    nodes_2_0.clock <= clock
    nodes_2_0.reset <= reset
    inst nodes_2_1 of FanNodeWrapper_12 @[SIGMA.scala 169:44]
    nodes_2_1.clock <= clock
    nodes_2_1.reset <= reset
    nodes_2_0.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_2_0.io.same_l <= nodes_1_0.io.out_same @[SIGMA.scala 188:23]
    nodes_2_0.io.same_r <= nodes_1_1.io.out_same @[SIGMA.scala 189:23]
    nodes_2_0.io.same_m <= nodes_1_1.io.same_l_border @[SIGMA.scala 190:23]
    nodes_2_0.io.same_l_border <= nodes_1_0.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_2_0.io.same_r_border <= nodes_1_1.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_2_0.io.in_l[0].bits.bits <= nodes_0_1.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_2_0.io.in_l[0].valid <= nodes_0_1.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_2_0.io.in_l[1].bits.bits <= nodes_1_0.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_2_0.io.in_l[1].valid <= nodes_1_0.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_2_0.io.in_r[0].bits.bits <= nodes_0_2.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_2_0.io.in_r[0].valid <= nodes_0_2.io.out_l.valid @[SIGMA.scala 194:52]
    nodes_2_0.io.in_r[1].bits.bits <= nodes_1_1.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_2_0.io.in_r[1].valid <= nodes_1_1.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[3] <= nodes_2_0.io.out_data @[SIGMA.scala 195:26]
    nodes_2_1.io.left_child <= UInt<1>("h0") @[SIGMA.scala 172:25]
    nodes_2_1.io.same_l <= nodes_1_2.io.out_same @[SIGMA.scala 188:23]
    nodes_2_1.io.same_r <= nodes_1_3.io.out_same @[SIGMA.scala 189:23]
    nodes_2_1.io.same_m <= nodes_1_3.io.same_l_border @[SIGMA.scala 190:23]
    nodes_2_1.io.same_l_border <= nodes_1_2.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_2_1.io.same_r_border <= nodes_1_3.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_2_1.io.in_l[0].bits.bits <= nodes_0_5.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_2_1.io.in_l[0].valid <= nodes_0_5.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_2_1.io.in_l[1].bits.bits <= nodes_1_2.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_2_1.io.in_l[1].valid <= nodes_1_2.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_2_1.io.in_r[0].bits.bits <= nodes_0_6.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_2_1.io.in_r[0].valid <= nodes_0_6.io.out_l.valid @[SIGMA.scala 194:52]
    nodes_2_1.io.in_r[1].bits.bits <= nodes_1_3.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_2_1.io.in_r[1].valid <= nodes_1_3.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[11] <= nodes_2_1.io.out_data @[SIGMA.scala 195:26]
    inst nodes_3_0 of FanNodeWrapper_14 @[SIGMA.scala 169:44]
    nodes_3_0.clock <= clock
    nodes_3_0.reset <= reset
    nodes_3_0.io.left_child <= UInt<1>("h1") @[SIGMA.scala 172:25]
    nodes_3_0.io.same_l <= nodes_2_0.io.out_same @[SIGMA.scala 188:23]
    nodes_3_0.io.same_r <= nodes_2_1.io.out_same @[SIGMA.scala 189:23]
    nodes_3_0.io.same_m <= nodes_2_1.io.same_l_border @[SIGMA.scala 190:23]
    nodes_3_0.io.same_l_border <= nodes_2_0.io.out_same_l_border @[SIGMA.scala 191:30]
    nodes_3_0.io.same_r_border <= nodes_2_1.io.out_same_r_border @[SIGMA.scala 192:30]
    nodes_3_0.io.in_l[0].bits.bits <= nodes_0_3.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_3_0.io.in_l[0].valid <= nodes_0_3.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_3_0.io.in_l[1].bits.bits <= nodes_1_1.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_3_0.io.in_l[1].valid <= nodes_1_1.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_3_0.io.in_l[2].bits.bits <= nodes_2_0.io.out_r.bits.bits @[SIGMA.scala 193:52]
    nodes_3_0.io.in_l[2].valid <= nodes_2_0.io.out_r.valid @[SIGMA.scala 193:52]
    nodes_3_0.io.in_r[0].bits.bits <= nodes_0_4.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_3_0.io.in_r[0].valid <= nodes_0_4.io.out_l.valid @[SIGMA.scala 194:52]
    nodes_3_0.io.in_r[1].bits.bits <= nodes_1_2.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_3_0.io.in_r[1].valid <= nodes_1_2.io.out_l.valid @[SIGMA.scala 194:52]
    nodes_3_0.io.in_r[2].bits.bits <= nodes_2_1.io.out_l.bits.bits @[SIGMA.scala 194:52]
    nodes_3_0.io.in_r[2].valid <= nodes_2_1.io.out_l.valid @[SIGMA.scala 194:52]
    io.out_data[7] <= nodes_3_0.io.out_data @[SIGMA.scala 195:26]
    reg io_out_data_15_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_15_v <= nodes_0_7.io.out_r.valid @[Valid.scala 130:22]
    reg io_out_data_15_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_15_b) @[Reg.scala 19:16]
    when nodes_0_7.io.out_r.valid : @[Reg.scala 20:18]
      io_out_data_15_b <= nodes_0_7.io.out_r.bits @[Reg.scala 20:22]
    reg io_out_data_15_outPipe_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_15_outPipe_valid <= io_out_data_15_v @[Valid.scala 130:22]
    reg io_out_data_15_outPipe_bits : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_15_outPipe_bits) @[Reg.scala 19:16]
    when io_out_data_15_v : @[Reg.scala 20:18]
      io_out_data_15_outPipe_bits <= io_out_data_15_b @[Reg.scala 20:22]
    reg io_out_data_15_outPipe_valid_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    io_out_data_15_outPipe_valid_1 <= io_out_data_15_outPipe_valid @[Valid.scala 130:22]
    reg io_out_data_15_outPipe_bits_1 : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), io_out_data_15_outPipe_bits_1) @[Reg.scala 19:16]
    when io_out_data_15_outPipe_valid : @[Reg.scala 20:18]
      io_out_data_15_outPipe_bits_1 <= io_out_data_15_outPipe_bits @[Reg.scala 20:22]
    wire io_out_data_15_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    io_out_data_15_out.valid <= io_out_data_15_outPipe_valid_1 @[Valid.scala 126:17]
    io_out_data_15_out.bits <= io_out_data_15_outPipe_bits_1 @[Valid.scala 127:16]
    io.out_data[15] <= io_out_data_15_out @[SIGMA.scala 199:24]

  module FlexDPE :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in_data : { valid : UInt<1>, bits : { bits : UInt<16>}}[16], flip in_dest : { valid : UInt<1>, bits : UInt<4>}[16], flip in_stationary : UInt<1>, flip in_same : UInt<1>[15], out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}[16]}

    inst xbar of XBar @[SIGMA.scala 205:28]
    xbar.clock <= clock
    xbar.reset <= reset
    inst pe_array_0 of PE @[SIGMA.scala 206:46]
    pe_array_0.clock <= clock
    pe_array_0.reset <= reset
    inst pe_array_1 of PE @[SIGMA.scala 206:46]
    pe_array_1.clock <= clock
    pe_array_1.reset <= reset
    inst pe_array_2 of PE @[SIGMA.scala 206:46]
    pe_array_2.clock <= clock
    pe_array_2.reset <= reset
    inst pe_array_3 of PE @[SIGMA.scala 206:46]
    pe_array_3.clock <= clock
    pe_array_3.reset <= reset
    inst pe_array_4 of PE @[SIGMA.scala 206:46]
    pe_array_4.clock <= clock
    pe_array_4.reset <= reset
    inst pe_array_5 of PE @[SIGMA.scala 206:46]
    pe_array_5.clock <= clock
    pe_array_5.reset <= reset
    inst pe_array_6 of PE @[SIGMA.scala 206:46]
    pe_array_6.clock <= clock
    pe_array_6.reset <= reset
    inst pe_array_7 of PE @[SIGMA.scala 206:46]
    pe_array_7.clock <= clock
    pe_array_7.reset <= reset
    inst pe_array_8 of PE @[SIGMA.scala 206:46]
    pe_array_8.clock <= clock
    pe_array_8.reset <= reset
    inst pe_array_9 of PE @[SIGMA.scala 206:46]
    pe_array_9.clock <= clock
    pe_array_9.reset <= reset
    inst pe_array_10 of PE @[SIGMA.scala 206:46]
    pe_array_10.clock <= clock
    pe_array_10.reset <= reset
    inst pe_array_11 of PE @[SIGMA.scala 206:46]
    pe_array_11.clock <= clock
    pe_array_11.reset <= reset
    inst pe_array_12 of PE @[SIGMA.scala 206:46]
    pe_array_12.clock <= clock
    pe_array_12.reset <= reset
    inst pe_array_13 of PE @[SIGMA.scala 206:46]
    pe_array_13.clock <= clock
    pe_array_13.reset <= reset
    inst pe_array_14 of PE @[SIGMA.scala 206:46]
    pe_array_14.clock <= clock
    pe_array_14.reset <= reset
    inst pe_array_15 of PE @[SIGMA.scala 206:46]
    pe_array_15.clock <= clock
    pe_array_15.reset <= reset
    inst fan of FanNetwork @[SIGMA.scala 207:27]
    fan.clock <= clock
    fan.reset <= reset
    xbar.io.data[0].bits.bits <= io.in_data[0].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[0].valid <= io.in_data[0].valid @[SIGMA.scala 215:16]
    xbar.io.data[1].bits.bits <= io.in_data[1].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[1].valid <= io.in_data[1].valid @[SIGMA.scala 215:16]
    xbar.io.data[2].bits.bits <= io.in_data[2].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[2].valid <= io.in_data[2].valid @[SIGMA.scala 215:16]
    xbar.io.data[3].bits.bits <= io.in_data[3].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[3].valid <= io.in_data[3].valid @[SIGMA.scala 215:16]
    xbar.io.data[4].bits.bits <= io.in_data[4].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[4].valid <= io.in_data[4].valid @[SIGMA.scala 215:16]
    xbar.io.data[5].bits.bits <= io.in_data[5].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[5].valid <= io.in_data[5].valid @[SIGMA.scala 215:16]
    xbar.io.data[6].bits.bits <= io.in_data[6].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[6].valid <= io.in_data[6].valid @[SIGMA.scala 215:16]
    xbar.io.data[7].bits.bits <= io.in_data[7].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[7].valid <= io.in_data[7].valid @[SIGMA.scala 215:16]
    xbar.io.data[8].bits.bits <= io.in_data[8].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[8].valid <= io.in_data[8].valid @[SIGMA.scala 215:16]
    xbar.io.data[9].bits.bits <= io.in_data[9].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[9].valid <= io.in_data[9].valid @[SIGMA.scala 215:16]
    xbar.io.data[10].bits.bits <= io.in_data[10].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[10].valid <= io.in_data[10].valid @[SIGMA.scala 215:16]
    xbar.io.data[11].bits.bits <= io.in_data[11].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[11].valid <= io.in_data[11].valid @[SIGMA.scala 215:16]
    xbar.io.data[12].bits.bits <= io.in_data[12].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[12].valid <= io.in_data[12].valid @[SIGMA.scala 215:16]
    xbar.io.data[13].bits.bits <= io.in_data[13].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[13].valid <= io.in_data[13].valid @[SIGMA.scala 215:16]
    xbar.io.data[14].bits.bits <= io.in_data[14].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[14].valid <= io.in_data[14].valid @[SIGMA.scala 215:16]
    xbar.io.data[15].bits.bits <= io.in_data[15].bits.bits @[SIGMA.scala 215:16]
    xbar.io.data[15].valid <= io.in_data[15].valid @[SIGMA.scala 215:16]
    xbar.io.dest[0].bits <= io.in_dest[0].bits @[SIGMA.scala 216:16]
    xbar.io.dest[0].valid <= io.in_dest[0].valid @[SIGMA.scala 216:16]
    xbar.io.dest[1].bits <= io.in_dest[1].bits @[SIGMA.scala 216:16]
    xbar.io.dest[1].valid <= io.in_dest[1].valid @[SIGMA.scala 216:16]
    xbar.io.dest[2].bits <= io.in_dest[2].bits @[SIGMA.scala 216:16]
    xbar.io.dest[2].valid <= io.in_dest[2].valid @[SIGMA.scala 216:16]
    xbar.io.dest[3].bits <= io.in_dest[3].bits @[SIGMA.scala 216:16]
    xbar.io.dest[3].valid <= io.in_dest[3].valid @[SIGMA.scala 216:16]
    xbar.io.dest[4].bits <= io.in_dest[4].bits @[SIGMA.scala 216:16]
    xbar.io.dest[4].valid <= io.in_dest[4].valid @[SIGMA.scala 216:16]
    xbar.io.dest[5].bits <= io.in_dest[5].bits @[SIGMA.scala 216:16]
    xbar.io.dest[5].valid <= io.in_dest[5].valid @[SIGMA.scala 216:16]
    xbar.io.dest[6].bits <= io.in_dest[6].bits @[SIGMA.scala 216:16]
    xbar.io.dest[6].valid <= io.in_dest[6].valid @[SIGMA.scala 216:16]
    xbar.io.dest[7].bits <= io.in_dest[7].bits @[SIGMA.scala 216:16]
    xbar.io.dest[7].valid <= io.in_dest[7].valid @[SIGMA.scala 216:16]
    xbar.io.dest[8].bits <= io.in_dest[8].bits @[SIGMA.scala 216:16]
    xbar.io.dest[8].valid <= io.in_dest[8].valid @[SIGMA.scala 216:16]
    xbar.io.dest[9].bits <= io.in_dest[9].bits @[SIGMA.scala 216:16]
    xbar.io.dest[9].valid <= io.in_dest[9].valid @[SIGMA.scala 216:16]
    xbar.io.dest[10].bits <= io.in_dest[10].bits @[SIGMA.scala 216:16]
    xbar.io.dest[10].valid <= io.in_dest[10].valid @[SIGMA.scala 216:16]
    xbar.io.dest[11].bits <= io.in_dest[11].bits @[SIGMA.scala 216:16]
    xbar.io.dest[11].valid <= io.in_dest[11].valid @[SIGMA.scala 216:16]
    xbar.io.dest[12].bits <= io.in_dest[12].bits @[SIGMA.scala 216:16]
    xbar.io.dest[12].valid <= io.in_dest[12].valid @[SIGMA.scala 216:16]
    xbar.io.dest[13].bits <= io.in_dest[13].bits @[SIGMA.scala 216:16]
    xbar.io.dest[13].valid <= io.in_dest[13].valid @[SIGMA.scala 216:16]
    xbar.io.dest[14].bits <= io.in_dest[14].bits @[SIGMA.scala 216:16]
    xbar.io.dest[14].valid <= io.in_dest[14].valid @[SIGMA.scala 216:16]
    xbar.io.dest[15].bits <= io.in_dest[15].bits @[SIGMA.scala 216:16]
    xbar.io.dest[15].valid <= io.in_dest[15].valid @[SIGMA.scala 216:16]
    reg delay_stationary : UInt<1>, clock with :
      reset => (UInt<1>("h0"), delay_stationary) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      delay_stationary <= io.in_stationary @[Reg.scala 20:22]
    reg pe_array_0_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_0_io_in_data_v <= xbar.io.out[0].valid @[Valid.scala 130:22]
    reg pe_array_0_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_0_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[0].valid : @[Reg.scala 20:18]
      pe_array_0_io_in_data_b <= xbar.io.out[0].bits @[Reg.scala 20:22]
    wire pe_array_0_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_0_io_in_data_out.valid <= pe_array_0_io_in_data_v @[Valid.scala 126:17]
    pe_array_0_io_in_data_out.bits <= pe_array_0_io_in_data_b @[Valid.scala 127:16]
    pe_array_0.io.in_data.bits.bits <= pe_array_0_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_0.io.in_data.valid <= pe_array_0_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_0.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_1_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_1_io_in_data_v <= xbar.io.out[1].valid @[Valid.scala 130:22]
    reg pe_array_1_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_1_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[1].valid : @[Reg.scala 20:18]
      pe_array_1_io_in_data_b <= xbar.io.out[1].bits @[Reg.scala 20:22]
    wire pe_array_1_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_1_io_in_data_out.valid <= pe_array_1_io_in_data_v @[Valid.scala 126:17]
    pe_array_1_io_in_data_out.bits <= pe_array_1_io_in_data_b @[Valid.scala 127:16]
    pe_array_1.io.in_data.bits.bits <= pe_array_1_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_1.io.in_data.valid <= pe_array_1_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_1.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_2_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_2_io_in_data_v <= xbar.io.out[2].valid @[Valid.scala 130:22]
    reg pe_array_2_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_2_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[2].valid : @[Reg.scala 20:18]
      pe_array_2_io_in_data_b <= xbar.io.out[2].bits @[Reg.scala 20:22]
    wire pe_array_2_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_2_io_in_data_out.valid <= pe_array_2_io_in_data_v @[Valid.scala 126:17]
    pe_array_2_io_in_data_out.bits <= pe_array_2_io_in_data_b @[Valid.scala 127:16]
    pe_array_2.io.in_data.bits.bits <= pe_array_2_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_2.io.in_data.valid <= pe_array_2_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_2.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_3_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_3_io_in_data_v <= xbar.io.out[3].valid @[Valid.scala 130:22]
    reg pe_array_3_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_3_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[3].valid : @[Reg.scala 20:18]
      pe_array_3_io_in_data_b <= xbar.io.out[3].bits @[Reg.scala 20:22]
    wire pe_array_3_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_3_io_in_data_out.valid <= pe_array_3_io_in_data_v @[Valid.scala 126:17]
    pe_array_3_io_in_data_out.bits <= pe_array_3_io_in_data_b @[Valid.scala 127:16]
    pe_array_3.io.in_data.bits.bits <= pe_array_3_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_3.io.in_data.valid <= pe_array_3_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_3.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_4_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_4_io_in_data_v <= xbar.io.out[4].valid @[Valid.scala 130:22]
    reg pe_array_4_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_4_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[4].valid : @[Reg.scala 20:18]
      pe_array_4_io_in_data_b <= xbar.io.out[4].bits @[Reg.scala 20:22]
    wire pe_array_4_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_4_io_in_data_out.valid <= pe_array_4_io_in_data_v @[Valid.scala 126:17]
    pe_array_4_io_in_data_out.bits <= pe_array_4_io_in_data_b @[Valid.scala 127:16]
    pe_array_4.io.in_data.bits.bits <= pe_array_4_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_4.io.in_data.valid <= pe_array_4_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_4.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_5_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_5_io_in_data_v <= xbar.io.out[5].valid @[Valid.scala 130:22]
    reg pe_array_5_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_5_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[5].valid : @[Reg.scala 20:18]
      pe_array_5_io_in_data_b <= xbar.io.out[5].bits @[Reg.scala 20:22]
    wire pe_array_5_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_5_io_in_data_out.valid <= pe_array_5_io_in_data_v @[Valid.scala 126:17]
    pe_array_5_io_in_data_out.bits <= pe_array_5_io_in_data_b @[Valid.scala 127:16]
    pe_array_5.io.in_data.bits.bits <= pe_array_5_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_5.io.in_data.valid <= pe_array_5_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_5.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_6_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_6_io_in_data_v <= xbar.io.out[6].valid @[Valid.scala 130:22]
    reg pe_array_6_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_6_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[6].valid : @[Reg.scala 20:18]
      pe_array_6_io_in_data_b <= xbar.io.out[6].bits @[Reg.scala 20:22]
    wire pe_array_6_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_6_io_in_data_out.valid <= pe_array_6_io_in_data_v @[Valid.scala 126:17]
    pe_array_6_io_in_data_out.bits <= pe_array_6_io_in_data_b @[Valid.scala 127:16]
    pe_array_6.io.in_data.bits.bits <= pe_array_6_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_6.io.in_data.valid <= pe_array_6_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_6.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_7_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_7_io_in_data_v <= xbar.io.out[7].valid @[Valid.scala 130:22]
    reg pe_array_7_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_7_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[7].valid : @[Reg.scala 20:18]
      pe_array_7_io_in_data_b <= xbar.io.out[7].bits @[Reg.scala 20:22]
    wire pe_array_7_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_7_io_in_data_out.valid <= pe_array_7_io_in_data_v @[Valid.scala 126:17]
    pe_array_7_io_in_data_out.bits <= pe_array_7_io_in_data_b @[Valid.scala 127:16]
    pe_array_7.io.in_data.bits.bits <= pe_array_7_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_7.io.in_data.valid <= pe_array_7_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_7.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_8_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_8_io_in_data_v <= xbar.io.out[8].valid @[Valid.scala 130:22]
    reg pe_array_8_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_8_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[8].valid : @[Reg.scala 20:18]
      pe_array_8_io_in_data_b <= xbar.io.out[8].bits @[Reg.scala 20:22]
    wire pe_array_8_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_8_io_in_data_out.valid <= pe_array_8_io_in_data_v @[Valid.scala 126:17]
    pe_array_8_io_in_data_out.bits <= pe_array_8_io_in_data_b @[Valid.scala 127:16]
    pe_array_8.io.in_data.bits.bits <= pe_array_8_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_8.io.in_data.valid <= pe_array_8_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_8.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_9_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_9_io_in_data_v <= xbar.io.out[9].valid @[Valid.scala 130:22]
    reg pe_array_9_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_9_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[9].valid : @[Reg.scala 20:18]
      pe_array_9_io_in_data_b <= xbar.io.out[9].bits @[Reg.scala 20:22]
    wire pe_array_9_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_9_io_in_data_out.valid <= pe_array_9_io_in_data_v @[Valid.scala 126:17]
    pe_array_9_io_in_data_out.bits <= pe_array_9_io_in_data_b @[Valid.scala 127:16]
    pe_array_9.io.in_data.bits.bits <= pe_array_9_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_9.io.in_data.valid <= pe_array_9_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_9.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_10_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_10_io_in_data_v <= xbar.io.out[10].valid @[Valid.scala 130:22]
    reg pe_array_10_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_10_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[10].valid : @[Reg.scala 20:18]
      pe_array_10_io_in_data_b <= xbar.io.out[10].bits @[Reg.scala 20:22]
    wire pe_array_10_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_10_io_in_data_out.valid <= pe_array_10_io_in_data_v @[Valid.scala 126:17]
    pe_array_10_io_in_data_out.bits <= pe_array_10_io_in_data_b @[Valid.scala 127:16]
    pe_array_10.io.in_data.bits.bits <= pe_array_10_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_10.io.in_data.valid <= pe_array_10_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_10.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_11_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_11_io_in_data_v <= xbar.io.out[11].valid @[Valid.scala 130:22]
    reg pe_array_11_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_11_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[11].valid : @[Reg.scala 20:18]
      pe_array_11_io_in_data_b <= xbar.io.out[11].bits @[Reg.scala 20:22]
    wire pe_array_11_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_11_io_in_data_out.valid <= pe_array_11_io_in_data_v @[Valid.scala 126:17]
    pe_array_11_io_in_data_out.bits <= pe_array_11_io_in_data_b @[Valid.scala 127:16]
    pe_array_11.io.in_data.bits.bits <= pe_array_11_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_11.io.in_data.valid <= pe_array_11_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_11.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_12_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_12_io_in_data_v <= xbar.io.out[12].valid @[Valid.scala 130:22]
    reg pe_array_12_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_12_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[12].valid : @[Reg.scala 20:18]
      pe_array_12_io_in_data_b <= xbar.io.out[12].bits @[Reg.scala 20:22]
    wire pe_array_12_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_12_io_in_data_out.valid <= pe_array_12_io_in_data_v @[Valid.scala 126:17]
    pe_array_12_io_in_data_out.bits <= pe_array_12_io_in_data_b @[Valid.scala 127:16]
    pe_array_12.io.in_data.bits.bits <= pe_array_12_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_12.io.in_data.valid <= pe_array_12_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_12.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_13_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_13_io_in_data_v <= xbar.io.out[13].valid @[Valid.scala 130:22]
    reg pe_array_13_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_13_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[13].valid : @[Reg.scala 20:18]
      pe_array_13_io_in_data_b <= xbar.io.out[13].bits @[Reg.scala 20:22]
    wire pe_array_13_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_13_io_in_data_out.valid <= pe_array_13_io_in_data_v @[Valid.scala 126:17]
    pe_array_13_io_in_data_out.bits <= pe_array_13_io_in_data_b @[Valid.scala 127:16]
    pe_array_13.io.in_data.bits.bits <= pe_array_13_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_13.io.in_data.valid <= pe_array_13_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_13.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_14_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_14_io_in_data_v <= xbar.io.out[14].valid @[Valid.scala 130:22]
    reg pe_array_14_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_14_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[14].valid : @[Reg.scala 20:18]
      pe_array_14_io_in_data_b <= xbar.io.out[14].bits @[Reg.scala 20:22]
    wire pe_array_14_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_14_io_in_data_out.valid <= pe_array_14_io_in_data_v @[Valid.scala 126:17]
    pe_array_14_io_in_data_out.bits <= pe_array_14_io_in_data_b @[Valid.scala 127:16]
    pe_array_14.io.in_data.bits.bits <= pe_array_14_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_14.io.in_data.valid <= pe_array_14_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_14.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg pe_array_15_io_in_data_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    pe_array_15_io_in_data_v <= xbar.io.out[15].valid @[Valid.scala 130:22]
    reg pe_array_15_io_in_data_b : { bits : UInt<16>}, clock with :
      reset => (UInt<1>("h0"), pe_array_15_io_in_data_b) @[Reg.scala 19:16]
    when xbar.io.out[15].valid : @[Reg.scala 20:18]
      pe_array_15_io_in_data_b <= xbar.io.out[15].bits @[Reg.scala 20:22]
    wire pe_array_15_io_in_data_out : { valid : UInt<1>, bits : { bits : UInt<16>}} @[Valid.scala 125:21]
    pe_array_15_io_in_data_out.valid <= pe_array_15_io_in_data_v @[Valid.scala 126:17]
    pe_array_15_io_in_data_out.bits <= pe_array_15_io_in_data_b @[Valid.scala 127:16]
    pe_array_15.io.in_data.bits.bits <= pe_array_15_io_in_data_out.bits.bits @[SIGMA.scala 220:21]
    pe_array_15.io.in_data.valid <= pe_array_15_io_in_data_out.valid @[SIGMA.scala 220:21]
    pe_array_15.io.in_stationary <= delay_stationary @[SIGMA.scala 221:27]
    reg r : UInt<1>[15], clock with :
      reset => (UInt<1>("h0"), r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      r[0] <= io.in_same[0] @[Reg.scala 20:22]
      r[1] <= io.in_same[1] @[Reg.scala 20:22]
      r[2] <= io.in_same[2] @[Reg.scala 20:22]
      r[3] <= io.in_same[3] @[Reg.scala 20:22]
      r[4] <= io.in_same[4] @[Reg.scala 20:22]
      r[5] <= io.in_same[5] @[Reg.scala 20:22]
      r[6] <= io.in_same[6] @[Reg.scala 20:22]
      r[7] <= io.in_same[7] @[Reg.scala 20:22]
      r[8] <= io.in_same[8] @[Reg.scala 20:22]
      r[9] <= io.in_same[9] @[Reg.scala 20:22]
      r[10] <= io.in_same[10] @[Reg.scala 20:22]
      r[11] <= io.in_same[11] @[Reg.scala 20:22]
      r[12] <= io.in_same[12] @[Reg.scala 20:22]
      r[13] <= io.in_same[13] @[Reg.scala 20:22]
      r[14] <= io.in_same[14] @[Reg.scala 20:22]
    reg r_1 : UInt<1>[15], clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      r_1[0] <= r[0] @[Reg.scala 20:22]
      r_1[1] <= r[1] @[Reg.scala 20:22]
      r_1[2] <= r[2] @[Reg.scala 20:22]
      r_1[3] <= r[3] @[Reg.scala 20:22]
      r_1[4] <= r[4] @[Reg.scala 20:22]
      r_1[5] <= r[5] @[Reg.scala 20:22]
      r_1[6] <= r[6] @[Reg.scala 20:22]
      r_1[7] <= r[7] @[Reg.scala 20:22]
      r_1[8] <= r[8] @[Reg.scala 20:22]
      r_1[9] <= r[9] @[Reg.scala 20:22]
      r_1[10] <= r[10] @[Reg.scala 20:22]
      r_1[11] <= r[11] @[Reg.scala 20:22]
      r_1[12] <= r[12] @[Reg.scala 20:22]
      r_1[13] <= r[13] @[Reg.scala 20:22]
      r_1[14] <= r[14] @[Reg.scala 20:22]
    fan.io.in_same[0] <= r_1[0] @[SIGMA.scala 223:18]
    fan.io.in_same[1] <= r_1[1] @[SIGMA.scala 223:18]
    fan.io.in_same[2] <= r_1[2] @[SIGMA.scala 223:18]
    fan.io.in_same[3] <= r_1[3] @[SIGMA.scala 223:18]
    fan.io.in_same[4] <= r_1[4] @[SIGMA.scala 223:18]
    fan.io.in_same[5] <= r_1[5] @[SIGMA.scala 223:18]
    fan.io.in_same[6] <= r_1[6] @[SIGMA.scala 223:18]
    fan.io.in_same[7] <= r_1[7] @[SIGMA.scala 223:18]
    fan.io.in_same[8] <= r_1[8] @[SIGMA.scala 223:18]
    fan.io.in_same[9] <= r_1[9] @[SIGMA.scala 223:18]
    fan.io.in_same[10] <= r_1[10] @[SIGMA.scala 223:18]
    fan.io.in_same[11] <= r_1[11] @[SIGMA.scala 223:18]
    fan.io.in_same[12] <= r_1[12] @[SIGMA.scala 223:18]
    fan.io.in_same[13] <= r_1[13] @[SIGMA.scala 223:18]
    fan.io.in_same[14] <= r_1[14] @[SIGMA.scala 223:18]
    reg fan_io_in_data_0_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_0_v <= pe_array_0.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_0_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_0_b) @[Reg.scala 19:16]
    when pe_array_0.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_0_b <= pe_array_0.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_0_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_0_out.valid <= fan_io_in_data_0_v @[Valid.scala 126:17]
    fan_io_in_data_0_out.bits <= fan_io_in_data_0_b @[Valid.scala 127:16]
    fan.io.in_data[0].bits.bits <= fan_io_in_data_0_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[0].valid <= fan_io_in_data_0_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_1_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_1_v <= pe_array_1.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_1_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_1_b) @[Reg.scala 19:16]
    when pe_array_1.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_1_b <= pe_array_1.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_1_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_1_out.valid <= fan_io_in_data_1_v @[Valid.scala 126:17]
    fan_io_in_data_1_out.bits <= fan_io_in_data_1_b @[Valid.scala 127:16]
    fan.io.in_data[1].bits.bits <= fan_io_in_data_1_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[1].valid <= fan_io_in_data_1_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_2_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_2_v <= pe_array_2.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_2_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_2_b) @[Reg.scala 19:16]
    when pe_array_2.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_2_b <= pe_array_2.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_2_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_2_out.valid <= fan_io_in_data_2_v @[Valid.scala 126:17]
    fan_io_in_data_2_out.bits <= fan_io_in_data_2_b @[Valid.scala 127:16]
    fan.io.in_data[2].bits.bits <= fan_io_in_data_2_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[2].valid <= fan_io_in_data_2_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_3_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_3_v <= pe_array_3.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_3_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_3_b) @[Reg.scala 19:16]
    when pe_array_3.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_3_b <= pe_array_3.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_3_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_3_out.valid <= fan_io_in_data_3_v @[Valid.scala 126:17]
    fan_io_in_data_3_out.bits <= fan_io_in_data_3_b @[Valid.scala 127:16]
    fan.io.in_data[3].bits.bits <= fan_io_in_data_3_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[3].valid <= fan_io_in_data_3_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_4_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_4_v <= pe_array_4.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_4_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_4_b) @[Reg.scala 19:16]
    when pe_array_4.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_4_b <= pe_array_4.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_4_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_4_out.valid <= fan_io_in_data_4_v @[Valid.scala 126:17]
    fan_io_in_data_4_out.bits <= fan_io_in_data_4_b @[Valid.scala 127:16]
    fan.io.in_data[4].bits.bits <= fan_io_in_data_4_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[4].valid <= fan_io_in_data_4_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_5_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_5_v <= pe_array_5.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_5_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_5_b) @[Reg.scala 19:16]
    when pe_array_5.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_5_b <= pe_array_5.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_5_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_5_out.valid <= fan_io_in_data_5_v @[Valid.scala 126:17]
    fan_io_in_data_5_out.bits <= fan_io_in_data_5_b @[Valid.scala 127:16]
    fan.io.in_data[5].bits.bits <= fan_io_in_data_5_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[5].valid <= fan_io_in_data_5_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_6_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_6_v <= pe_array_6.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_6_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_6_b) @[Reg.scala 19:16]
    when pe_array_6.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_6_b <= pe_array_6.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_6_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_6_out.valid <= fan_io_in_data_6_v @[Valid.scala 126:17]
    fan_io_in_data_6_out.bits <= fan_io_in_data_6_b @[Valid.scala 127:16]
    fan.io.in_data[6].bits.bits <= fan_io_in_data_6_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[6].valid <= fan_io_in_data_6_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_7_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_7_v <= pe_array_7.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_7_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_7_b) @[Reg.scala 19:16]
    when pe_array_7.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_7_b <= pe_array_7.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_7_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_7_out.valid <= fan_io_in_data_7_v @[Valid.scala 126:17]
    fan_io_in_data_7_out.bits <= fan_io_in_data_7_b @[Valid.scala 127:16]
    fan.io.in_data[7].bits.bits <= fan_io_in_data_7_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[7].valid <= fan_io_in_data_7_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_8_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_8_v <= pe_array_8.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_8_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_8_b) @[Reg.scala 19:16]
    when pe_array_8.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_8_b <= pe_array_8.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_8_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_8_out.valid <= fan_io_in_data_8_v @[Valid.scala 126:17]
    fan_io_in_data_8_out.bits <= fan_io_in_data_8_b @[Valid.scala 127:16]
    fan.io.in_data[8].bits.bits <= fan_io_in_data_8_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[8].valid <= fan_io_in_data_8_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_9_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_9_v <= pe_array_9.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_9_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_9_b) @[Reg.scala 19:16]
    when pe_array_9.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_9_b <= pe_array_9.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_9_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_9_out.valid <= fan_io_in_data_9_v @[Valid.scala 126:17]
    fan_io_in_data_9_out.bits <= fan_io_in_data_9_b @[Valid.scala 127:16]
    fan.io.in_data[9].bits.bits <= fan_io_in_data_9_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[9].valid <= fan_io_in_data_9_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_10_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_10_v <= pe_array_10.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_10_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_10_b) @[Reg.scala 19:16]
    when pe_array_10.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_10_b <= pe_array_10.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_10_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_10_out.valid <= fan_io_in_data_10_v @[Valid.scala 126:17]
    fan_io_in_data_10_out.bits <= fan_io_in_data_10_b @[Valid.scala 127:16]
    fan.io.in_data[10].bits.bits <= fan_io_in_data_10_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[10].valid <= fan_io_in_data_10_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_11_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_11_v <= pe_array_11.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_11_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_11_b) @[Reg.scala 19:16]
    when pe_array_11.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_11_b <= pe_array_11.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_11_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_11_out.valid <= fan_io_in_data_11_v @[Valid.scala 126:17]
    fan_io_in_data_11_out.bits <= fan_io_in_data_11_b @[Valid.scala 127:16]
    fan.io.in_data[11].bits.bits <= fan_io_in_data_11_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[11].valid <= fan_io_in_data_11_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_12_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_12_v <= pe_array_12.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_12_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_12_b) @[Reg.scala 19:16]
    when pe_array_12.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_12_b <= pe_array_12.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_12_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_12_out.valid <= fan_io_in_data_12_v @[Valid.scala 126:17]
    fan_io_in_data_12_out.bits <= fan_io_in_data_12_b @[Valid.scala 127:16]
    fan.io.in_data[12].bits.bits <= fan_io_in_data_12_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[12].valid <= fan_io_in_data_12_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_13_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_13_v <= pe_array_13.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_13_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_13_b) @[Reg.scala 19:16]
    when pe_array_13.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_13_b <= pe_array_13.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_13_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_13_out.valid <= fan_io_in_data_13_v @[Valid.scala 126:17]
    fan_io_in_data_13_out.bits <= fan_io_in_data_13_b @[Valid.scala 127:16]
    fan.io.in_data[13].bits.bits <= fan_io_in_data_13_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[13].valid <= fan_io_in_data_13_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_14_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_14_v <= pe_array_14.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_14_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_14_b) @[Reg.scala 19:16]
    when pe_array_14.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_14_b <= pe_array_14.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_14_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_14_out.valid <= fan_io_in_data_14_v @[Valid.scala 126:17]
    fan_io_in_data_14_out.bits <= fan_io_in_data_14_b @[Valid.scala 127:16]
    fan.io.in_data[14].bits.bits <= fan_io_in_data_14_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[14].valid <= fan_io_in_data_14_out.valid @[SIGMA.scala 225:35]
    reg fan_io_in_data_15_v : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Valid.scala 130:22]
    fan_io_in_data_15_v <= pe_array_15.io.out_data.valid @[Valid.scala 130:22]
    reg fan_io_in_data_15_b : { bits : UInt<24>}, clock with :
      reset => (UInt<1>("h0"), fan_io_in_data_15_b) @[Reg.scala 19:16]
    when pe_array_15.io.out_data.valid : @[Reg.scala 20:18]
      fan_io_in_data_15_b <= pe_array_15.io.out_data.bits @[Reg.scala 20:22]
    wire fan_io_in_data_15_out : { valid : UInt<1>, bits : { bits : UInt<24>}} @[Valid.scala 125:21]
    fan_io_in_data_15_out.valid <= fan_io_in_data_15_v @[Valid.scala 126:17]
    fan_io_in_data_15_out.bits <= fan_io_in_data_15_b @[Valid.scala 127:16]
    fan.io.in_data[15].bits.bits <= fan_io_in_data_15_out.bits.bits @[SIGMA.scala 225:35]
    fan.io.in_data[15].valid <= fan_io_in_data_15_out.valid @[SIGMA.scala 225:35]
    io.out_data[0] <= fan.io.out_data[0] @[SIGMA.scala 228:32]
    io.out_data[1] <= fan.io.out_data[1] @[SIGMA.scala 228:32]
    io.out_data[2] <= fan.io.out_data[2] @[SIGMA.scala 228:32]
    io.out_data[3] <= fan.io.out_data[3] @[SIGMA.scala 228:32]
    io.out_data[4] <= fan.io.out_data[4] @[SIGMA.scala 228:32]
    io.out_data[5] <= fan.io.out_data[5] @[SIGMA.scala 228:32]
    io.out_data[6] <= fan.io.out_data[6] @[SIGMA.scala 228:32]
    io.out_data[7] <= fan.io.out_data[7] @[SIGMA.scala 228:32]
    io.out_data[8] <= fan.io.out_data[8] @[SIGMA.scala 228:32]
    io.out_data[9] <= fan.io.out_data[9] @[SIGMA.scala 228:32]
    io.out_data[10] <= fan.io.out_data[10] @[SIGMA.scala 228:32]
    io.out_data[11] <= fan.io.out_data[11] @[SIGMA.scala 228:32]
    io.out_data[12] <= fan.io.out_data[12] @[SIGMA.scala 228:32]
    io.out_data[13] <= fan.io.out_data[13] @[SIGMA.scala 228:32]
    io.out_data[14] <= fan.io.out_data[14] @[SIGMA.scala 228:32]
    io.out_data[15] <= fan.io.out_data[15] @[SIGMA.scala 228:32]

  module top :
    input clock : Clock
    input reset : UInt<1>
    output io_1 : { flip in_data : { valid : UInt<1>, bits : { bits : UInt<16>}}[16], flip in_dest : { valid : UInt<1>, bits : UInt<4>}[16], flip in_stationary : UInt<1>, flip in_same : UInt<1>[15], out_data : { valid : UInt<1>, bits : { bits : UInt<24>}}[16]}

    inst inst_0 of FlexDPE

    inst_0.clock <= clock
    inst_0.reset <= reset

    io_1 <= inst_0.io


